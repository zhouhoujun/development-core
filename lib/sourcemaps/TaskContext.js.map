{"version":3,"sources":["TaskContext.ts"],"names":["bindingConfig","cfg","parent","createContext","opt","option","add","TaskContext","currentOperation","env","oper","deploy","Operation_1","Operation","release","build","watch","test","serve","e2e","getAssertSrc","assert","src","testSrc","e2eSrc","watchSrc","clean","cleanSrc","dist","getCurrentDist","ds","ctx","taskStringVal","deployDist","releaseDist","e2eDist","testDist","buildDist","files","express","filter","mapping","Promise","resolve","globby","then","_","map","taskSourceVal","isFunction","name","require","gulp","chalk","child_process_1","minimist","generateTask_1","taskSequence_1","sortOrder_1","match_1","absolute_1","findTasks_1","path","fs","Mode_1","RunWay_1","NodeSequence_1","exports","NULLBuilder","node","isBuilt","globals","this","taskseq","sequence","children","packages","createEnv","setConfig","Object","defineProperty","prototype","_gulp","_builder","builder","process","argv","slice","string","default","NODE_ENV","setEnvViaOperate","undefined","extend","root","getRootPath","to","getConfig","isConfig","obj","context","curcfg","omit","remove","push","items","each","i","isTask","find","mode","item","contexts","Mode","traverse","r","route","eachChildren","trans","arr","matchCompare","task","match","getSrc","relative","c","absoluteSrc","getDist","absolutePath","subTaskName","ext","taskName","names","toStr","t","reverse","isString","defaultTaskName","join","findTasks","module","envmatch","group","findTasksInModule","findTasksInDir","dirs","findTaskDefine","findTaskDefineInModule","findTaskDefineInDir","fileFilter","toSequence","tasks","zipName","runSequence","runTaskSequence","zipSequence","flattenSequence","generateTask","gtask","concat","addToSequence","_this","getRootFolders","getFolders","pathstr","dir","readdirSync","folders","d","sf","lstatSync","isDirectory","fl","getDistFolders","toRootSrc","toRootPath","toDistSrc","toDistPath","val","toSrc","source","toUrl","basePath","toPath","replace","getPackage","filename","packageFile","setupChildren","all","setup","seq","load","subtasks","tseq","srcs","ordertask","sortOrder","order","subseq","idx","isArray","length","ptasks","it","getRunSequence","tk","runWay","RunWay","parallel","nodeSequence","NodeSequence","after","splice","apply","addTask","_i","arguments","_a","removeTask","indexOf","run","help","runDynamic","getInfo","ps","st","execute","execShell","cmd","options","allowError","reject","console","log","cyan","shell","exec","err","stdout","stderr","on","data","code","execFile","file","args","existsSync","proc","yellow","printHelp","isBoolean","registerTasks","globalTasks","keys"],"mappings":"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","file":"../TaskContext.js","sourcesContent":["import *as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport *as gulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport { exec, execFile, ExecOptions, ExecFileOptions } from 'child_process';\r\nimport * as minimist from 'minimist';\r\nimport { generateTask } from './generateTask';\r\nimport { toSequence, runSequence, addToSequence, zipSequence, flattenSequence, runTaskSequence } from './taskSequence';\r\nimport { sortOrder } from './utils/sortOrder';\r\nimport { matchCompare } from './utils/match';\r\nimport { absoluteSrc, absolutePath } from './utils/absolute';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './findTasks';\r\nimport { IPipeTask } from './PipeTask';\r\nimport *as path from 'path';\r\nimport *as fs from 'fs';\r\nimport { ITaskConfig } from './TaskConfig';\r\nimport { ITaskContext } from './ITaskContext';\r\nimport { IAssertOption } from './IAssertOption';\r\nimport { Builder } from './Builder';\r\nimport { IAsserts } from './IAsserts';\r\nimport { ITask, ITaskInfo } from './ITask';\r\nimport { Src, TaskString, TaskSource, ZipTaskName, folderCallback, CtxType } from './types';\r\nimport { Operation } from './Operation';\r\nimport { IEnvOption } from './IEnvOption';\r\nimport { Express } from './utils/Express';\r\nimport { Mode } from './Mode';\r\nimport { ITaskDecorator } from './ITaskDecorator';\r\nimport { ITaskDefine } from './ITaskDefine';\r\nimport { IDynamicTaskOption } from './IDynamicTaskOption';\r\nimport { RunWay } from './RunWay';\r\nimport { NodeSequence } from './NodeSequence';\r\nimport { IAssertDist } from './IAssertDist';\r\nconst globby = require('globby');\r\n\r\n/**\r\n *binding Config, create task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    return createContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *create Task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig | IAssertOption} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function createContext(cfg: ITaskConfig | IAssertOption, parent?: ITaskContext): ITaskContext {\r\n    let opt: ITaskConfig = (cfg && cfg['option']) ? (cfg as ITaskConfig) : ({ option: cfg } as ITaskConfig);\r\n    if (opt.createContext) {\r\n        return opt.createContext(cfg, parent);\r\n    }\r\n    return parent ? parent.add(opt) : new TaskContext(opt);\r\n}\r\n\r\nconst NULLBuilder = <Builder>{\r\n    build<T extends IAsserts>(node: ITaskContext, option?: T): ITaskContext {\r\n        return node;\r\n    },\r\n\r\n    // buildChildren<T extends IAsserts>(node: ITaskContext, option?: T): ITaskContext {\r\n    //     return node;\r\n    // },\r\n\r\n    isBuilt(node: ITaskContext): boolean {\r\n        return false;\r\n    }\r\n\r\n    // clean(node: ITaskContext) {\r\n\r\n    // }\r\n}\r\n/**\r\n *global data.\r\n */\r\nlet globals = {};\r\n\r\n/**\r\n *TaskContext\r\n *\r\n *@export\r\n *@class TaskContext\r\n *@implements {ITaskContext}\r\n */\r\nexport class TaskContext implements ITaskContext {\r\n    protected cfg: ITaskConfig;\r\n    protected taskseq: ITask[] = [];\r\n\r\n    protected sequence: Src[] = [];\r\n    protected children: ITaskContext[] = [];\r\n\r\n    oper: Operation;\r\n    option: IAsserts;\r\n    env: IEnvOption;\r\n    globals: any;\r\n    parent: ITaskContext;\r\n\r\n    constructor(cfg: ITaskConfig) {\r\n        cfg = cfg || {};\r\n        cfg.env = cfg.env || this.createEnv();\r\n        this.setConfig(cfg);\r\n    }\r\n\r\n    private _gulp: Gulp;\r\n    get gulp() {\r\n        return this._gulp || gulp;\r\n    }\r\n    set gulp(gulp: Gulp) {\r\n        this._gulp = gulp;\r\n    }\r\n\r\n    protected _builder: Builder;\r\n    get builder(): Builder {\r\n        return this._builder || NULLBuilder;\r\n    }\r\n\r\n    set builder(builder: Builder) {\r\n        this._builder = builder;\r\n    }\r\n\r\n    protected createEnv(): IEnvOption {\r\n        let env: IEnvOption = minimist(process.argv.slice(2), {\r\n            string: 'env',\r\n            default: { env: process.env.NODE_ENV || 'development' }\r\n        }) as IEnvOption;\r\n        return env;\r\n    }\r\n\r\n    protected setEnvViaOperate(oper: Operation) {\r\n        this.env = this.env || {};\r\n        if ((oper & Operation.deploy) > 0) {\r\n            this.env.deploy = true;\r\n            this.env.release = undefined;\r\n        } else if ((oper & Operation.release) > 0) {\r\n            this.env.release = true;\r\n            this.env.deploy = undefined;\r\n            oper = Operation.release;\r\n        }\r\n\r\n        if ((oper & Operation.watch) > 0) {\r\n            this.env.watch = true;\r\n        }\r\n\r\n        if ((oper & Operation.test) > 0) {\r\n            this.env.test = true;\r\n        }\r\n\r\n        if ((oper & Operation.serve) > 0) {\r\n            this.env.serve = true;\r\n        }\r\n\r\n        if ((oper & Operation.e2e) > 0) {\r\n            this.env.e2e = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *load config\r\n     *\r\n     *@param {ITaskConfig} cfg\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    setConfig(cfg: ITaskConfig) {\r\n        if (!cfg) {\r\n            return;\r\n        }\r\n        if (cfg.env) {\r\n            this.env = cfg.env = _.extend({}, this.env || {}, cfg.env);\r\n            this.oper = currentOperation(this.env);\r\n        }\r\n        // make sure root.\r\n        if (!this.env.root) {\r\n            this.env.root = this.getRootPath();\r\n        }\r\n        if (cfg.oper) {\r\n            this.oper = this.to(cfg.oper);\r\n            this.setEnvViaOperate(this.oper);\r\n        }\r\n        this.globals = cfg.globals || globals;\r\n        if (cfg.option) {\r\n            this.option = cfg.option = _.extend({}, this.option || {}, cfg.option);\r\n        }\r\n        this.cfg = _.extend(this.cfg, cfg);\r\n    }\r\n\r\n    /**\r\n     *get config.\r\n     *\r\n     *@returns {ITaskConfig}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    getConfig(): ITaskConfig {\r\n        return this.cfg || {};\r\n    }\r\n\r\n    protected isConfig(obj: any): boolean {\r\n        return obj && obj['option'];\r\n    }\r\n\r\n    /**\r\n     * add sub ITaskContext\r\n     *\r\n     * @param {(ITaskContext | ITaskConfig | IAssertOption)} context\r\n     * @returns {ITaskContext} sub context.\r\n     * @memberof TaskContext\r\n     */\r\n    add(context: ITaskContext | ITaskConfig | IAssertOption): ITaskContext {\r\n        let ctx: ITaskContext;\r\n        let curcfg: ITaskConfig = _.omit(this.getConfig(), 'option');\r\n        if (context instanceof TaskContext) {\r\n            ctx = context;\r\n            if (ctx.parent) {\r\n                ctx.parent.remove(ctx);\r\n            }\r\n            ctx.setConfig(_.extend({}, curcfg, ctx.getConfig()));\r\n        } else {\r\n            let opt: ITaskConfig = (this.isConfig(context) ? context : { option: context }) as ITaskConfig;\r\n            opt = _.extend({}, curcfg, opt);\r\n            ctx = this.createContext(opt);\r\n        }\r\n        ctx.parent = this;\r\n        this.children.push(ctx);\r\n        // if (!ctx.builder.isBuilt(ctx)) {\r\n        //     ctx.builder.build(ctx);\r\n        // }\r\n        return ctx;\r\n    }\r\n\r\n    /**\r\n     * create context.\r\n     *\r\n     * @protected\r\n     * @param {(ITaskConfig)} cfg\r\n     * @returns {ITaskContext}\r\n     * @memberof TaskContext\r\n     */\r\n    protected createContext(cfg: ITaskConfig): ITaskContext {\r\n        return new TaskContext(cfg)\r\n    }\r\n\r\n    /**\r\n     *remove sub ITaskContext.\r\n     *\r\n     *@param {ITaskContext} [context]\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    remove(context?: ITaskContext): ITaskContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * is task class.\r\n     *\r\n     * @param {any} obj\r\n     * @returns {boolean}\r\n     * @memberof TaskContext\r\n     */\r\n    isTask(obj: any): boolean {\r\n        if (!obj) {\r\n            return false;\r\n        }\r\n        if (!_.isFunction(obj)) {\r\n            return false;\r\n        }\r\n        return obj['__task'] || obj['__dynamictask']\r\n    }\r\n\r\n\r\n    /**\r\n     *find sub context via express.\r\n     *\r\n     *@template T\r\n     *@param {(T | Express<T, boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {T}\r\n     *@memberof TaskContext\r\n     */\r\n    find<T extends ITaskContext>(express: T | Express<T, boolean>, mode?: Mode): T {\r\n        let context: ITaskContext;\r\n        this.each<T>(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<ITaskContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context as T;\r\n    }\r\n\r\n    /**\r\n     *filter items.\r\n     *\r\n     *@template T\r\n     *@param {(Express<T, void | boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {ITaskContext[]}\r\n     *@memberof TaskContext\r\n     */\r\n    filter<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode): T[] {\r\n        let contexts: ITaskContext[] = [];\r\n        this.each<T>(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts as T[];\r\n    }\r\n    /**\r\n     *find parent context via express.\r\n     *\r\n     *@param {(ITaskContext | Express<ITaskContext, boolean>)} express\r\n     *@param {Mode} [mode] {enum:['route','children', traverse']} default traverse.\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    each<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode) {\r\n        mode = mode || Mode.traverse;\r\n        let r;\r\n        switch (mode) {\r\n            case Mode.route:\r\n                r = this.route(express);\r\n                break;\r\n            case Mode.children:\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case Mode.traverse:\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * map context.\r\n     *\r\n     *@template T\r\n     *@param {Express<ITaskContext, T>} express\r\n     *@param {Mode} [mode]\r\n     *@param {Express<ITaskContext, boolean>} [filter]\r\n     *@returns {T[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    map<T>(express: Express<ITaskContext, T>, mode?: Mode, filter?: Express<ITaskContext, boolean>): T[] {\r\n        let arr: T[] = []\r\n        this.each((ctx) => {\r\n            if (filter) {\r\n                if (filter(ctx)) {\r\n                    arr.push(express(ctx));\r\n                }\r\n            } else {\r\n                arr.push(express(ctx));\r\n            }\r\n        }, mode);\r\n        return arr;\r\n    }\r\n\r\n    eachChildren(express: Express<ITaskContext, void | boolean>) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *do express work in routing.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    route(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent.route) {\r\n            return this.parent.route(express);\r\n        }\r\n    }\r\n    /**\r\n     *translate all sub context to do express work.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    trans(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean {\r\n        if (this.option.match) {\r\n            return this.option.match(task, match);\r\n        }\r\n        return matchCompare(this, task, match);\r\n    }\r\n\r\n    getSrc(task?: ITaskInfo, relative = false): Src {\r\n        let src: Src;\r\n        let ctx = this;\r\n        let oper = this.to<Operation>(task ? (task.oper || ctx.oper) : ctx.oper);\r\n        if (task && task.assert) {\r\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx)\r\n        }\r\n\r\n        if (!src) {\r\n            this.route(c => {\r\n                src = taskSourceVal(getAssertSrc(c.option, oper), c);\r\n                if (src) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return (relative !== false) ? src : absoluteSrc(ctx.env.root, src);\r\n    }\r\n\r\n    getDist(task?: ITaskInfo, relative = false): string {\r\n        let dist: string;\r\n        let ctx = this;\r\n        // let oper = task ? (task.oper || context.oper) : context.oper;\r\n        if (task && task.assert) {\r\n            dist = getCurrentDist(task.assert, ctx);\r\n        }\r\n        if (!dist) {\r\n            this.route(c => {\r\n                dist = getCurrentDist(c.option, c);\r\n                if (dist) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        return (relative !== false) ? dist : absolutePath(ctx.env.root, dist);\r\n    }\r\n\r\n    subTaskName(task: TaskString | ITaskInfo, ext?: string) {\r\n        return this.taskName(task, ext);\r\n    }\r\n\r\n    taskName(task: TaskString | ITaskInfo, ext = ''): string {\r\n        let ctx = this;\r\n        let name = '';\r\n        let names = _.filter(this.map(c => {\r\n            return c.toStr(c.option.name);\r\n        }, Mode.route), t => !!t).reverse();\r\n\r\n        if (_.isString(task) || _.isFunction(task)) {\r\n            name = this.toStr(task);\r\n        } else if (task && task !== ctx.option) {\r\n            // oper = task.oper || context.oper;\r\n            let tinf = task as ITaskInfo;\r\n            if (task.name) {\r\n                name = taskStringVal(task.name, ctx)\r\n            }\r\n            if (!name && task.assert && task.assert.name) {\r\n                name = taskStringVal(task.assert.name, ctx)\r\n            }\r\n        }\r\n        if (!name) {\r\n            name = ctx.toStr(ctx.option.defaultTaskName);\r\n        }\r\n\r\n        if (name) {\r\n            names.push(name);\r\n        }\r\n        if (ext) {\r\n            names.push(ext);\r\n        }\r\n\r\n        // console.log('taskName:----------------------\\n', names);\r\n\r\n        return names.join('-');\r\n    }\r\n\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n        let envmatch: ITaskDecorator = {};\r\n        if (this.env.group) {\r\n            envmatch.group = this.env.group;\r\n        }\r\n        if (this.oper) {\r\n            envmatch.oper = this.oper;\r\n        }\r\n\r\n        return findTasksInModule(module, _.extend(envmatch, match || {}), this);\r\n    }\r\n\r\n    findTasksInDir(dirs: TaskSource, match?: ITaskInfo): Promise<ITask[]> {\r\n        let envmatch: ITaskDecorator = {};\r\n        if (this.env.group) {\r\n            envmatch.group = this.env.group;\r\n        }\r\n        if (this.oper) {\r\n            envmatch.oper = this.oper;\r\n        }\r\n        return findTasksInDir(this.to(dirs), _.extend(envmatch, match || {}), this);\r\n    }\r\n\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine> {\r\n        return findTaskDefineInModule(module);\r\n    }\r\n\r\n    findTaskDefineInDir(dirs: TaskSource): Promise<ITaskDefine> {\r\n        return findTaskDefineInDir(this.to(dirs));\r\n    }\r\n\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n        return files(express, filter, mapping);\r\n    }\r\n\r\n\r\n    /**\r\n     *to Sequence.\r\n     *\r\n     *@param {ITask[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    toSequence(tasks: ITask[], zipName?: ZipTaskName): Src[] {\r\n        return toSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *filter file in directory.  default implement in bindingConfig.\r\n     *\r\n     *@param {Gulp} gulp\r\n     *@param {Src[]} tasks\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    runSequence(tasks: Src[]): Promise<any> {\r\n        return runSequence(this.gulp, tasks);\r\n    }\r\n\r\n    /**\r\n     *run task sequence in this context.\r\n     *\r\n     *@param {(ITask[] | Promise<ITask[]>)} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    runTaskSequence(tasks: ITask[] | Promise<ITask[]>, zipName?: ZipTaskName): Promise<any> {\r\n        return runTaskSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *zip task sequence.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    zipSequence(tasks: Src[], zipName?: ZipTaskName): string {\r\n        return zipSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *flattenSequence in this context.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string[]}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    flattenSequence(tasks: Src[], zipName?: ZipTaskName): string[] {\r\n        return flattenSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n\r\n    /**\r\n     *dynamic generate tasks.  default implement in bindingConfig.\r\n     *\r\n     *@param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     *@param {ITaskInfo} [match]\r\n     *@returns {ITask[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n        let ctx = this;\r\n        let gtask = generateTask(this, tasks, _.extend({ oper: ctx.oper }, match || {}));\r\n        this.taskseq = this.taskseq.concat(gtask);\r\n        return this.taskseq;\r\n    }\r\n\r\n    /**\r\n     *add task result to task sequence. default implement in bindingConfig.\r\n     *\r\n     *@param {Src[]} sequence  task sequence.\r\n     *@param {ITaskInfo} task\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[] {\r\n        if (this.cfg.addToSequence) {\r\n            return this.cfg.addToSequence(sequence, task);\r\n        }\r\n        return addToSequence(sequence, task, this);\r\n    }\r\n\r\n    getRootPath() {\r\n        let root: string;\r\n        if (this.env && this.env.root) {\r\n            root = this.env.root\r\n        } else {\r\n            this.each(c => {\r\n                if (c.env && c.env.root) {\r\n                    root = this.env.root;\r\n                    return false;\r\n                }\r\n                return true;\r\n            }, Mode.route);\r\n        }\r\n        return root;\r\n    }\r\n\r\n    getRootFolders(express?: folderCallback): string[] {\r\n        return this.getFolders(this.getRootPath(), express);\r\n    }\r\n\r\n    getFolders(pathstr: string, express?: folderCallback): string[] {\r\n        let dir = fs.readdirSync(pathstr);\r\n        let folders = [];\r\n        _.each(dir, (d: string) => {\r\n            let sf = path.join(pathstr, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                if (express) {\r\n                    let fl = express(sf, d, this);\r\n                    if (fl) {\r\n                        folders.push(fl);\r\n                    }\r\n                } else {\r\n                    folders.push(sf);\r\n                }\r\n            }\r\n        });\r\n        return folders;\r\n    }\r\n\r\n    getDistFolders(express?: folderCallback, task?: ITaskInfo): string[] {\r\n        return this.getFolders(this.getDist(task), express);\r\n    }\r\n\r\n    toRootSrc(src: Src): Src {\r\n        return absoluteSrc(this.getRootPath(), src);\r\n    }\r\n\r\n    toRootPath(pathstr: string): string {\r\n        return absolutePath(this.getRootPath(), pathstr);\r\n    }\r\n\r\n    toDistSrc(src: Src, task?: ITaskInfo): Src {\r\n        return absoluteSrc(this.getDist(task), src);\r\n    }\r\n\r\n    toDistPath(pathstr: string, task?: ITaskInfo): string {\r\n        return absolutePath(this.getDist(task), pathstr);\r\n    }\r\n\r\n    to<T>(val: CtxType<T>): T {\r\n        return _.isFunction(val) ? val(this) : val;\r\n    }\r\n\r\n    toSrc(source: TaskSource): Src {\r\n        return taskSourceVal(source, this);\r\n    }\r\n\r\n    toStr(name: TaskString): string {\r\n        return taskStringVal(name, this);\r\n    }\r\n\r\n    toUrl(basePath: string, toPath?: string): string {\r\n        return (toPath ? path.relative(basePath, toPath) : basePath).replace(/\\\\/g, '/'); // .replace(/^\\//g, '');\r\n    }\r\n\r\n    private packages = {};\r\n    getPackage(filename?: TaskString): any {\r\n        filename = filename || this.cfg.packageFile;\r\n        let name = this.toRootPath(this.toStr(filename) || 'package.json');\r\n        if (!this.packages[name]) {\r\n            this.packages[name] = require(name);\r\n        }\r\n        return this.packages[name]\r\n    }\r\n\r\n    protected setupChildren(): Promise<ITaskContext[]> {\r\n        return Promise.all(this.map(ctx => {\r\n            return ctx.setup()\r\n                .then(seq => {\r\n                    return ctx;\r\n                });\r\n        }, Mode.children))\r\n    }\r\n\r\n    setup(): Promise<Src[]> {\r\n        if (this.option.oper && (this.oper & this.to(this.option.oper)) <= 0) {\r\n            // this.sequence = null;\r\n            return Promise.resolve(null);\r\n        } else {\r\n            return Promise.resolve(this.load())\r\n                .then(tasks => {\r\n                    return this.setupChildren()\r\n                        .then(subtasks => {\r\n                            return {\r\n                                tseq: tasks,\r\n                                subtasks: subtasks\r\n                            }\r\n                        })\r\n\r\n                })\r\n                .then(srcs => {\r\n                    let opt = this.option as IAsserts;\r\n                    let tseq = srcs.tseq;\r\n                    let ordertask = sortOrder(srcs.subtasks, ctx => ctx.option.order, this);\r\n\r\n                    let subseq: Src[] = [];\r\n                    _.each(ordertask, (t, idx) => {\r\n                        if (_.isArray(t)) {\r\n                            if (t.length > 0) {\r\n                                let ptasks = _.filter(_.map(t, it => this.zipSequence(<Src[]>it.getRunSequence())), it => !!it);\r\n                                if (ptasks.length > 0) {\r\n                                    subseq.push(ptasks);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let tk = this.zipSequence(t.getRunSequence());\r\n                            tk && subseq.push(tk);\r\n                        }\r\n                    });\r\n\r\n                    // let children = this.zipSequence(subseq, (name, runway) => this.subTaskName(name, (runway === RunWay.sequence ? '-sub-seq' : '-sub-paral')));\r\n                    subseq = this.flattenSequence(subseq);\r\n                    tseq = this.flattenSequence(tseq);\r\n                    if (tseq.length > 0) {\r\n                        tseq = opt.runWay === RunWay.parallel ? [this.flattenSequence(tseq)] : this.flattenSequence(tseq);\r\n                        if (subseq && subseq.length > 0) {\r\n                            if (opt.nodeSequence === NodeSequence.after) {\r\n                                tseq.splice(0, 0, ...subseq);\r\n                            } else {\r\n                                tseq.push(...subseq);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        tseq = subseq;\r\n                    }\r\n\r\n                    this.sequence = tseq;\r\n                    return this.sequence;\r\n                });\r\n        }\r\n    }\r\n\r\n    getRunSequence(): Src[] {\r\n        return this.sequence || [];\r\n    }\r\n\r\n    load(): Src[] | Promise<Src[]> {\r\n        if (!this.builder.isBuilt(this)) {\r\n            return Promise.resolve(this.builder.build(this))\r\n                .then(ctx => {\r\n                    return this.toSequence(this.taskseq);\r\n                });\r\n        } else {\r\n            return this.toSequence(this.taskseq);\r\n        }\r\n    }\r\n\r\n    addTask(...task: ITask[]) {\r\n        this.taskseq.push(...task);\r\n    }\r\n\r\n    removeTask(task: ITask): ITask[] | Promise<ITask[]> {\r\n        let idx = this.taskseq.indexOf(task);\r\n        if (idx >= 0 && idx < this.taskseq.length) {\r\n            return this.taskseq.splice(idx, 1);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     *run task in this context.\r\n     *\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    run(): Promise<any> {\r\n        if (this.env.help) {\r\n            return Promise.resolve(this.help())\r\n        } else {\r\n            // if (!this.builder.isBuilt(this)) {\r\n            //     this.builder.build(this);\r\n            // }\r\n            return this.setup()\r\n                .then(tseq => {\r\n                    let opt = this.option as IAsserts;\r\n                    if (opt.runWay === RunWay.parallel) {\r\n                        return this.runSequence([this.flattenSequence(tseq)]);\r\n                    } else {\r\n                        return this.runSequence(tseq);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * just run task. not register on global tasks.\r\n     * @param tasks\r\n     * @param match\r\n     */\r\n    runDynamic(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): Promise<any> {\r\n        let gtask = sortOrder(generateTask(this, tasks, _.extend({ oper: this.oper }, match || {})), t => t.getInfo().order, this);\r\n        let ps = Promise.resolve();\r\n        _.each(gtask, (t: ITask | ITask[]) => {\r\n            ps = ps.then(() => {\r\n                if (_.isArray(t)) {\r\n                    return Promise.all(_.map(t, st => {\r\n                        return st.execute ? st.execute(this, this.gulp || gulp) : null;\r\n                    }));\r\n                } else {\r\n                    return t.execute ? t.execute(this, this.gulp || gulp) : null;\r\n                }\r\n            });\r\n        });\r\n        return ps;\r\n    }\r\n\r\n    execShell(cmd: string, options?: ExecOptions, allowError = true): Promise<any> {\r\n        if (!cmd) {\r\n            return Promise.resolve();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            console.log('execute shell:', chalk.cyan(cmd));\r\n            let shell = exec(cmd, options, (err, stdout, stderr) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve(stdout);\r\n                }\r\n            });\r\n\r\n            shell.stdout.on('data', data => {\r\n                console.log(data);\r\n            });\r\n\r\n            shell.stderr.on('data', err => {\r\n                console.log(err);\r\n                if (!allowError) {\r\n                    reject(err);\r\n                }\r\n            });\r\n\r\n            shell.on('exit', (code) => {\r\n                console.log(`exit child process with code：${code}`);\r\n                if (code > 0) {\r\n                    reject(code);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    execFile(file: string, args?: string[], options?: ExecFileOptions, allowError = true): Promise<any> {\r\n        if (!file && !fs.existsSync(file)) {\r\n            console.log('file:', chalk.yellow(file), 'no exists.');\r\n            return Promise.resolve();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            console.log('execute shell:', chalk.cyan(file));\r\n            let proc = execFile(file, args, options, (err, stdout, stderr) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve(stdout);\r\n                }\r\n            });\r\n\r\n            proc.stdout.on('data', data => {\r\n                console.log(data);\r\n            });\r\n\r\n            proc.stderr.on('data', data => {\r\n                console.log(data);\r\n                if (!allowError) {\r\n                    reject(data);\r\n                }\r\n            });\r\n\r\n            proc.on('exit', (code) => {\r\n                console.log(`exit child process with code：${code}`);\r\n                if (code > 0) {\r\n                    reject(code);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    help() {\r\n        this.cfg.printHelp && this.cfg.printHelp(_.isBoolean(this.env.help) ? '' : this.env.help);\r\n    }\r\n\r\n    tasks(express?: (item: ITask) => boolean): ITask[] {\r\n        return express ? _.filter(this.taskseq, express) : this.taskseq;\r\n    }\r\n\r\n    registerTasks(express?: (item: ITask) => boolean): ITask[] {\r\n        let tasks = [];\r\n        this.each(c => {\r\n            tasks = tasks.concat(c.tasks(express));\r\n        });\r\n        return tasks;\r\n    }\r\n\r\n    globalTasks(): string[] {\r\n        return _.keys(this.globals.tasks || {});\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *get current env Operation.\r\n *\r\n *@export\r\n *@param {EnvOption} env\r\n *@returns\r\n */\r\nfunction currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy | Operation.release;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n/**\r\n *get assert source.\r\n *\r\n *@param {IAssertDist} assert\r\n *@param {Operation} oper\r\n *@returns\r\n */\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n *get dist.\r\n *\r\n *@param {IAssertDist} ds\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, ctx: ITaskContext) {\r\n    let dist: string;\r\n    let env = ctx.env;\r\n    let oper = ctx.oper;\r\n    if (env.deploy || (oper & Operation.deploy) > 0) {\r\n        dist = taskStringVal(ds.deployDist, ctx);\r\n    }\r\n    if (!dist && (env.release || (oper & Operation.release) > 0)) {\r\n        dist = taskStringVal(ds.releaseDist, ctx);\r\n    }\r\n    if (!dist && (env.e2e || (oper & Operation.e2e) > 0)) {\r\n        dist = taskStringVal(ds.e2eDist, ctx);\r\n    }\r\n    if (!dist && (env.test || (oper & Operation.test) > 0)) {\r\n        dist = taskStringVal(ds.testDist, ctx);\r\n    }\r\n    if (!dist && ((oper & Operation.build) > 0)) {\r\n        dist = taskStringVal(ds.buildDist, ctx);\r\n    }\r\n    if (!dist) {\r\n        dist = taskStringVal(ds.dist, ctx);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n\r\n/**\r\n *filter fileName in directory.\r\n *\r\n *@export\r\n *@param {string} directory\r\n *@param {((fileName: string) => boolean)} [express]\r\n *@returns {string[]}\r\n */\r\nfunction files(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n    return Promise.resolve(globby(express))\r\n        .then((files: string[]) => {\r\n            if (filter) {\r\n                files = _.filter(files, filter)\r\n            }\r\n            if (mapping) {\r\n                files = _.map(files, mapping);\r\n            }\r\n            return files;\r\n        })\r\n}\r\n\r\n/**\r\n *task src, string or array string.\r\n *\r\n *@export\r\n *@param {TaskSource} src\r\n *@param {Operation} oper runtime Operation\r\n *@param {IEnvOption} [env]\r\n *@returns\r\n */\r\nfunction taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n *task string.\r\n *\r\n *@export\r\n *@param {TaskString} name\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n"]}