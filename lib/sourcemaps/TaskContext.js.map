{"version":3,"sources":["TaskContext.ts"],"names":["bindingConfig","cfg","parent","createContext","TaskContext","currentOperation","env","oper","deploy","TaskConfig_1","Operation","release","build","watch","test","serve","e2e","getAssertSrc","assert","src","testSrc","e2eSrc","watchSrc","clean","cleanSrc","dist","getCurrentDist","ds","ctx","taskStringVal","deployDist","releaseDist","e2eDist","testDist","buildDist","files","express","filter","mapping","Promise","resolve","globby","then","_","map","taskSourceVal","isFunction","name","require","gulp","generateTask_1","taskSequence_1","utils_1","decorator_1","path","fs","exports","globals","this","taskSequece","children","packages","setConfig","Object","defineProperty","prototype","_gulp","extend","option","getConfig","add","context","push","remove","items","each","i","find","mode","item","isFinded","contexts","Mode","traverse","r","route","eachChildren","trans","arr","matchCompare","task","match","getSrc","relative","c","absoluteSrc","root","getDist","absolutePath","subTaskName","ext","isString","optName","indexOf","findTasks","module","findTasksInModule","findTasksInDir","dirs","to","findTaskDefine","findTaskDefineInModule","findTaskDefineInDir","fileFilter","toSequence","tasks","zipName","runSequence","runTaskSequence","zipSequence","flattenSequence","generateTask","gtask","concat","addToSequence","sequence","getRootPath","getRootFolders","getFolders","pathstr","_this","dir","readdirSync","folders","d","sf","join","f","lstatSync","isDirectory","fl","getDistFolders","toRootSrc","toRootPath","toDistSrc","toDistPath","setting","toSrc","source","toStr","toUrl","basePath","toPath","replace","getPackage","filename","packageFile","setup","addTask","run","help","tseq","opt","runWay","RunWay","parallel","printHelp","isBoolean","registerTasks","globalTasks","keys"],"mappings":"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","file":"../TaskContext.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport * as gulp from 'gulp';\r\nimport {\r\n    ITask, TaskResult, IAssertDist, IEnvOption, Operation, ITaskContext, ITaskDefine, IDynamicTaskOption\r\n    , RunWay, ZipTaskName, Express, Mode, ITaskConfig, ITaskInfo, Src, TaskSource, IAsserts, TaskString, folderCallback\r\n} from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { toSequence, runSequence, addToSequence, zipSequence, flattenSequence, runTaskSequence } from './taskSequence';\r\nimport { matchCompare, absoluteSrc, absolutePath } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './decorator';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nconst globby = require('globby');\r\n\r\n/**\r\n * binding Config, create task context.\r\n *\r\n * @export\r\n * @param {ITaskConfig} cfg\r\n * @param {ITaskContext} [parent]\r\n * @returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    return createContext(cfg, parent);\r\n}\r\n\r\n/**\r\n * create Task context.\r\n * \r\n * @export\r\n * @param {ITaskConfig} cfg\r\n * @param {ITaskContext} [parent]\r\n * @returns {ITaskContext}\r\n */\r\nexport function createContext(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    if (cfg.createContext) {\r\n        return cfg.createContext(cfg, parent);\r\n    }\r\n    return new TaskContext(cfg, parent);\r\n}\r\n\r\n/**\r\n * global data.\r\n */\r\nlet globals = {};\r\n\r\n/**\r\n * TaskContext\r\n *\r\n * @export\r\n * @class TaskContext\r\n * @implements {ITaskContext}\r\n */\r\nexport class TaskContext implements ITaskContext {\r\n    protected cfg: ITaskConfig;\r\n    protected taskSequece: ITask[] = [];\r\n    protected children: ITaskContext[] = [];\r\n\r\n    oper: Operation;\r\n    option: IAsserts;\r\n    env: IEnvOption;\r\n    globals: any;\r\n\r\n    constructor(cfg: ITaskConfig, public parent?: ITaskContext) {\r\n        this.cfg = {};\r\n        this.setConfig(cfg);\r\n    }\r\n\r\n    private _gulp: Gulp;\r\n    get gulp() {\r\n        return this._gulp || gulp;\r\n    }\r\n    set gulp(gulp: Gulp) {\r\n        this._gulp = gulp;\r\n    }\r\n\r\n    /**\r\n     * load config\r\n     * \r\n     * @param {ITaskConfig} cfg\r\n     * \r\n     * @memberof TaskContext\r\n     */\r\n    setConfig(cfg: ITaskConfig) {\r\n        this.env = _.extend(cfg.env, this.env || {});\r\n        this.oper = cfg.oper || currentOperation(cfg.env);\r\n        this.globals = cfg.globals || globals;\r\n        this.option = _.extend(cfg.option, this.option || {});\r\n        this.cfg = _.extend(cfg, this.cfg);\r\n    }\r\n\r\n    /**\r\n     * get config.\r\n     * \r\n     * @returns {ITaskConfig}\r\n     * \r\n     * @memberof TaskContext\r\n     */\r\n    getConfig(): ITaskConfig {\r\n        return this.cfg;\r\n    }\r\n\r\n    /**\r\n     * add sub ITaskContext\r\n     *\r\n     * @param {ITaskContext} context\r\n     *\r\n     * @memberOf ITaskContext\r\n     */\r\n    add(context: ITaskContext): void {\r\n        context.parent = this;\r\n        this.children.push(context);\r\n    }\r\n    /**\r\n     * remove sub ITaskContext.\r\n     *\r\n     * @param {ITaskContext} [context]\r\n     *\r\n     * @memberOf ITaskContext\r\n     */\r\n    remove(context?: ITaskContext): ITaskContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n\r\n    /**\r\n     * find sub context via express.\r\n     * \r\n     * @template T \r\n     * @param {(T | Express<T, boolean>)} express \r\n     * @param {Mode} [mode] \r\n     * @returns {T} \r\n     * @memberof TaskContext\r\n     */\r\n    find<T extends ITaskContext>(express: T | Express<T, boolean>, mode?: Mode): T {\r\n        let context: ITaskContext;\r\n        this.each<T>(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<ITaskContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context as T;\r\n    }\r\n\r\n    /**\r\n     * filter items.\r\n     *\r\n     * @template T\r\n     * @param {(Express<T, void | boolean>)} express\r\n     * @param {Mode} [mode]\r\n     * @returns {ITaskContext[]}\r\n     * @memberof TaskContext\r\n     */\r\n    filter<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode): ITaskContext[] {\r\n        let contexts: ITaskContext[] = [];\r\n        this.each<T>(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts;\r\n    }\r\n    /**\r\n     * find parent context via express.\r\n     *\r\n     * @param {(ITaskContext | Express<ITaskContext, boolean>)} express\r\n     * @param {Mode} [mode] {enum:['route','children', traverse']} default traverse.\r\n     *\r\n     * @memberOf ITaskContext\r\n     */\r\n    each<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode) {\r\n        mode = mode || Mode.traverse;\r\n        let r;\r\n        switch (mode) {\r\n            case Mode.route:\r\n                r = this.route(express);\r\n                break;\r\n            case Mode.children:\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case Mode.traverse:\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     *map context.\r\n     * \r\n     * @template T \r\n     * @param {Express<ITaskContext, T>} express \r\n     * @param {Mode} [mode] \r\n     * @param {Express<ITaskContext, boolean>} [filter] \r\n     * @returns {T[]} \r\n     * \r\n     * @memberof TaskContext\r\n     */\r\n    map<T>(express: Express<ITaskContext, T>, mode?: Mode, filter?: Express<ITaskContext, boolean>): T[] {\r\n        let arr: T[] = []\r\n        this.each((ctx) => {\r\n            if (filter) {\r\n                if (filter(ctx)) {\r\n                    arr.push(express(ctx));\r\n                }\r\n            } else {\r\n                arr.push(express(ctx));\r\n            }\r\n        }, mode);\r\n        return arr;\r\n    }\r\n\r\n    eachChildren(express: Express<ITaskContext, void | boolean>) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * do express work in routing.\r\n     *\r\n     * @param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     * @memberOf ITaskContext\r\n     */\r\n    route(express: Express<ITaskContext, void | boolean>) {\r\n        if (!express(this)) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent.route) {\r\n            return this.parent.route(express);\r\n        }\r\n    }\r\n    /**\r\n     * translate all sub context to do express work.\r\n     *\r\n     * @param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     * @memberOf ITaskContext\r\n     */\r\n    trans(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean {\r\n        if (this.option.match) {\r\n            return this.option.match(task, match);\r\n        }\r\n        return matchCompare(task, match);\r\n    }\r\n\r\n    getSrc(task?: ITaskInfo, relative = false): Src {\r\n        let src: Src;\r\n        let ctx = this;\r\n        let oper = task ? (task.oper || ctx.oper) : ctx.oper;\r\n        if (task && task.assert) {\r\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx)\r\n        }\r\n\r\n        if (!src) {\r\n            this.route(c => {\r\n                src = taskSourceVal(getAssertSrc(c.option, oper), c);\r\n                if (src) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return (relative !== false) ? src : absoluteSrc(ctx.env.root, src);\r\n    }\r\n\r\n    getDist(task?: ITaskInfo, relative = false): string {\r\n        let dist: string;\r\n        let ctx = this;\r\n        // let oper = task ? (task.oper || context.oper) : context.oper;\r\n        if (task && task.assert) {\r\n            dist = getCurrentDist(task.assert, ctx);\r\n        }\r\n        if (!dist) {\r\n            this.route(c => {\r\n                dist = getCurrentDist(c.option, c);\r\n                if (dist) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        return (relative !== false) ? dist : absolutePath(ctx.env.root, dist);\r\n    }\r\n\r\n    subTaskName(task, ext = '') {\r\n        let ctx = this;\r\n        let name = '';\r\n        // let oper = context.oper;\r\n        if (_.isString(task)) {\r\n            name = task;\r\n        } else if (task && task !== ctx.option) {\r\n            // oper = task.oper || context.oper;\r\n            if (task.name) {\r\n                name = taskStringVal(task.name, ctx)\r\n            }\r\n            if (!name && task.assert && task.assert.name) {\r\n                name = taskStringVal(task.assert.name, ctx)\r\n            }\r\n        }\r\n        let optName: string;\r\n        this.route(c => {\r\n            optName = taskStringVal(c.option.name, c);\r\n            if (optName) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })\r\n\r\n        if (optName) {\r\n            if (name.indexOf(optName + '-') === 0) {\r\n                return name;\r\n            }\r\n            // avoid soma name.\r\n            if (name && optName !== name) {\r\n                return `${optName}-${name}` + ext;\r\n            }\r\n            return optName + ext;\r\n        } else {\r\n            return name + ext;\r\n        }\r\n    }\r\n\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInModule(module, _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTasksInDir(dirs: TaskSource, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInDir(ctx.to(dirs), _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine> {\r\n        return findTaskDefineInModule(module);\r\n    }\r\n\r\n    findTaskDefineInDir(dirs: TaskSource): Promise<ITaskDefine> {\r\n        return findTaskDefineInDir(this.to(dirs));\r\n    }\r\n\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n        return files(express, filter, mapping);\r\n    }\r\n\r\n\r\n    /**\r\n     * to Sequence.\r\n     *\r\n     * @param {ITask[]} tasks\r\n     * @param {ZipTaskName} [zipName]\r\n     * @returns {Src[]}\r\n     *\r\n     * @memberof TaskContext\r\n     */\r\n    toSequence(tasks: ITask[], zipName?: ZipTaskName): Src[] {\r\n        return toSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     * \r\n     * @param {Gulp} gulp\r\n     * @param {Src[]} tasks\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    runSequence(tasks: Src[]): Promise<any> {\r\n        return runSequence(this.gulp, tasks);\r\n    }\r\n\r\n    /**\r\n     * run task sequence in this context.\r\n     * \r\n     * @param {(ITask[] | Promise<ITask[]>)} tasks\r\n     * @param {ZipTaskName} [zipName]\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberof TaskContext\r\n     */\r\n    runTaskSequence(tasks: ITask[] | Promise<ITask[]>, zipName?: ZipTaskName): Promise<any> {\r\n        return runTaskSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     * zip task sequence.\r\n     * \r\n     * @param {Src[]} tasks \r\n     * @param {ZipTaskName} [zipName] \r\n     * @returns {string} \r\n     * \r\n     * @memberof ITaskContext\r\n     */\r\n    zipSequence(tasks: Src[], zipName?: ZipTaskName): string {\r\n        return zipSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     * flattenSequence in this context.\r\n     * \r\n     * @param {Src[]} tasks\r\n     * @param {ZipTaskName} [zipName]\r\n     * @returns {string[]}\r\n     * \r\n     * @memberof ITaskContext\r\n     */\r\n    flattenSequence(tasks: Src[], zipName?: ZipTaskName): string[] {\r\n        return flattenSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n\r\n    /**\r\n     * dynamic generate tasks.  default implement in bindingConfig.\r\n     * \r\n     * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {ITask[]}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n        let ctx = this;\r\n        let gtask = generateTask(tasks, _.extend({ oper: ctx.oper }, match || {}), this);\r\n        this.taskSequece = this.taskSequece.concat(gtask);\r\n        return this.taskSequece;\r\n    }\r\n\r\n    /**\r\n     * add task result to task sequence. default implement in bindingConfig.\r\n     * \r\n     * @param {Src[]} sequence  task sequence.\r\n     * @param {ITaskInfo} task\r\n     * @returns {Src[]}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[] {\r\n        if (this.cfg.addToSequence) {\r\n            return this.cfg.addToSequence(sequence, task);\r\n        }\r\n        return addToSequence(sequence, task, this);\r\n    }\r\n\r\n    getRootPath() {\r\n        return this.env.root;\r\n    }\r\n\r\n    getRootFolders(express?: folderCallback): string[] {\r\n        return this.getFolders(this.getRootPath(), express);\r\n    }\r\n\r\n    getFolders(pathstr: string, express?: folderCallback): string[] {\r\n        let dir = fs.readdirSync(pathstr);\r\n        let folders = [];\r\n        _.each(dir, (d: string) => {\r\n            let sf = path.join(pathstr, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                if (express) {\r\n                    let fl = express(sf, d, this);\r\n                    if (fl) {\r\n                        folders.push(fl);\r\n                    }\r\n                } else {\r\n                    folders.push(sf);\r\n                }\r\n            }\r\n        });\r\n        return folders;\r\n    }\r\n\r\n    getDistFolders(express?: folderCallback, task?: ITaskInfo): string[] {\r\n        return this.getFolders(this.getDist(task), express);\r\n    }\r\n\r\n    toRootSrc(src: Src): Src {\r\n        return absoluteSrc(this.cfg.env.root, src);\r\n    }\r\n\r\n    toRootPath(pathstr: string): string {\r\n        return absolutePath(this.cfg.env.root, pathstr);\r\n    }\r\n\r\n    toDistSrc(src: Src, task?: ITaskInfo): Src {\r\n        return absoluteSrc(this.getDist(task), src);\r\n    }\r\n\r\n    toDistPath(pathstr: string, task?: ITaskInfo): string {\r\n        return absolutePath(this.getDist(task), pathstr);\r\n    }\r\n\r\n    to<T>(setting: T | ((ctx: ITaskContext) => T)): T {\r\n        return _.isFunction(setting) ? setting(this) : setting;\r\n    }\r\n\r\n    toSrc(source: TaskSource): Src {\r\n        return taskSourceVal(source, this);\r\n    }\r\n\r\n    toStr(name: TaskString): string {\r\n        return taskStringVal(name, this);\r\n    }\r\n\r\n    toUrl(basePath: string, toPath?: string): string {\r\n        return (toPath ? path.relative(basePath, toPath) : basePath).replace(/\\\\/g, '/'); // .replace(/^\\//g, '');\r\n    }\r\n\r\n    private packages = {};\r\n    getPackage(filename?: TaskString): any {\r\n        filename = filename || this.cfg.packageFile;\r\n        let name = this.toRootPath(this.toStr(filename) || 'package.json');\r\n        if (!this.packages[name]) {\r\n            this.packages[name] = require(name);\r\n        }\r\n        return this.packages[name]\r\n    }\r\n\r\n    setup(): Promise<Src[]> {\r\n        return null;\r\n    }\r\n\r\n    addTask(task: ITask) {\r\n        this.taskSequece.push(task);\r\n    }\r\n\r\n    /**\r\n     * run task in this context.\r\n     *\r\n     * @returns {Promise<any>}\r\n     *\r\n     * @memberof TaskContext\r\n     */\r\n    run(): Promise<any> {\r\n        if (this.env.help) {\r\n            return Promise.resolve(this.help())\r\n        } else {\r\n            return this.setup()\r\n                .then(tseq => {\r\n                    let opt = this.option as IAsserts;\r\n                    if (opt.runWay === RunWay.parallel) {\r\n                        return this.runSequence([this.flattenSequence(tseq)]);\r\n                    } else {\r\n                        return this.runSequence(tseq);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    help() {\r\n        this.cfg.printHelp && this.cfg.printHelp(_.isBoolean(this.env.help) ? '' : this.env.help);\r\n    }\r\n\r\n    tasks(express?: (item: ITask) => boolean): ITask[] {\r\n        return express ? _.filter(this.taskSequece, express) : this.taskSequece;\r\n    }\r\n\r\n    registerTasks(express?: (item: ITask) => boolean): ITask[] {\r\n        let tasks = [];\r\n        this.each(c => {\r\n            tasks = tasks.concat(c.tasks(express));\r\n        });\r\n        return tasks;\r\n    }\r\n\r\n    globalTasks(): string[] {\r\n        return _.keys(this.globals.tasks || {});\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * get current env Operation.\r\n *\r\n * @export\r\n * @param {EnvOption} env\r\n * @returns\r\n */\r\nfunction currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy | Operation.release;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n/**\r\n * get assert source.\r\n *\r\n * @param {IAssertDist} assert\r\n * @param {Operation} oper\r\n * @returns\r\n */\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n * get dist.\r\n *\r\n * @param {IAssertDist} ds\r\n * @param {ITaskContext} ctx\r\n * @returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, ctx: ITaskContext) {\r\n    let dist: string;\r\n    let env = ctx.env;\r\n    let oper = ctx.oper;\r\n    if (env.deploy || (oper & Operation.deploy) > 0) {\r\n        dist = taskStringVal(ds.deployDist, ctx);\r\n    }\r\n    if (!dist && (env.release || (oper & Operation.release) > 0)) {\r\n        dist = taskStringVal(ds.releaseDist, ctx);\r\n    }\r\n    if (!dist && (env.e2e || (oper & Operation.e2e) > 0)) {\r\n        dist = taskStringVal(ds.e2eDist, ctx);\r\n    }\r\n    if (!dist && (env.test || (oper & Operation.test) > 0)) {\r\n        dist = taskStringVal(ds.testDist, ctx);\r\n    }\r\n    if (!dist && ((oper & Operation.build) > 0)) {\r\n        dist = taskStringVal(ds.buildDist, ctx);\r\n    }\r\n    if (!dist) {\r\n        dist = taskStringVal(ds.dist, ctx);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n/**\r\n * filter fileName in directory.\r\n *\r\n * @export\r\n * @param {string} directory\r\n * @param {((fileName: string) => boolean)} [express]\r\n * @returns {string[]}\r\n */\r\nfunction files(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n    return Promise.resolve(globby(express))\r\n        .then((files: string[]) => {\r\n            if (filter) {\r\n                files = _.filter(files, filter)\r\n            }\r\n            if (mapping) {\r\n                files = _.map(files, mapping);\r\n            }\r\n            return files;\r\n        })\r\n}\r\n\r\n/**\r\n * task src, string or array string.\r\n *\r\n * @export\r\n * @param {TaskSource} src\r\n * @param {Operation} oper runtime Operation\r\n * @param {IEnvOption} [env]\r\n * @returns\r\n */\r\nfunction taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n * task string.\r\n *\r\n * @export\r\n * @param {TaskString} name\r\n * @param {ITaskContext} ctx\r\n * @returns\r\n */\r\nfunction taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n"]}