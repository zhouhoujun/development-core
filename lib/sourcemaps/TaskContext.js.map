{"version":3,"sources":["TaskContext.ts"],"names":["bindingConfig","cfg","parent","createContext","TaskContext","currentOperation","env","oper","deploy","TaskConfig_1","Operation","release","build","watch","test","serve","e2e","getAssertSrc","assert","src","testSrc","e2eSrc","watchSrc","clean","cleanSrc","dist","getCurrentDist","ds","ctx","taskStringVal","deployDist","releaseDist","e2eDist","testDist","buildDist","files","express","filter","mapping","Promise","resolve","globby","then","_","map","taskSourceVal","isFunction","name","require","gulp","generateTask_1","taskSequence_1","utils_1","findTasks_1","path","fs","exports","globals","this","taskseq","sequence","children","packages","setConfig","Object","defineProperty","prototype","_gulp","extend","option","getConfig","add","context","push","remove","items","each","i","find","mode","item","isFinded","contexts","Mode","traverse","r","route","eachChildren","trans","arr","matchCompare","task","match","getSrc","relative","c","absoluteSrc","root","getDist","absolutePath","subTaskName","ext","isString","optName","indexOf","findTasks","module","findTasksInModule","findTasksInDir","dirs","to","findTaskDefine","findTaskDefineInModule","findTaskDefineInDir","fileFilter","toSequence","tasks","zipName","runSequence","runTaskSequence","zipSequence","flattenSequence","generateTask","gtask","concat","addToSequence","getRootPath","getRootFolders","getFolders","pathstr","_this","dir","readdirSync","folders","d","sf","join","f","lstatSync","isDirectory","fl","getDistFolders","toRootSrc","toRootPath","toDistSrc","toDistPath","setting","toSrc","source","toStr","toUrl","basePath","toPath","replace","getPackage","filename","packageFile","setup","all","setupTasks","seq","srcs","opt","tseq","shift","ordertask","sortOrder","order","subseq","t","idx","isArray","it","getRunSequence","tk","runWay","RunWay","parallel","length","nodeSequence","NodeSequence","after","splice","apply","addTask","_i","arguments","_a","removeTask","run","help","printHelp","isBoolean","registerTasks","globalTasks","keys"],"mappings":"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","file":"../TaskContext.js","sourcesContent":["import *as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport *as gulp from 'gulp';\r\nimport {\r\n    ITask, IAssertDist, IEnvOption, Operation, ITaskContext, ITaskDefine, IDynamicTaskOption\r\n    , NodeSequence, RunWay, ZipTaskName, Express, Mode, ITaskConfig, ITaskInfo, Src, TaskSource, IAsserts, TaskString, folderCallback\r\n} from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { toSequence, runSequence, addToSequence, zipSequence, flattenSequence, runTaskSequence } from './taskSequence';\r\nimport { sortOrder, matchCompare, absoluteSrc, absolutePath } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './findTasks';\r\nimport *as path from 'path';\r\nimport *as fs from 'fs';\r\nconst globby = require('globby');\r\n\r\n/**\r\n *binding Config, create task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    return createContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *create Task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function createContext(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    if (cfg.createContext) {\r\n        return cfg.createContext(cfg, parent);\r\n    }\r\n    return new TaskContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *global data.\r\n */\r\nlet globals = {};\r\n\r\n/**\r\n *TaskContext\r\n *\r\n *@export\r\n *@class TaskContext\r\n *@implements {ITaskContext}\r\n */\r\nexport class TaskContext implements ITaskContext {\r\n    protected cfg: ITaskConfig;\r\n    protected taskseq: ITask[] = [];\r\n\r\n    protected sequence: Src[] = [];\r\n    protected children: ITaskContext[] = [];\r\n\r\n    oper: Operation;\r\n    option: IAsserts;\r\n    env: IEnvOption;\r\n    globals: any;\r\n\r\n    constructor(cfg: ITaskConfig, public parent?: ITaskContext) {\r\n        this.cfg = {};\r\n        this.setConfig(cfg);\r\n    }\r\n\r\n    private _gulp: Gulp;\r\n    get gulp() {\r\n        return this._gulp || gulp;\r\n    }\r\n    set gulp(gulp: Gulp) {\r\n        this._gulp = gulp;\r\n    }\r\n\r\n    /**\r\n     *load config\r\n     *\r\n     *@param {ITaskConfig} cfg\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    setConfig(cfg: ITaskConfig) {\r\n        this.env = _.extend(cfg.env, this.env || {});\r\n        this.oper = cfg.oper || currentOperation(cfg.env);\r\n        this.globals = cfg.globals || globals;\r\n        this.option = _.extend(cfg.option, this.option || {});\r\n        this.cfg = _.extend(cfg, this.cfg);\r\n    }\r\n\r\n    /**\r\n     *get config.\r\n     *\r\n     *@returns {ITaskConfig}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    getConfig(): ITaskConfig {\r\n        return this.cfg;\r\n    }\r\n\r\n    /**\r\n     *add sub ITaskContext\r\n     *\r\n     *@param {ITaskContext} context\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    add(context: ITaskContext): void {\r\n        context.parent = this;\r\n        this.children.push(context);\r\n    }\r\n    /**\r\n     *remove sub ITaskContext.\r\n     *\r\n     *@param {ITaskContext} [context]\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    remove(context?: ITaskContext): ITaskContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n\r\n    /**\r\n     *find sub context via express.\r\n     *\r\n     *@template T\r\n     *@param {(T | Express<T, boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {T}\r\n     *@memberof TaskContext\r\n     */\r\n    find<T extends ITaskContext>(express: T | Express<T, boolean>, mode?: Mode): T {\r\n        let context: ITaskContext;\r\n        this.each<T>(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<ITaskContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context as T;\r\n    }\r\n\r\n    /**\r\n     *filter items.\r\n     *\r\n     *@template T\r\n     *@param {(Express<T, void | boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {ITaskContext[]}\r\n     *@memberof TaskContext\r\n     */\r\n    filter<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode): ITaskContext[] {\r\n        let contexts: ITaskContext[] = [];\r\n        this.each<T>(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts;\r\n    }\r\n    /**\r\n     *find parent context via express.\r\n     *\r\n     *@param {(ITaskContext | Express<ITaskContext, boolean>)} express\r\n     *@param {Mode} [mode] {enum:['route','children', traverse']} default traverse.\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    each<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode) {\r\n        mode = mode || Mode.traverse;\r\n        let r;\r\n        switch (mode) {\r\n            case Mode.route:\r\n                r = this.route(express);\r\n                break;\r\n            case Mode.children:\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case Mode.traverse:\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * map context.\r\n     *\r\n     *@template T\r\n     *@param {Express<ITaskContext, T>} express\r\n     *@param {Mode} [mode]\r\n     *@param {Express<ITaskContext, boolean>} [filter]\r\n     *@returns {T[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    map<T>(express: Express<ITaskContext, T>, mode?: Mode, filter?: Express<ITaskContext, boolean>): T[] {\r\n        let arr: T[] = []\r\n        this.each((ctx) => {\r\n            if (filter) {\r\n                if (filter(ctx)) {\r\n                    arr.push(express(ctx));\r\n                }\r\n            } else {\r\n                arr.push(express(ctx));\r\n            }\r\n        }, mode);\r\n        return arr;\r\n    }\r\n\r\n    eachChildren(express: Express<ITaskContext, void | boolean>) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *do express work in routing.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    route(express: Express<ITaskContext, void | boolean>) {\r\n        if (!express(this)) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent.route) {\r\n            return this.parent.route(express);\r\n        }\r\n    }\r\n    /**\r\n     *translate all sub context to do express work.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    trans(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean {\r\n        if (this.option.match) {\r\n            return this.option.match(task, match);\r\n        }\r\n        return matchCompare(task, match);\r\n    }\r\n\r\n    getSrc(task?: ITaskInfo, relative = false): Src {\r\n        let src: Src;\r\n        let ctx = this;\r\n        let oper = task ? (task.oper || ctx.oper) : ctx.oper;\r\n        if (task && task.assert) {\r\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx)\r\n        }\r\n\r\n        if (!src) {\r\n            this.route(c => {\r\n                src = taskSourceVal(getAssertSrc(c.option, oper), c);\r\n                if (src) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return (relative !== false) ? src : absoluteSrc(ctx.env.root, src);\r\n    }\r\n\r\n    getDist(task?: ITaskInfo, relative = false): string {\r\n        let dist: string;\r\n        let ctx = this;\r\n        // let oper = task ? (task.oper || context.oper) : context.oper;\r\n        if (task && task.assert) {\r\n            dist = getCurrentDist(task.assert, ctx);\r\n        }\r\n        if (!dist) {\r\n            this.route(c => {\r\n                dist = getCurrentDist(c.option, c);\r\n                if (dist) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        return (relative !== false) ? dist : absolutePath(ctx.env.root, dist);\r\n    }\r\n\r\n    subTaskName(task, ext = '') {\r\n        let ctx = this;\r\n        let name = '';\r\n        // let oper = context.oper;\r\n        if (_.isString(task)) {\r\n            name = task;\r\n        } else if (task && task !== ctx.option) {\r\n            // oper = task.oper || context.oper;\r\n            if (task.name) {\r\n                name = taskStringVal(task.name, ctx)\r\n            }\r\n            if (!name && task.assert && task.assert.name) {\r\n                name = taskStringVal(task.assert.name, ctx)\r\n            }\r\n        }\r\n        let optName: string;\r\n        this.route(c => {\r\n            optName = taskStringVal(c.option.name, c);\r\n            if (optName) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })\r\n\r\n        if (optName) {\r\n            if (name.indexOf(optName + '-') === 0) {\r\n                return name;\r\n            }\r\n            // avoid soma name.\r\n            if (name && optName !== name) {\r\n                return `${optName}-${name}` + ext;\r\n            }\r\n            return optName + ext;\r\n        } else {\r\n            return name + ext;\r\n        }\r\n    }\r\n\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInModule(module, _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTasksInDir(dirs: TaskSource, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInDir(ctx.to(dirs), _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine> {\r\n        return findTaskDefineInModule(module);\r\n    }\r\n\r\n    findTaskDefineInDir(dirs: TaskSource): Promise<ITaskDefine> {\r\n        return findTaskDefineInDir(this.to(dirs));\r\n    }\r\n\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n        return files(express, filter, mapping);\r\n    }\r\n\r\n\r\n    /**\r\n     *to Sequence.\r\n     *\r\n     *@param {ITask[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    toSequence(tasks: ITask[], zipName?: ZipTaskName): Src[] {\r\n        return toSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *filter file in directory.  default implement in bindingConfig.\r\n     *\r\n     *@param {Gulp} gulp\r\n     *@param {Src[]} tasks\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    runSequence(tasks: Src[]): Promise<any> {\r\n        return runSequence(this.gulp, tasks);\r\n    }\r\n\r\n    /**\r\n     *run task sequence in this context.\r\n     *\r\n     *@param {(ITask[] | Promise<ITask[]>)} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    runTaskSequence(tasks: ITask[] | Promise<ITask[]>, zipName?: ZipTaskName): Promise<any> {\r\n        return runTaskSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *zip task sequence.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    zipSequence(tasks: Src[], zipName?: ZipTaskName): string {\r\n        return zipSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *flattenSequence in this context.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string[]}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    flattenSequence(tasks: Src[], zipName?: ZipTaskName): string[] {\r\n        return flattenSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n\r\n    /**\r\n     *dynamic generate tasks.  default implement in bindingConfig.\r\n     *\r\n     *@param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     *@param {ITaskInfo} [match]\r\n     *@returns {ITask[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n        let ctx = this;\r\n        let gtask = generateTask(tasks, _.extend({ oper: ctx.oper }, match || {}), this);\r\n        this.taskseq = this.taskseq.concat(gtask);\r\n        return this.taskseq;\r\n    }\r\n\r\n    /**\r\n     *add task result to task sequence. default implement in bindingConfig.\r\n     *\r\n     *@param {Src[]} sequence  task sequence.\r\n     *@param {ITaskInfo} task\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[] {\r\n        if (this.cfg.addToSequence) {\r\n            return this.cfg.addToSequence(sequence, task);\r\n        }\r\n        return addToSequence(sequence, task, this);\r\n    }\r\n\r\n    getRootPath() {\r\n        return this.env.root;\r\n    }\r\n\r\n    getRootFolders(express?: folderCallback): string[] {\r\n        return this.getFolders(this.getRootPath(), express);\r\n    }\r\n\r\n    getFolders(pathstr: string, express?: folderCallback): string[] {\r\n        let dir = fs.readdirSync(pathstr);\r\n        let folders = [];\r\n        _.each(dir, (d: string) => {\r\n            let sf = path.join(pathstr, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                if (express) {\r\n                    let fl = express(sf, d, this);\r\n                    if (fl) {\r\n                        folders.push(fl);\r\n                    }\r\n                } else {\r\n                    folders.push(sf);\r\n                }\r\n            }\r\n        });\r\n        return folders;\r\n    }\r\n\r\n    getDistFolders(express?: folderCallback, task?: ITaskInfo): string[] {\r\n        return this.getFolders(this.getDist(task), express);\r\n    }\r\n\r\n    toRootSrc(src: Src): Src {\r\n        return absoluteSrc(this.cfg.env.root, src);\r\n    }\r\n\r\n    toRootPath(pathstr: string): string {\r\n        return absolutePath(this.cfg.env.root, pathstr);\r\n    }\r\n\r\n    toDistSrc(src: Src, task?: ITaskInfo): Src {\r\n        return absoluteSrc(this.getDist(task), src);\r\n    }\r\n\r\n    toDistPath(pathstr: string, task?: ITaskInfo): string {\r\n        return absolutePath(this.getDist(task), pathstr);\r\n    }\r\n\r\n    to<T>(setting: T | ((ctx: ITaskContext) => T)): T {\r\n        return _.isFunction(setting) ? setting(this) : setting;\r\n    }\r\n\r\n    toSrc(source: TaskSource): Src {\r\n        return taskSourceVal(source, this);\r\n    }\r\n\r\n    toStr(name: TaskString): string {\r\n        return taskStringVal(name, this);\r\n    }\r\n\r\n    toUrl(basePath: string, toPath?: string): string {\r\n        return (toPath ? path.relative(basePath, toPath) : basePath).replace(/\\\\/g, '/'); // .replace(/^\\//g, '');\r\n    }\r\n\r\n    private packages = {};\r\n    getPackage(filename?: TaskString): any {\r\n        filename = filename || this.cfg.packageFile;\r\n        let name = this.toRootPath(this.toStr(filename) || 'package.json');\r\n        if (!this.packages[name]) {\r\n            this.packages[name] = require(name);\r\n        }\r\n        return this.packages[name]\r\n    }\r\n\r\n    setup(): Promise<Src[]> {\r\n        return Promise.all<any>(\r\n            [\r\n                this.setupTasks(),\r\n                ...this.map(ctx => {\r\n                    return ctx.setup()\r\n                        .then(seq => {\r\n                            return ctx;\r\n                        });\r\n                }, Mode.children)\r\n            ])\r\n            .then(srcs => {\r\n                let opt = this.option as IAsserts;\r\n                let tseq = srcs.shift() as Src[];\r\n                let ordertask = sortOrder(<ITaskContext[]>srcs, ctx => ctx.option.order, this);\r\n\r\n                let subseq: Src[] = [];\r\n                _.each(ordertask, (t, idx) => {\r\n                    if (_.isArray(t)) {\r\n                        subseq.push(_.filter(_.map(t, it => this.zipSequence(<Src[]>it.getRunSequence())), it => !!it));\r\n                    } else {\r\n                        let tk = this.zipSequence(t.getRunSequence());\r\n                        if (tk) {\r\n                            subseq.push(tk);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // let children = this.zipSequence(subseq, (name, runway) => this.subTaskName(name, (runway === RunWay.sequence ? '-sub-seq' : '-sub-paral')));\r\n                tseq = opt.runWay === RunWay.parallel ? [this.flattenSequence(tseq)] : tseq;\r\n                if (subseq && subseq.length > 0) {\r\n                    if (opt.nodeSequence === NodeSequence.after) {\r\n                        tseq.splice(0, 0, ...subseq);\r\n                    } else {\r\n                        tseq.push(...subseq);\r\n                    }\r\n                }\r\n\r\n                this.sequence = tseq;\r\n                return this.sequence;\r\n            });\r\n    }\r\n\r\n    getRunSequence(): Src[] {\r\n        return this.sequence || [];\r\n    }\r\n\r\n    setupTasks(): Src[] | Promise<Src[]> {\r\n        return this.toSequence(this.taskseq);\r\n    }\r\n\r\n    addTask(...task: ITask[]) {\r\n        this.taskseq.push(...task);\r\n    }\r\n\r\n    removeTask(task: ITask): ITask[] | Promise<ITask[]> {\r\n        let idx = this.taskseq.indexOf(task);\r\n        if (idx >= 0 && idx < this.taskseq.length) {\r\n            return this.taskseq.splice(idx, 1);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     *run task in this context.\r\n     *\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    run(): Promise<any> {\r\n        if (this.env.help) {\r\n            return Promise.resolve(this.help())\r\n        } else {\r\n            return this.setup()\r\n                .then(tseq => {\r\n                    let opt = this.option as IAsserts;\r\n                    if (opt.runWay === RunWay.parallel) {\r\n                        return this.runSequence([this.flattenSequence(tseq)]);\r\n                    } else {\r\n                        return this.runSequence(tseq);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    help() {\r\n        this.cfg.printHelp && this.cfg.printHelp(_.isBoolean(this.env.help) ? '' : this.env.help);\r\n    }\r\n\r\n    tasks(express?: (item: ITask) => boolean): ITask[] {\r\n        return express ? _.filter(this.taskseq, express) : this.taskseq;\r\n    }\r\n\r\n    registerTasks(express?: (item: ITask) => boolean): ITask[] {\r\n        let tasks = [];\r\n        this.each(c => {\r\n            tasks = tasks.concat(c.tasks(express));\r\n        });\r\n        return tasks;\r\n    }\r\n\r\n    globalTasks(): string[] {\r\n        return _.keys(this.globals.tasks || {});\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *get current env Operation.\r\n *\r\n *@export\r\n *@param {EnvOption} env\r\n *@returns\r\n */\r\nfunction currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy | Operation.release;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n/**\r\n *get assert source.\r\n *\r\n *@param {IAssertDist} assert\r\n *@param {Operation} oper\r\n *@returns\r\n */\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n *get dist.\r\n *\r\n *@param {IAssertDist} ds\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, ctx: ITaskContext) {\r\n    let dist: string;\r\n    let env = ctx.env;\r\n    let oper = ctx.oper;\r\n    if (env.deploy || (oper & Operation.deploy) > 0) {\r\n        dist = taskStringVal(ds.deployDist, ctx);\r\n    }\r\n    if (!dist && (env.release || (oper & Operation.release) > 0)) {\r\n        dist = taskStringVal(ds.releaseDist, ctx);\r\n    }\r\n    if (!dist && (env.e2e || (oper & Operation.e2e) > 0)) {\r\n        dist = taskStringVal(ds.e2eDist, ctx);\r\n    }\r\n    if (!dist && (env.test || (oper & Operation.test) > 0)) {\r\n        dist = taskStringVal(ds.testDist, ctx);\r\n    }\r\n    if (!dist && ((oper & Operation.build) > 0)) {\r\n        dist = taskStringVal(ds.buildDist, ctx);\r\n    }\r\n    if (!dist) {\r\n        dist = taskStringVal(ds.dist, ctx);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n/**\r\n *filter fileName in directory.\r\n *\r\n *@export\r\n *@param {string} directory\r\n *@param {((fileName: string) => boolean)} [express]\r\n *@returns {string[]}\r\n */\r\nfunction files(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n    return Promise.resolve(globby(express))\r\n        .then((files: string[]) => {\r\n            if (filter) {\r\n                files = _.filter(files, filter)\r\n            }\r\n            if (mapping) {\r\n                files = _.map(files, mapping);\r\n            }\r\n            return files;\r\n        })\r\n}\r\n\r\n/**\r\n *task src, string or array string.\r\n *\r\n *@export\r\n *@param {TaskSource} src\r\n *@param {Operation} oper runtime Operation\r\n *@param {IEnvOption} [env]\r\n *@returns\r\n */\r\nfunction taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n *task string.\r\n *\r\n *@export\r\n *@param {TaskString} name\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n"]}