{"version":3,"sources":["TaskContext.ts"],"names":["bindingConfig","cfg","parent","createContext","TaskContext","currentOperation","env","oper","deploy","TaskConfig_1","Operation","release","build","watch","test","serve","e2e","getAssertSrc","assert","src","testSrc","e2eSrc","watchSrc","clean","cleanSrc","dist","getCurrentDist","ds","ctx","taskStringVal","deployDist","releaseDist","e2eDist","testDist","buildDist","files","express","filter","mapping","Promise","resolve","globby","then","_","map","taskSourceVal","isFunction","name","require","gulp","minimist","generateTask_1","taskSequence_1","utils_1","findTasks_1","path","fs","exports","globals","this","taskseq","sequence","children","packages","add","pcfg","omit","getConfig","createEnv","setConfig","Object","defineProperty","prototype","_gulp","process","argv","slice","string","default","NODE_ENV","setEnvViaOperate","extend","option","context","push","isUndefined","remove","items","each","i","isTask","obj","find","mode","item","isFinded","contexts","Mode","traverse","r","route","eachChildren","trans","arr","matchCompare","task","match","getSrc","relative","c","absoluteSrc","root","getDist","absolutePath","subTaskName","ext","isString","optName","indexOf","findTasks","module","findTasksInModule","findTasksInDir","dirs","to","findTaskDefine","findTaskDefineInModule","findTaskDefineInDir","fileFilter","toSequence","tasks","zipName","runSequence","runTaskSequence","zipSequence","flattenSequence","generateTask","gtask","concat","addToSequence","getRootPath","_this","getRootFolders","getFolders","pathstr","dir","readdirSync","folders","d","sf","join","f","lstatSync","isDirectory","fl","getDistFolders","toRootSrc","toRootPath","toDistSrc","toDistPath","setting","toSrc","source","toStr","toUrl","basePath","toPath","replace","getPackage","filename","packageFile","setup","all","setupTasks","seq","srcs","opt","tseq","shift","ordertask","sortOrder","order","subseq","t","idx","isArray","length","ptasks","it","getRunSequence","tk","runWay","RunWay","parallel","nodeSequence","NodeSequence","after","splice","apply","addTask","_i","arguments","_a","removeTask","run","help","printHelp","isBoolean","registerTasks","globalTasks","keys"],"mappings":"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","file":"../TaskContext.js","sourcesContent":["import *as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport *as gulp from 'gulp';\r\nimport * as minimist from 'minimist';\r\nimport {\r\n    ITask, IAssertDist, IEnvOption, Operation, ITaskContext, ITaskDefine, IDynamicTaskOption\r\n    , NodeSequence, RunWay, ZipTaskName, Express, Mode, ITaskConfig, ITaskInfo, Src, TaskSource, IAsserts, TaskString, folderCallback\r\n} from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { toSequence, runSequence, addToSequence, zipSequence, flattenSequence, runTaskSequence } from './taskSequence';\r\nimport { sortOrder, matchCompare, absoluteSrc, absolutePath } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './findTasks';\r\nimport *as path from 'path';\r\nimport *as fs from 'fs';\r\nconst globby = require('globby');\r\n\r\n/**\r\n *binding Config, create task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    return createContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *create Task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function createContext(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    if (cfg.createContext) {\r\n        return cfg.createContext(cfg, parent);\r\n    }\r\n    return new TaskContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *global data.\r\n */\r\nlet globals = {};\r\n\r\n/**\r\n *TaskContext\r\n *\r\n *@export\r\n *@class TaskContext\r\n *@implements {ITaskContext}\r\n */\r\nexport class TaskContext implements ITaskContext {\r\n    protected cfg: ITaskConfig;\r\n    protected taskseq: ITask[] = [];\r\n\r\n    protected sequence: Src[] = [];\r\n    protected children: ITaskContext[] = [];\r\n\r\n    oper: Operation;\r\n    option: IAsserts;\r\n    env: IEnvOption;\r\n    globals: any;\r\n\r\n    constructor(cfg: ITaskConfig, public parent?: ITaskContext) {\r\n        if (parent) {\r\n            parent.add(this);\r\n            let pcfg: ITaskConfig = _.omit(parent.getConfig(), 'option');\r\n            pcfg.env = pcfg.env || this.createEnv();\r\n            this.setConfig(pcfg);\r\n        } else {\r\n            cfg = cfg || {};\r\n            cfg.env = cfg.env || this.createEnv();\r\n        }\r\n        this.setConfig(cfg);\r\n    }\r\n\r\n    private _gulp: Gulp;\r\n    get gulp() {\r\n        return this._gulp || gulp;\r\n    }\r\n    set gulp(gulp: Gulp) {\r\n        this._gulp = gulp;\r\n    }\r\n\r\n    protected createEnv(): IEnvOption {\r\n        let env: IEnvOption = minimist(process.argv.slice(2), {\r\n            string: 'env',\r\n            default: { env: process.env.NODE_ENV || 'development' }\r\n        }) as IEnvOption;\r\n        return env;\r\n    }\r\n\r\n    protected setEnvViaOperate(oper: Operation) {\r\n        this.env = this.env || {};\r\n        if ((oper & Operation.deploy) > 0) {\r\n            this.env.deploy = true;\r\n            this.env.release = false;\r\n        } else if ((oper & Operation.release) > 0) {\r\n            this.env.release = true;\r\n            this.env.deploy = false;\r\n            oper = Operation.release;\r\n        }\r\n\r\n        if ((oper & Operation.watch) > 0) {\r\n            this.env.watch = true;\r\n        }\r\n\r\n        if ((oper & Operation.test) > 0) {\r\n            this.env.test = true;\r\n        }\r\n\r\n        if ((oper & Operation.serve) > 0) {\r\n            this.env.serve = true;\r\n        }\r\n\r\n        if ((oper & Operation.e2e) > 0) {\r\n            this.env.e2e = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *load config\r\n     *\r\n     *@param {ITaskConfig} cfg\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    setConfig(cfg: ITaskConfig) {\r\n        if (!cfg) {\r\n            return;\r\n        }\r\n        if (cfg.env) {\r\n            this.env = cfg.env = _.extend({}, this.env || {}, cfg.env);\r\n            this.oper = currentOperation(this.env);\r\n        }\r\n        if (cfg.oper) {\r\n            this.oper = cfg.oper;\r\n            this.setEnvViaOperate(this.oper);\r\n        }\r\n        this.globals = cfg.globals || globals;\r\n        if (cfg.option) {\r\n            this.option = cfg.option = _.extend({}, this.option || {}, cfg.option);\r\n        }\r\n        this.cfg = _.extend(this.cfg, cfg);\r\n    }\r\n\r\n    /**\r\n     *get config.\r\n     *\r\n     *@returns {ITaskConfig}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    getConfig(): ITaskConfig {\r\n        return this.cfg || {};\r\n    }\r\n\r\n    /**\r\n     *add sub ITaskContext\r\n     *\r\n     *@param {ITaskContext} context\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    add(context: ITaskContext | ITaskConfig): void {\r\n        let ctx: ITaskContext;\r\n        if (context instanceof TaskContext) {\r\n            ctx = context;\r\n        } else {\r\n            ctx = this.createContext(context, null);\r\n        }\r\n        ctx.parent = this;\r\n        this.children.push(ctx);\r\n    }\r\n\r\n    /**\r\n     * create new context;\r\n     *\r\n     * @param {ITaskConfig} cfg\r\n     * @param {ITaskContext} [parent] default current context.\r\n     * @returns {ITaskContext}\r\n     * @memberof TaskContext\r\n     */\r\n    createContext(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n        return new TaskContext(cfg, _.isUndefined(parent) ? this : parent);\r\n    }\r\n    /**\r\n     *remove sub ITaskContext.\r\n     *\r\n     *@param {ITaskContext} [context]\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    remove(context?: ITaskContext): ITaskContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * is task class.\r\n     *\r\n     * @param {any} obj\r\n     * @returns {boolean}\r\n     * @memberof TaskContext\r\n     */\r\n    isTask(obj: any): boolean {\r\n        if (!obj) {\r\n            return false;\r\n        }\r\n        if (!_.isFunction(obj)) {\r\n            return false;\r\n        }\r\n        return obj['__task'] || obj['__dynamictask']\r\n    }\r\n\r\n\r\n    /**\r\n     *find sub context via express.\r\n     *\r\n     *@template T\r\n     *@param {(T | Express<T, boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {T}\r\n     *@memberof TaskContext\r\n     */\r\n    find<T extends ITaskContext>(express: T | Express<T, boolean>, mode?: Mode): T {\r\n        let context: ITaskContext;\r\n        this.each<T>(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<ITaskContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context as T;\r\n    }\r\n\r\n    /**\r\n     *filter items.\r\n     *\r\n     *@template T\r\n     *@param {(Express<T, void | boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {ITaskContext[]}\r\n     *@memberof TaskContext\r\n     */\r\n    filter<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode): T[] {\r\n        let contexts: ITaskContext[] = [];\r\n        this.each<T>(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts as T[];\r\n    }\r\n    /**\r\n     *find parent context via express.\r\n     *\r\n     *@param {(ITaskContext | Express<ITaskContext, boolean>)} express\r\n     *@param {Mode} [mode] {enum:['route','children', traverse']} default traverse.\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    each<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode) {\r\n        mode = mode || Mode.traverse;\r\n        let r;\r\n        switch (mode) {\r\n            case Mode.route:\r\n                r = this.route(express);\r\n                break;\r\n            case Mode.children:\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case Mode.traverse:\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * map context.\r\n     *\r\n     *@template T\r\n     *@param {Express<ITaskContext, T>} express\r\n     *@param {Mode} [mode]\r\n     *@param {Express<ITaskContext, boolean>} [filter]\r\n     *@returns {T[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    map<T>(express: Express<ITaskContext, T>, mode?: Mode, filter?: Express<ITaskContext, boolean>): T[] {\r\n        let arr: T[] = []\r\n        this.each((ctx) => {\r\n            if (filter) {\r\n                if (filter(ctx)) {\r\n                    arr.push(express(ctx));\r\n                }\r\n            } else {\r\n                arr.push(express(ctx));\r\n            }\r\n        }, mode);\r\n        return arr;\r\n    }\r\n\r\n    eachChildren(express: Express<ITaskContext, void | boolean>) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *do express work in routing.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    route(express: Express<ITaskContext, void | boolean>) {\r\n        if (!express(this)) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent.route) {\r\n            return this.parent.route(express);\r\n        }\r\n    }\r\n    /**\r\n     *translate all sub context to do express work.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    trans(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean {\r\n        if (this.option.match) {\r\n            return this.option.match(task, match);\r\n        }\r\n        return matchCompare(task, match);\r\n    }\r\n\r\n    getSrc(task?: ITaskInfo, relative = false): Src {\r\n        let src: Src;\r\n        let ctx = this;\r\n        let oper = task ? (task.oper || ctx.oper) : ctx.oper;\r\n        if (task && task.assert) {\r\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx)\r\n        }\r\n\r\n        if (!src) {\r\n            this.route(c => {\r\n                src = taskSourceVal(getAssertSrc(c.option, oper), c);\r\n                if (src) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return (relative !== false) ? src : absoluteSrc(ctx.env.root, src);\r\n    }\r\n\r\n    getDist(task?: ITaskInfo, relative = false): string {\r\n        let dist: string;\r\n        let ctx = this;\r\n        // let oper = task ? (task.oper || context.oper) : context.oper;\r\n        if (task && task.assert) {\r\n            dist = getCurrentDist(task.assert, ctx);\r\n        }\r\n        if (!dist) {\r\n            this.route(c => {\r\n                dist = getCurrentDist(c.option, c);\r\n                if (dist) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        return (relative !== false) ? dist : absolutePath(ctx.env.root, dist);\r\n    }\r\n\r\n    subTaskName(task, ext = '') {\r\n        let ctx = this;\r\n        let name = '';\r\n        // let oper = context.oper;\r\n        if (_.isString(task)) {\r\n            name = task;\r\n        } else if (task && task !== ctx.option) {\r\n            // oper = task.oper || context.oper;\r\n            if (task.name) {\r\n                name = taskStringVal(task.name, ctx)\r\n            }\r\n            if (!name && task.assert && task.assert.name) {\r\n                name = taskStringVal(task.assert.name, ctx)\r\n            }\r\n        }\r\n        let optName: string;\r\n        this.route(c => {\r\n            optName = taskStringVal(c.option.name, c);\r\n            if (optName) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })\r\n\r\n        if (optName) {\r\n            if (name.indexOf(optName + '-') === 0) {\r\n                return name;\r\n            }\r\n            // avoid soma name.\r\n            if (name && optName !== name) {\r\n                return `${optName}-${name}` + ext;\r\n            }\r\n            return optName + ext;\r\n        } else {\r\n            return name + ext;\r\n        }\r\n    }\r\n\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInModule(module, _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTasksInDir(dirs: TaskSource, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInDir(ctx.to(dirs), _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine> {\r\n        return findTaskDefineInModule(module);\r\n    }\r\n\r\n    findTaskDefineInDir(dirs: TaskSource): Promise<ITaskDefine> {\r\n        return findTaskDefineInDir(this.to(dirs));\r\n    }\r\n\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n        return files(express, filter, mapping);\r\n    }\r\n\r\n\r\n    /**\r\n     *to Sequence.\r\n     *\r\n     *@param {ITask[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    toSequence(tasks: ITask[], zipName?: ZipTaskName): Src[] {\r\n        return toSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *filter file in directory.  default implement in bindingConfig.\r\n     *\r\n     *@param {Gulp} gulp\r\n     *@param {Src[]} tasks\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    runSequence(tasks: Src[]): Promise<any> {\r\n        return runSequence(this.gulp, tasks);\r\n    }\r\n\r\n    /**\r\n     *run task sequence in this context.\r\n     *\r\n     *@param {(ITask[] | Promise<ITask[]>)} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    runTaskSequence(tasks: ITask[] | Promise<ITask[]>, zipName?: ZipTaskName): Promise<any> {\r\n        return runTaskSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *zip task sequence.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    zipSequence(tasks: Src[], zipName?: ZipTaskName): string {\r\n        return zipSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *flattenSequence in this context.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string[]}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    flattenSequence(tasks: Src[], zipName?: ZipTaskName): string[] {\r\n        return flattenSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n\r\n    /**\r\n     *dynamic generate tasks.  default implement in bindingConfig.\r\n     *\r\n     *@param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     *@param {ITaskInfo} [match]\r\n     *@returns {ITask[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n        let ctx = this;\r\n        let gtask = generateTask(tasks, _.extend({ oper: ctx.oper }, match || {}), this);\r\n        this.taskseq = this.taskseq.concat(gtask);\r\n        return this.taskseq;\r\n    }\r\n\r\n    /**\r\n     *add task result to task sequence. default implement in bindingConfig.\r\n     *\r\n     *@param {Src[]} sequence  task sequence.\r\n     *@param {ITaskInfo} task\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[] {\r\n        if (this.cfg.addToSequence) {\r\n            return this.cfg.addToSequence(sequence, task);\r\n        }\r\n        return addToSequence(sequence, task, this);\r\n    }\r\n\r\n    getRootPath() {\r\n        let root: string;\r\n        if (this.env && this.env.root) {\r\n            root = this.env.root\r\n        } else {\r\n            this.route(c => {\r\n                if (c.env && c.env.root) {\r\n                    root = this.env.root;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return root;\r\n    }\r\n\r\n    getRootFolders(express?: folderCallback): string[] {\r\n        return this.getFolders(this.getRootPath(), express);\r\n    }\r\n\r\n    getFolders(pathstr: string, express?: folderCallback): string[] {\r\n        let dir = fs.readdirSync(pathstr);\r\n        let folders = [];\r\n        _.each(dir, (d: string) => {\r\n            let sf = path.join(pathstr, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                if (express) {\r\n                    let fl = express(sf, d, this);\r\n                    if (fl) {\r\n                        folders.push(fl);\r\n                    }\r\n                } else {\r\n                    folders.push(sf);\r\n                }\r\n            }\r\n        });\r\n        return folders;\r\n    }\r\n\r\n    getDistFolders(express?: folderCallback, task?: ITaskInfo): string[] {\r\n        return this.getFolders(this.getDist(task), express);\r\n    }\r\n\r\n    toRootSrc(src: Src): Src {\r\n        return absoluteSrc(this.getRootPath(), src);\r\n    }\r\n\r\n    toRootPath(pathstr: string): string {\r\n        return absolutePath(this.getRootPath(), pathstr);\r\n    }\r\n\r\n    toDistSrc(src: Src, task?: ITaskInfo): Src {\r\n        return absoluteSrc(this.getDist(task), src);\r\n    }\r\n\r\n    toDistPath(pathstr: string, task?: ITaskInfo): string {\r\n        return absolutePath(this.getDist(task), pathstr);\r\n    }\r\n\r\n    to<T>(setting: T | ((ctx: ITaskContext) => T)): T {\r\n        return _.isFunction(setting) ? setting(this) : setting;\r\n    }\r\n\r\n    toSrc(source: TaskSource): Src {\r\n        return taskSourceVal(source, this);\r\n    }\r\n\r\n    toStr(name: TaskString): string {\r\n        return taskStringVal(name, this);\r\n    }\r\n\r\n    toUrl(basePath: string, toPath?: string): string {\r\n        return (toPath ? path.relative(basePath, toPath) : basePath).replace(/\\\\/g, '/'); // .replace(/^\\//g, '');\r\n    }\r\n\r\n    private packages = {};\r\n    getPackage(filename?: TaskString): any {\r\n        filename = filename || this.cfg.packageFile;\r\n        let name = this.toRootPath(this.toStr(filename) || 'package.json');\r\n        if (!this.packages[name]) {\r\n            this.packages[name] = require(name);\r\n        }\r\n        return this.packages[name]\r\n    }\r\n\r\n    setup(): Promise<Src[]> {\r\n\r\n        if (this.option.oper && (this.oper & this.option.oper) <= 0) {\r\n            this.sequence = null;\r\n            return Promise.resolve(this.sequence);\r\n        } else {\r\n            return Promise.all<any>(\r\n                [\r\n                    this.setupTasks(),\r\n                    ...this.map(ctx => {\r\n                        return ctx.setup()\r\n                            .then(seq => {\r\n                                return ctx;\r\n                            });\r\n                    }, Mode.children)\r\n                ])\r\n                .then(srcs => {\r\n                    let opt = this.option as IAsserts;\r\n                    let tseq = srcs.shift() as Src[];\r\n                    let ordertask = sortOrder(<ITaskContext[]>srcs, ctx => ctx.option.order, this);\r\n\r\n                    let subseq: Src[] = [];\r\n                    _.each(ordertask, (t, idx) => {\r\n                        if (_.isArray(t)) {\r\n                            if (t.length > 0) {\r\n                                let ptasks = _.filter(_.map(t, it => this.zipSequence(<Src[]>it.getRunSequence())), it => !!it);\r\n                                if (ptasks.length > 0) {\r\n                                    subseq.push(ptasks);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let tk = this.zipSequence(t.getRunSequence());\r\n                            tk && subseq.push(tk);\r\n                        }\r\n                    });\r\n\r\n                    // let children = this.zipSequence(subseq, (name, runway) => this.subTaskName(name, (runway === RunWay.sequence ? '-sub-seq' : '-sub-paral')));\r\n                    subseq = this.flattenSequence(subseq);\r\n                    tseq = this.flattenSequence(tseq);\r\n                    if (tseq.length > 0) {\r\n                        tseq = opt.runWay === RunWay.parallel ? [this.flattenSequence(tseq)] : this.flattenSequence(tseq);\r\n                        if (subseq && subseq.length > 0) {\r\n                            if (opt.nodeSequence === NodeSequence.after) {\r\n                                tseq.splice(0, 0, ...subseq);\r\n                            } else {\r\n                                tseq.push(...subseq);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        tseq = subseq;\r\n                    }\r\n\r\n                    this.sequence = tseq;\r\n                    return this.sequence;\r\n                });\r\n        }\r\n    }\r\n\r\n    getRunSequence(): Src[] {\r\n        return this.sequence || [];\r\n    }\r\n\r\n    setupTasks(): Src[] | Promise<Src[]> {\r\n        return this.toSequence(this.taskseq);\r\n    }\r\n\r\n    addTask(...task: ITask[]) {\r\n        this.taskseq.push(...task);\r\n    }\r\n\r\n    removeTask(task: ITask): ITask[] | Promise<ITask[]> {\r\n        let idx = this.taskseq.indexOf(task);\r\n        if (idx >= 0 && idx < this.taskseq.length) {\r\n            return this.taskseq.splice(idx, 1);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     *run task in this context.\r\n     *\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    run(): Promise<any> {\r\n        if (this.env.help) {\r\n            return Promise.resolve(this.help())\r\n        } else {\r\n            return this.setup()\r\n                .then(tseq => {\r\n                    let opt = this.option as IAsserts;\r\n                    if (opt.runWay === RunWay.parallel) {\r\n                        return this.runSequence([this.flattenSequence(tseq)]);\r\n                    } else {\r\n                        return this.runSequence(tseq);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    help() {\r\n        this.cfg.printHelp && this.cfg.printHelp(_.isBoolean(this.env.help) ? '' : this.env.help);\r\n    }\r\n\r\n    tasks(express?: (item: ITask) => boolean): ITask[] {\r\n        return express ? _.filter(this.taskseq, express) : this.taskseq;\r\n    }\r\n\r\n    registerTasks(express?: (item: ITask) => boolean): ITask[] {\r\n        let tasks = [];\r\n        this.each(c => {\r\n            tasks = tasks.concat(c.tasks(express));\r\n        });\r\n        return tasks;\r\n    }\r\n\r\n    globalTasks(): string[] {\r\n        return _.keys(this.globals.tasks || {});\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *get current env Operation.\r\n *\r\n *@export\r\n *@param {EnvOption} env\r\n *@returns\r\n */\r\nfunction currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy | Operation.release;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n/**\r\n *get assert source.\r\n *\r\n *@param {IAssertDist} assert\r\n *@param {Operation} oper\r\n *@returns\r\n */\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n *get dist.\r\n *\r\n *@param {IAssertDist} ds\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, ctx: ITaskContext) {\r\n    let dist: string;\r\n    let env = ctx.env;\r\n    let oper = ctx.oper;\r\n    if (env.deploy || (oper & Operation.deploy) > 0) {\r\n        dist = taskStringVal(ds.deployDist, ctx);\r\n    }\r\n    if (!dist && (env.release || (oper & Operation.release) > 0)) {\r\n        dist = taskStringVal(ds.releaseDist, ctx);\r\n    }\r\n    if (!dist && (env.e2e || (oper & Operation.e2e) > 0)) {\r\n        dist = taskStringVal(ds.e2eDist, ctx);\r\n    }\r\n    if (!dist && (env.test || (oper & Operation.test) > 0)) {\r\n        dist = taskStringVal(ds.testDist, ctx);\r\n    }\r\n    if (!dist && ((oper & Operation.build) > 0)) {\r\n        dist = taskStringVal(ds.buildDist, ctx);\r\n    }\r\n    if (!dist) {\r\n        dist = taskStringVal(ds.dist, ctx);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n/**\r\n *filter fileName in directory.\r\n *\r\n *@export\r\n *@param {string} directory\r\n *@param {((fileName: string) => boolean)} [express]\r\n *@returns {string[]}\r\n */\r\nfunction files(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n    return Promise.resolve(globby(express))\r\n        .then((files: string[]) => {\r\n            if (filter) {\r\n                files = _.filter(files, filter)\r\n            }\r\n            if (mapping) {\r\n                files = _.map(files, mapping);\r\n            }\r\n            return files;\r\n        })\r\n}\r\n\r\n/**\r\n *task src, string or array string.\r\n *\r\n *@export\r\n *@param {TaskSource} src\r\n *@param {Operation} oper runtime Operation\r\n *@param {IEnvOption} [env]\r\n *@returns\r\n */\r\nfunction taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n *task string.\r\n *\r\n *@export\r\n *@param {TaskString} name\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n"]}