{"version":3,"sources":["TaskContext.ts"],"names":["bindingConfig","cfg","parent","createContext","opt","option","add","TaskContext","currentOperation","env","oper","deploy","TaskConfig_1","Operation","release","build","watch","test","serve","e2e","getAssertSrc","assert","src","testSrc","e2eSrc","watchSrc","clean","cleanSrc","dist","getCurrentDist","ds","ctx","taskStringVal","deployDist","releaseDist","e2eDist","testDist","buildDist","files","express","filter","mapping","Promise","resolve","globby","then","_","map","taskSourceVal","isFunction","name","require","gulp","minimist","generateTask_1","taskSequence_1","utils_1","findTasks_1","path","fs","exports","NULLBuilder","node","isBuilt","globals","this","taskseq","sequence","children","packages","createEnv","setConfig","Object","defineProperty","prototype","_gulp","_builder","builder","process","argv","slice","string","default","NODE_ENV","setEnvViaOperate","extend","root","getRootPath","getConfig","isConfig","obj","context","curcfg","omit","remove","push","items","each","i","isTask","find","mode","item","isFinded","contexts","Mode","traverse","r","route","eachChildren","trans","arr","matchCompare","task","match","getSrc","relative","c","absoluteSrc","getDist","absolutePath","subTaskName","ext","taskName","names","toStr","t","reverse","isString","defaultTaskName","join","findTasks","module","envmatch","group","findTasksInModule","findTasksInDir","dirs","to","findTaskDefine","findTaskDefineInModule","findTaskDefineInDir","fileFilter","toSequence","tasks","zipName","runSequence","runTaskSequence","zipSequence","flattenSequence","generateTask","gtask","concat","addToSequence","_this","getRootFolders","getFolders","pathstr","dir","readdirSync","folders","d","sf","f","lstatSync","isDirectory","fl","getDistFolders","toRootSrc","toRootPath","toDistSrc","toDistPath","setting","toSrc","source","toUrl","basePath","toPath","replace","getPackage","filename","packageFile","setup","load","all","seq","subtasks","tseq","srcs","ordertask","sortOrder","order","subseq","idx","isArray","length","ptasks","it","getRunSequence","tk","runWay","RunWay","parallel","nodeSequence","NodeSequence","after","splice","apply","addTask","_i","arguments","_a","removeTask","indexOf","run","help","printHelp","isBoolean","registerTasks","globalTasks","keys"],"mappings":"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","file":"../TaskContext.js","sourcesContent":["import *as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport *as gulp from 'gulp';\r\nimport * as minimist from 'minimist';\r\nimport {\r\n    ITask, IAssertDist, IEnvOption, Operation, ITaskContext, ITaskDefine, IDynamicTaskOption, Builder\r\n    , ITaskDecorator, IAssertOption, NodeSequence, RunWay, ZipTaskName, Express, Mode, ITaskConfig, ITaskInfo, Src, TaskSource, IAsserts, TaskString, folderCallback\r\n} from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { toSequence, runSequence, addToSequence, zipSequence, flattenSequence, runTaskSequence } from './taskSequence';\r\nimport { sortOrder, matchCompare, absoluteSrc, absolutePath } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './findTasks';\r\nimport *as path from 'path';\r\nimport *as fs from 'fs';\r\nconst globby = require('globby');\r\n\r\n/**\r\n *binding Config, create task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    return createContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *create Task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig | IAssertOption} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function createContext(cfg: ITaskConfig | IAssertOption, parent?: ITaskContext): ITaskContext {\r\n    let opt: ITaskConfig = (cfg && cfg['option']) ? (cfg as ITaskConfig) : ({ option: cfg } as ITaskConfig);\r\n    if (opt.createContext) {\r\n        return opt.createContext(cfg, parent);\r\n    }\r\n    return parent ? parent.add(opt) : new TaskContext(opt);\r\n}\r\n\r\nconst NULLBuilder = <Builder>{\r\n    build<T extends IAsserts>(node: ITaskContext, option?: T): ITaskContext {\r\n        return node;\r\n    },\r\n\r\n    // buildChildren<T extends IAsserts>(node: ITaskContext, option?: T): ITaskContext {\r\n    //     return node;\r\n    // },\r\n\r\n    isBuilt(node: ITaskContext): boolean {\r\n        return false;\r\n    }\r\n\r\n    // clean(node: ITaskContext) {\r\n\r\n    // }\r\n}\r\n/**\r\n *global data.\r\n */\r\nlet globals = {};\r\n\r\n/**\r\n *TaskContext\r\n *\r\n *@export\r\n *@class TaskContext\r\n *@implements {ITaskContext}\r\n */\r\nexport class TaskContext implements ITaskContext {\r\n    protected cfg: ITaskConfig;\r\n    protected taskseq: ITask[] = [];\r\n\r\n    protected sequence: Src[] = [];\r\n    protected children: ITaskContext[] = [];\r\n\r\n    oper: Operation;\r\n    option: IAsserts;\r\n    env: IEnvOption;\r\n    globals: any;\r\n    parent: ITaskContext;\r\n\r\n    constructor(cfg: ITaskConfig) {\r\n        cfg = cfg || {};\r\n        cfg.env = cfg.env || this.createEnv();\r\n        this.setConfig(cfg);\r\n    }\r\n\r\n    private _gulp: Gulp;\r\n    get gulp() {\r\n        return this._gulp || gulp;\r\n    }\r\n    set gulp(gulp: Gulp) {\r\n        this._gulp = gulp;\r\n    }\r\n\r\n    protected _builder: Builder;\r\n    get builder(): Builder {\r\n        return this._builder || NULLBuilder;\r\n    }\r\n\r\n    set builder(builder: Builder) {\r\n        this._builder = builder;\r\n    }\r\n\r\n    protected createEnv(): IEnvOption {\r\n        let env: IEnvOption = minimist(process.argv.slice(2), {\r\n            string: 'env',\r\n            default: { env: process.env.NODE_ENV || 'development' }\r\n        }) as IEnvOption;\r\n        return env;\r\n    }\r\n\r\n    protected setEnvViaOperate(oper: Operation) {\r\n        this.env = this.env || {};\r\n        if ((oper & Operation.deploy) > 0) {\r\n            this.env.deploy = true;\r\n            this.env.release = false;\r\n        } else if ((oper & Operation.release) > 0) {\r\n            this.env.release = true;\r\n            this.env.deploy = false;\r\n            oper = Operation.release;\r\n        }\r\n\r\n        if ((oper & Operation.watch) > 0) {\r\n            this.env.watch = true;\r\n        }\r\n\r\n        if ((oper & Operation.test) > 0) {\r\n            this.env.test = true;\r\n        }\r\n\r\n        if ((oper & Operation.serve) > 0) {\r\n            this.env.serve = true;\r\n        }\r\n\r\n        if ((oper & Operation.e2e) > 0) {\r\n            this.env.e2e = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *load config\r\n     *\r\n     *@param {ITaskConfig} cfg\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    setConfig(cfg: ITaskConfig) {\r\n        if (!cfg) {\r\n            return;\r\n        }\r\n        if (cfg.env) {\r\n            this.env = cfg.env = _.extend({}, this.env || {}, cfg.env);\r\n            this.oper = currentOperation(this.env);\r\n        }\r\n        // make sure root.\r\n        if (!this.env.root) {\r\n            this.env.root = this.getRootPath();\r\n        }\r\n        if (cfg.oper) {\r\n            this.oper = cfg.oper;\r\n            this.setEnvViaOperate(this.oper);\r\n        }\r\n        this.globals = cfg.globals || globals;\r\n        if (cfg.option) {\r\n            this.option = cfg.option = _.extend({}, this.option || {}, cfg.option);\r\n        }\r\n        this.cfg = _.extend(this.cfg, cfg);\r\n    }\r\n\r\n    /**\r\n     *get config.\r\n     *\r\n     *@returns {ITaskConfig}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    getConfig(): ITaskConfig {\r\n        return this.cfg || {};\r\n    }\r\n\r\n    protected isConfig(obj: any): boolean {\r\n        return obj && obj['option'];\r\n    }\r\n\r\n    /**\r\n     * add sub ITaskContext\r\n     *\r\n     * @param {(ITaskContext | ITaskConfig | IAssertOption)} context\r\n     * @returns {ITaskContext} sub context.\r\n     * @memberof TaskContext\r\n     */\r\n    add(context: ITaskContext | ITaskConfig | IAssertOption): ITaskContext {\r\n        let ctx: ITaskContext;\r\n        let curcfg: ITaskConfig = _.omit(this.getConfig(), 'option');\r\n        if (context instanceof TaskContext) {\r\n            ctx = context;\r\n            if (ctx.parent) {\r\n                ctx.parent.remove(ctx);\r\n            }\r\n            ctx.setConfig(_.extend({}, curcfg, ctx.getConfig()));\r\n        } else {\r\n            let opt: ITaskConfig = (this.isConfig(context) ? context : { option: context }) as ITaskConfig;\r\n            opt = _.extend({}, curcfg, opt);\r\n            ctx = this.createContext(opt);\r\n        }\r\n        ctx.parent = this;\r\n        this.children.push(ctx);\r\n        // if (!ctx.builder.isBuilt(ctx)) {\r\n        //     ctx.builder.build(ctx);\r\n        // }\r\n        return ctx;\r\n    }\r\n\r\n    /**\r\n     * create context.\r\n     *\r\n     * @protected\r\n     * @param {(ITaskConfig)} cfg\r\n     * @returns {ITaskContext}\r\n     * @memberof TaskContext\r\n     */\r\n    protected createContext(cfg: ITaskConfig): ITaskContext {\r\n        return new TaskContext(cfg)\r\n    }\r\n\r\n    /**\r\n     *remove sub ITaskContext.\r\n     *\r\n     *@param {ITaskContext} [context]\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    remove(context?: ITaskContext): ITaskContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * is task class.\r\n     *\r\n     * @param {any} obj\r\n     * @returns {boolean}\r\n     * @memberof TaskContext\r\n     */\r\n    isTask(obj: any): boolean {\r\n        if (!obj) {\r\n            return false;\r\n        }\r\n        if (!_.isFunction(obj)) {\r\n            return false;\r\n        }\r\n        return obj['__task'] || obj['__dynamictask']\r\n    }\r\n\r\n\r\n    /**\r\n     *find sub context via express.\r\n     *\r\n     *@template T\r\n     *@param {(T | Express<T, boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {T}\r\n     *@memberof TaskContext\r\n     */\r\n    find<T extends ITaskContext>(express: T | Express<T, boolean>, mode?: Mode): T {\r\n        let context: ITaskContext;\r\n        this.each<T>(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<ITaskContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context as T;\r\n    }\r\n\r\n    /**\r\n     *filter items.\r\n     *\r\n     *@template T\r\n     *@param {(Express<T, void | boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {ITaskContext[]}\r\n     *@memberof TaskContext\r\n     */\r\n    filter<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode): T[] {\r\n        let contexts: ITaskContext[] = [];\r\n        this.each<T>(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts as T[];\r\n    }\r\n    /**\r\n     *find parent context via express.\r\n     *\r\n     *@param {(ITaskContext | Express<ITaskContext, boolean>)} express\r\n     *@param {Mode} [mode] {enum:['route','children', traverse']} default traverse.\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    each<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode) {\r\n        mode = mode || Mode.traverse;\r\n        let r;\r\n        switch (mode) {\r\n            case Mode.route:\r\n                r = this.route(express);\r\n                break;\r\n            case Mode.children:\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case Mode.traverse:\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * map context.\r\n     *\r\n     *@template T\r\n     *@param {Express<ITaskContext, T>} express\r\n     *@param {Mode} [mode]\r\n     *@param {Express<ITaskContext, boolean>} [filter]\r\n     *@returns {T[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    map<T>(express: Express<ITaskContext, T>, mode?: Mode, filter?: Express<ITaskContext, boolean>): T[] {\r\n        let arr: T[] = []\r\n        this.each((ctx) => {\r\n            if (filter) {\r\n                if (filter(ctx)) {\r\n                    arr.push(express(ctx));\r\n                }\r\n            } else {\r\n                arr.push(express(ctx));\r\n            }\r\n        }, mode);\r\n        return arr;\r\n    }\r\n\r\n    eachChildren(express: Express<ITaskContext, void | boolean>) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *do express work in routing.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    route(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent.route) {\r\n            return this.parent.route(express);\r\n        }\r\n    }\r\n    /**\r\n     *translate all sub context to do express work.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    trans(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean {\r\n        if (this.option.match) {\r\n            return this.option.match(task, match);\r\n        }\r\n        return matchCompare(task, match);\r\n    }\r\n\r\n    getSrc(task?: ITaskInfo, relative = false): Src {\r\n        let src: Src;\r\n        let ctx = this;\r\n        let oper = task ? (task.oper || ctx.oper) : ctx.oper;\r\n        if (task && task.assert) {\r\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx)\r\n        }\r\n\r\n        if (!src) {\r\n            this.route(c => {\r\n                src = taskSourceVal(getAssertSrc(c.option, oper), c);\r\n                if (src) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return (relative !== false) ? src : absoluteSrc(ctx.env.root, src);\r\n    }\r\n\r\n    getDist(task?: ITaskInfo, relative = false): string {\r\n        let dist: string;\r\n        let ctx = this;\r\n        // let oper = task ? (task.oper || context.oper) : context.oper;\r\n        if (task && task.assert) {\r\n            dist = getCurrentDist(task.assert, ctx);\r\n        }\r\n        if (!dist) {\r\n            this.route(c => {\r\n                dist = getCurrentDist(c.option, c);\r\n                if (dist) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        return (relative !== false) ? dist : absolutePath(ctx.env.root, dist);\r\n    }\r\n\r\n    subTaskName(task: TaskString | ITaskInfo, ext?: string) {\r\n        return this.taskName(task, ext);\r\n    }\r\n\r\n    taskName(task: TaskString | ITaskInfo, ext = ''): string {\r\n        let ctx = this;\r\n        let name = '';\r\n        let names = _.filter(this.map(c => {\r\n            return c.toStr(c.option.name);\r\n        }, Mode.route), t => !!t).reverse();\r\n\r\n        if (_.isString(task) || _.isFunction(task)) {\r\n            name = this.toStr(task);\r\n        } else if (task && task !== ctx.option) {\r\n            // oper = task.oper || context.oper;\r\n            if (task.name) {\r\n                name = taskStringVal(task.name, ctx)\r\n            }\r\n            if (!name && task.assert && task.assert.name) {\r\n                name = taskStringVal(task.assert.name, ctx)\r\n            }\r\n        }\r\n        if (!name) {\r\n            name = ctx.toStr(ctx.option.defaultTaskName);\r\n        }\r\n\r\n        if (name) {\r\n            names.push(name);\r\n        }\r\n        if (ext) {\r\n            names.push(ext);\r\n        }\r\n\r\n        // console.log('taskName:----------------------\\n', names);\r\n\r\n        return names.join('-');\r\n    }\r\n\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n        let envmatch: ITaskDecorator = {};\r\n        if (this.env.group) {\r\n            envmatch.group = this.env.group;\r\n        }\r\n        if (this.oper) {\r\n            envmatch.oper = this.oper;\r\n        }\r\n\r\n        return findTasksInModule(module, _.extend(envmatch, match || {}), this);\r\n    }\r\n\r\n    findTasksInDir(dirs: TaskSource, match?: ITaskInfo): Promise<ITask[]> {\r\n        let envmatch: ITaskDecorator = {};\r\n        if (this.env.group) {\r\n            envmatch.group = this.env.group;\r\n        }\r\n        if (this.oper) {\r\n            envmatch.oper = this.oper;\r\n        }\r\n        return findTasksInDir(this.to(dirs), _.extend(envmatch, match || {}), this);\r\n    }\r\n\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine> {\r\n        return findTaskDefineInModule(module);\r\n    }\r\n\r\n    findTaskDefineInDir(dirs: TaskSource): Promise<ITaskDefine> {\r\n        return findTaskDefineInDir(this.to(dirs));\r\n    }\r\n\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n        return files(express, filter, mapping);\r\n    }\r\n\r\n\r\n    /**\r\n     *to Sequence.\r\n     *\r\n     *@param {ITask[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    toSequence(tasks: ITask[], zipName?: ZipTaskName): Src[] {\r\n        return toSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *filter file in directory.  default implement in bindingConfig.\r\n     *\r\n     *@param {Gulp} gulp\r\n     *@param {Src[]} tasks\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    runSequence(tasks: Src[]): Promise<any> {\r\n        return runSequence(this.gulp, tasks);\r\n    }\r\n\r\n    /**\r\n     *run task sequence in this context.\r\n     *\r\n     *@param {(ITask[] | Promise<ITask[]>)} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    runTaskSequence(tasks: ITask[] | Promise<ITask[]>, zipName?: ZipTaskName): Promise<any> {\r\n        return runTaskSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *zip task sequence.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    zipSequence(tasks: Src[], zipName?: ZipTaskName): string {\r\n        return zipSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *flattenSequence in this context.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string[]}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    flattenSequence(tasks: Src[], zipName?: ZipTaskName): string[] {\r\n        return flattenSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n\r\n    /**\r\n     *dynamic generate tasks.  default implement in bindingConfig.\r\n     *\r\n     *@param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     *@param {ITaskInfo} [match]\r\n     *@returns {ITask[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n        let ctx = this;\r\n        let gtask = generateTask(tasks, _.extend({ oper: ctx.oper }, match || {}), this);\r\n        this.taskseq = this.taskseq.concat(gtask);\r\n        return this.taskseq;\r\n    }\r\n\r\n    /**\r\n     *add task result to task sequence. default implement in bindingConfig.\r\n     *\r\n     *@param {Src[]} sequence  task sequence.\r\n     *@param {ITaskInfo} task\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[] {\r\n        if (this.cfg.addToSequence) {\r\n            return this.cfg.addToSequence(sequence, task);\r\n        }\r\n        return addToSequence(sequence, task, this);\r\n    }\r\n\r\n    getRootPath() {\r\n        let root: string;\r\n        if (this.env && this.env.root) {\r\n            root = this.env.root\r\n        } else {\r\n            this.each(c => {\r\n                if (c.env && c.env.root) {\r\n                    root = this.env.root;\r\n                    return false;\r\n                }\r\n                return true;\r\n            }, Mode.route);\r\n        }\r\n        return root;\r\n    }\r\n\r\n    getRootFolders(express?: folderCallback): string[] {\r\n        return this.getFolders(this.getRootPath(), express);\r\n    }\r\n\r\n    getFolders(pathstr: string, express?: folderCallback): string[] {\r\n        let dir = fs.readdirSync(pathstr);\r\n        let folders = [];\r\n        _.each(dir, (d: string) => {\r\n            let sf = path.join(pathstr, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                if (express) {\r\n                    let fl = express(sf, d, this);\r\n                    if (fl) {\r\n                        folders.push(fl);\r\n                    }\r\n                } else {\r\n                    folders.push(sf);\r\n                }\r\n            }\r\n        });\r\n        return folders;\r\n    }\r\n\r\n    getDistFolders(express?: folderCallback, task?: ITaskInfo): string[] {\r\n        return this.getFolders(this.getDist(task), express);\r\n    }\r\n\r\n    toRootSrc(src: Src): Src {\r\n        return absoluteSrc(this.getRootPath(), src);\r\n    }\r\n\r\n    toRootPath(pathstr: string): string {\r\n        return absolutePath(this.getRootPath(), pathstr);\r\n    }\r\n\r\n    toDistSrc(src: Src, task?: ITaskInfo): Src {\r\n        return absoluteSrc(this.getDist(task), src);\r\n    }\r\n\r\n    toDistPath(pathstr: string, task?: ITaskInfo): string {\r\n        return absolutePath(this.getDist(task), pathstr);\r\n    }\r\n\r\n    to<T>(setting: T | ((ctx: ITaskContext) => T)): T {\r\n        return _.isFunction(setting) ? setting(this) : setting;\r\n    }\r\n\r\n    toSrc(source: TaskSource): Src {\r\n        return taskSourceVal(source, this);\r\n    }\r\n\r\n    toStr(name: TaskString): string {\r\n        return taskStringVal(name, this);\r\n    }\r\n\r\n    toUrl(basePath: string, toPath?: string): string {\r\n        return (toPath ? path.relative(basePath, toPath) : basePath).replace(/\\\\/g, '/'); // .replace(/^\\//g, '');\r\n    }\r\n\r\n    private packages = {};\r\n    getPackage(filename?: TaskString): any {\r\n        filename = filename || this.cfg.packageFile;\r\n        let name = this.toRootPath(this.toStr(filename) || 'package.json');\r\n        if (!this.packages[name]) {\r\n            this.packages[name] = require(name);\r\n        }\r\n        return this.packages[name]\r\n    }\r\n\r\n    setup(): Promise<Src[]> {\r\n        if (this.option.oper && (this.oper & this.option.oper) <= 0) {\r\n            // this.sequence = null;\r\n            return Promise.resolve(null);\r\n        } else {\r\n            return Promise.resolve(this.load())\r\n                .then(tasks => {\r\n                    return Promise.all(this.map(ctx => {\r\n                        return ctx.setup()\r\n                            .then(seq => {\r\n                                return ctx;\r\n                            });\r\n                    }, Mode.children))\r\n                        .then(subtasks => {\r\n                            return {\r\n                                tseq: tasks,\r\n                                subtasks: subtasks\r\n                            }\r\n                        })\r\n\r\n                })\r\n                .then(srcs => {\r\n                    let opt = this.option as IAsserts;\r\n                    let tseq = srcs.tseq;\r\n                    let ordertask = sortOrder(srcs.subtasks, ctx => ctx.option.order, this);\r\n\r\n                    let subseq: Src[] = [];\r\n                    _.each(ordertask, (t, idx) => {\r\n                        if (_.isArray(t)) {\r\n                            if (t.length > 0) {\r\n                                let ptasks = _.filter(_.map(t, it => this.zipSequence(<Src[]>it.getRunSequence())), it => !!it);\r\n                                if (ptasks.length > 0) {\r\n                                    subseq.push(ptasks);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let tk = this.zipSequence(t.getRunSequence());\r\n                            tk && subseq.push(tk);\r\n                        }\r\n                    });\r\n\r\n                    // let children = this.zipSequence(subseq, (name, runway) => this.subTaskName(name, (runway === RunWay.sequence ? '-sub-seq' : '-sub-paral')));\r\n                    subseq = this.flattenSequence(subseq);\r\n                    tseq = this.flattenSequence(tseq);\r\n                    if (tseq.length > 0) {\r\n                        tseq = opt.runWay === RunWay.parallel ? [this.flattenSequence(tseq)] : this.flattenSequence(tseq);\r\n                        if (subseq && subseq.length > 0) {\r\n                            if (opt.nodeSequence === NodeSequence.after) {\r\n                                tseq.splice(0, 0, ...subseq);\r\n                            } else {\r\n                                tseq.push(...subseq);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        tseq = subseq;\r\n                    }\r\n\r\n                    this.sequence = tseq;\r\n                    return this.sequence;\r\n                });\r\n        }\r\n    }\r\n\r\n    getRunSequence(): Src[] {\r\n        return this.sequence || [];\r\n    }\r\n\r\n    load(): Src[] | Promise<Src[]> {\r\n        if (!this.builder.isBuilt(this)) {\r\n            return Promise.resolve(this.builder.build(this))\r\n                .then(ctx => {\r\n                    return this.toSequence(this.taskseq);\r\n                });\r\n        } else {\r\n            return this.toSequence(this.taskseq);\r\n        }\r\n    }\r\n\r\n    addTask(...task: ITask[]) {\r\n        this.taskseq.push(...task);\r\n    }\r\n\r\n    removeTask(task: ITask): ITask[] | Promise<ITask[]> {\r\n        let idx = this.taskseq.indexOf(task);\r\n        if (idx >= 0 && idx < this.taskseq.length) {\r\n            return this.taskseq.splice(idx, 1);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     *run task in this context.\r\n     *\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    run(): Promise<any> {\r\n        if (this.env.help) {\r\n            return Promise.resolve(this.help())\r\n        } else {\r\n            // if (!this.builder.isBuilt(this)) {\r\n            //     this.builder.build(this);\r\n            // }\r\n            return this.setup()\r\n                .then(tseq => {\r\n                    let opt = this.option as IAsserts;\r\n                    if (opt.runWay === RunWay.parallel) {\r\n                        return this.runSequence([this.flattenSequence(tseq)]);\r\n                    } else {\r\n                        return this.runSequence(tseq);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    help() {\r\n        this.cfg.printHelp && this.cfg.printHelp(_.isBoolean(this.env.help) ? '' : this.env.help);\r\n    }\r\n\r\n    tasks(express?: (item: ITask) => boolean): ITask[] {\r\n        return express ? _.filter(this.taskseq, express) : this.taskseq;\r\n    }\r\n\r\n    registerTasks(express?: (item: ITask) => boolean): ITask[] {\r\n        let tasks = [];\r\n        this.each(c => {\r\n            tasks = tasks.concat(c.tasks(express));\r\n        });\r\n        return tasks;\r\n    }\r\n\r\n    globalTasks(): string[] {\r\n        return _.keys(this.globals.tasks || {});\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *get current env Operation.\r\n *\r\n *@export\r\n *@param {EnvOption} env\r\n *@returns\r\n */\r\nfunction currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy | Operation.release;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n/**\r\n *get assert source.\r\n *\r\n *@param {IAssertDist} assert\r\n *@param {Operation} oper\r\n *@returns\r\n */\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n *get dist.\r\n *\r\n *@param {IAssertDist} ds\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, ctx: ITaskContext) {\r\n    let dist: string;\r\n    let env = ctx.env;\r\n    let oper = ctx.oper;\r\n    if (env.deploy || (oper & Operation.deploy) > 0) {\r\n        dist = taskStringVal(ds.deployDist, ctx);\r\n    }\r\n    if (!dist && (env.release || (oper & Operation.release) > 0)) {\r\n        dist = taskStringVal(ds.releaseDist, ctx);\r\n    }\r\n    if (!dist && (env.e2e || (oper & Operation.e2e) > 0)) {\r\n        dist = taskStringVal(ds.e2eDist, ctx);\r\n    }\r\n    if (!dist && (env.test || (oper & Operation.test) > 0)) {\r\n        dist = taskStringVal(ds.testDist, ctx);\r\n    }\r\n    if (!dist && ((oper & Operation.build) > 0)) {\r\n        dist = taskStringVal(ds.buildDist, ctx);\r\n    }\r\n    if (!dist) {\r\n        dist = taskStringVal(ds.dist, ctx);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n/**\r\n *filter fileName in directory.\r\n *\r\n *@export\r\n *@param {string} directory\r\n *@param {((fileName: string) => boolean)} [express]\r\n *@returns {string[]}\r\n */\r\nfunction files(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n    return Promise.resolve(globby(express))\r\n        .then((files: string[]) => {\r\n            if (filter) {\r\n                files = _.filter(files, filter)\r\n            }\r\n            if (mapping) {\r\n                files = _.map(files, mapping);\r\n            }\r\n            return files;\r\n        })\r\n}\r\n\r\n/**\r\n *task src, string or array string.\r\n *\r\n *@export\r\n *@param {TaskSource} src\r\n *@param {Operation} oper runtime Operation\r\n *@param {IEnvOption} [env]\r\n *@returns\r\n */\r\nfunction taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n *task string.\r\n *\r\n *@export\r\n *@param {TaskString} name\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n"]}