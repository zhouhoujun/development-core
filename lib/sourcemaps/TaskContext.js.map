{"version":3,"sources":["TaskContext.ts"],"names":["bindingConfig","cfg","parent","createContext","opt","option","TaskContext","currentOperation","env","oper","deploy","TaskConfig_1","Operation","release","build","watch","test","serve","e2e","getAssertSrc","assert","src","testSrc","e2eSrc","watchSrc","clean","cleanSrc","dist","getCurrentDist","ds","ctx","taskStringVal","deployDist","releaseDist","e2eDist","testDist","buildDist","files","express","filter","mapping","Promise","resolve","globby","then","_","map","taskSourceVal","isFunction","name","require","gulp","minimist","generateTask_1","taskSequence_1","utils_1","findTasks_1","path","fs","exports","NULLBuilder","node","isBuilt","globals","this","taskseq","sequence","children","packages","add","pcfg","omit","getConfig","createEnv","setConfig","Object","defineProperty","prototype","_gulp","_builder","builder","process","argv","slice","string","default","NODE_ENV","setEnvViaOperate","extend","context","push","isUndefined","remove","items","each","i","isTask","obj","find","mode","item","isFinded","contexts","Mode","traverse","r","route","eachChildren","trans","arr","matchCompare","task","match","getSrc","relative","c","absoluteSrc","root","getDist","absolutePath","subTaskName","ext","isString","optName","indexOf","findTasks","module","findTasksInModule","findTasksInDir","dirs","to","findTaskDefine","findTaskDefineInModule","findTaskDefineInDir","fileFilter","toSequence","tasks","zipName","runSequence","runTaskSequence","zipSequence","flattenSequence","generateTask","gtask","concat","addToSequence","getRootPath","_this","getRootFolders","getFolders","pathstr","dir","readdirSync","folders","d","sf","join","f","lstatSync","isDirectory","fl","getDistFolders","toRootSrc","toRootPath","toDistSrc","toDistPath","setting","toSrc","source","toStr","toUrl","basePath","toPath","replace","getPackage","filename","packageFile","setup","setupTasks","all","seq","subtasks","tseq","srcs","ordertask","sortOrder","order","subseq","t","idx","isArray","length","ptasks","it","getRunSequence","tk","runWay","RunWay","parallel","nodeSequence","NodeSequence","after","splice","apply","addTask","_i","arguments","_a","removeTask","run","help","printHelp","isBoolean","registerTasks","globalTasks","keys"],"mappings":"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","file":"../TaskContext.js","sourcesContent":["import *as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport *as gulp from 'gulp';\r\nimport * as minimist from 'minimist';\r\nimport {\r\n    ITask, IAssertDist, IEnvOption, Operation, ITaskContext, ITaskDefine, IDynamicTaskOption, Builder\r\n    , IAssertOption, NodeSequence, RunWay, ZipTaskName, Express, Mode, ITaskConfig, ITaskInfo, Src, TaskSource, IAsserts, TaskString, folderCallback\r\n} from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { toSequence, runSequence, addToSequence, zipSequence, flattenSequence, runTaskSequence } from './taskSequence';\r\nimport { sortOrder, matchCompare, absoluteSrc, absolutePath } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './findTasks';\r\nimport *as path from 'path';\r\nimport *as fs from 'fs';\r\nconst globby = require('globby');\r\n\r\n/**\r\n *binding Config, create task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    return createContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *create Task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig | IAssertOption} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function createContext(cfg: ITaskConfig | IAssertOption, parent?: ITaskContext): ITaskContext {\r\n    let opt: ITaskConfig = (cfg && cfg['option']) ? (cfg as ITaskConfig) : ({ option: cfg } as ITaskConfig);\r\n    if (opt.createContext) {\r\n        return opt.createContext(cfg, parent);\r\n    }\r\n    return new TaskContext(opt, parent);\r\n}\r\n\r\nconst NULLBuilder = <Builder>{\r\n    build<T extends IAsserts>(node: ITaskContext, option?: T): ITaskContext {\r\n        return node;\r\n    },\r\n\r\n    // buildChildren<T extends IAsserts>(node: ITaskContext, option?: T): ITaskContext {\r\n    //     return node;\r\n    // },\r\n\r\n    isBuilt(node: ITaskContext): boolean {\r\n        return false;\r\n    },\r\n\r\n    clean(node: ITaskContext) {\r\n\r\n    }\r\n}\r\n/**\r\n *global data.\r\n */\r\nlet globals = {};\r\n\r\n/**\r\n *TaskContext\r\n *\r\n *@export\r\n *@class TaskContext\r\n *@implements {ITaskContext}\r\n */\r\nexport class TaskContext implements ITaskContext {\r\n    protected cfg: ITaskConfig;\r\n    protected taskseq: ITask[] = [];\r\n\r\n    protected sequence: Src[] = [];\r\n    protected children: ITaskContext[] = [];\r\n\r\n    oper: Operation;\r\n    option: IAsserts;\r\n    env: IEnvOption;\r\n    globals: any;\r\n\r\n    constructor(cfg: ITaskConfig, public parent?: ITaskContext) {\r\n        if (parent) {\r\n            parent.add(this);\r\n            let pcfg: ITaskConfig = _.omit(parent.getConfig(), 'option');\r\n            pcfg.env = pcfg.env || this.createEnv();\r\n            this.setConfig(pcfg);\r\n        } else {\r\n            cfg = cfg || {};\r\n            cfg.env = cfg.env || this.createEnv();\r\n        }\r\n        this.setConfig(cfg);\r\n    }\r\n\r\n    private _gulp: Gulp;\r\n    get gulp() {\r\n        return this._gulp || gulp;\r\n    }\r\n    set gulp(gulp: Gulp) {\r\n        this._gulp = gulp;\r\n    }\r\n\r\n    protected _builder: Builder;\r\n    get builder(): Builder {\r\n        return this._builder || NULLBuilder;\r\n    }\r\n\r\n    set builder(builder: Builder) {\r\n        this._builder = builder;\r\n    }\r\n\r\n    protected createEnv(): IEnvOption {\r\n        let env: IEnvOption = minimist(process.argv.slice(2), {\r\n            string: 'env',\r\n            default: { env: process.env.NODE_ENV || 'development' }\r\n        }) as IEnvOption;\r\n        return env;\r\n    }\r\n\r\n    protected setEnvViaOperate(oper: Operation) {\r\n        this.env = this.env || {};\r\n        if ((oper & Operation.deploy) > 0) {\r\n            this.env.deploy = true;\r\n            this.env.release = false;\r\n        } else if ((oper & Operation.release) > 0) {\r\n            this.env.release = true;\r\n            this.env.deploy = false;\r\n            oper = Operation.release;\r\n        }\r\n\r\n        if ((oper & Operation.watch) > 0) {\r\n            this.env.watch = true;\r\n        }\r\n\r\n        if ((oper & Operation.test) > 0) {\r\n            this.env.test = true;\r\n        }\r\n\r\n        if ((oper & Operation.serve) > 0) {\r\n            this.env.serve = true;\r\n        }\r\n\r\n        if ((oper & Operation.e2e) > 0) {\r\n            this.env.e2e = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *load config\r\n     *\r\n     *@param {ITaskConfig} cfg\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    setConfig(cfg: ITaskConfig) {\r\n        if (!cfg) {\r\n            return;\r\n        }\r\n        if (cfg.env) {\r\n            this.env = cfg.env = _.extend({}, this.env || {}, cfg.env);\r\n            this.oper = currentOperation(this.env);\r\n        }\r\n        if (cfg.oper) {\r\n            this.oper = cfg.oper;\r\n            this.setEnvViaOperate(this.oper);\r\n        }\r\n        this.globals = cfg.globals || globals;\r\n        if (cfg.option) {\r\n            this.option = cfg.option = _.extend({}, this.option || {}, cfg.option);\r\n            // this.builder.clean(this);\r\n        }\r\n        this.cfg = _.extend(this.cfg, cfg);\r\n    }\r\n\r\n    /**\r\n     *get config.\r\n     *\r\n     *@returns {ITaskConfig}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    getConfig(): ITaskConfig {\r\n        return this.cfg || {};\r\n    }\r\n\r\n    /**\r\n     *add sub ITaskContext\r\n     *\r\n     *@param {ITaskContext} context\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    add(context: ITaskContext | ITaskConfig): void {\r\n        let ctx: ITaskContext;\r\n        if (context instanceof TaskContext) {\r\n            ctx = context;\r\n        } else {\r\n            ctx = this.createContext(context, null);\r\n        }\r\n        ctx.parent = this;\r\n        if (!ctx.builder.isBuilt(ctx)) {\r\n            ctx.builder.build(ctx);\r\n        }\r\n        this.children.push(ctx);\r\n    }\r\n\r\n    /**\r\n     * create new context;\r\n     *\r\n     * @param {ITaskConfig | IAssertOption} cfg\r\n     * @param {ITaskContext} [parent] default current context.\r\n     * @returns {ITaskContext}\r\n     * @memberof TaskContext\r\n     */\r\n    createContext(cfg: ITaskConfig | IAssertOption, parent?: ITaskContext): ITaskContext {\r\n        return createContext(cfg, _.isUndefined(parent) ? this : parent);\r\n    }\r\n    /**\r\n     *remove sub ITaskContext.\r\n     *\r\n     *@param {ITaskContext} [context]\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    remove(context?: ITaskContext): ITaskContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * is task class.\r\n     *\r\n     * @param {any} obj\r\n     * @returns {boolean}\r\n     * @memberof TaskContext\r\n     */\r\n    isTask(obj: any): boolean {\r\n        if (!obj) {\r\n            return false;\r\n        }\r\n        if (!_.isFunction(obj)) {\r\n            return false;\r\n        }\r\n        return obj['__task'] || obj['__dynamictask']\r\n    }\r\n\r\n\r\n    /**\r\n     *find sub context via express.\r\n     *\r\n     *@template T\r\n     *@param {(T | Express<T, boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {T}\r\n     *@memberof TaskContext\r\n     */\r\n    find<T extends ITaskContext>(express: T | Express<T, boolean>, mode?: Mode): T {\r\n        let context: ITaskContext;\r\n        this.each<T>(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<ITaskContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context as T;\r\n    }\r\n\r\n    /**\r\n     *filter items.\r\n     *\r\n     *@template T\r\n     *@param {(Express<T, void | boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {ITaskContext[]}\r\n     *@memberof TaskContext\r\n     */\r\n    filter<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode): T[] {\r\n        let contexts: ITaskContext[] = [];\r\n        this.each<T>(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts as T[];\r\n    }\r\n    /**\r\n     *find parent context via express.\r\n     *\r\n     *@param {(ITaskContext | Express<ITaskContext, boolean>)} express\r\n     *@param {Mode} [mode] {enum:['route','children', traverse']} default traverse.\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    each<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode) {\r\n        mode = mode || Mode.traverse;\r\n        let r;\r\n        switch (mode) {\r\n            case Mode.route:\r\n                r = this.route(express);\r\n                break;\r\n            case Mode.children:\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case Mode.traverse:\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * map context.\r\n     *\r\n     *@template T\r\n     *@param {Express<ITaskContext, T>} express\r\n     *@param {Mode} [mode]\r\n     *@param {Express<ITaskContext, boolean>} [filter]\r\n     *@returns {T[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    map<T>(express: Express<ITaskContext, T>, mode?: Mode, filter?: Express<ITaskContext, boolean>): T[] {\r\n        let arr: T[] = []\r\n        this.each((ctx) => {\r\n            if (filter) {\r\n                if (filter(ctx)) {\r\n                    arr.push(express(ctx));\r\n                }\r\n            } else {\r\n                arr.push(express(ctx));\r\n            }\r\n        }, mode);\r\n        return arr;\r\n    }\r\n\r\n    eachChildren(express: Express<ITaskContext, void | boolean>) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *do express work in routing.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    route(express: Express<ITaskContext, void | boolean>) {\r\n        if (!express(this)) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent.route) {\r\n            return this.parent.route(express);\r\n        }\r\n    }\r\n    /**\r\n     *translate all sub context to do express work.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    trans(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean {\r\n        if (this.option.match) {\r\n            return this.option.match(task, match);\r\n        }\r\n        return matchCompare(task, match);\r\n    }\r\n\r\n    getSrc(task?: ITaskInfo, relative = false): Src {\r\n        let src: Src;\r\n        let ctx = this;\r\n        let oper = task ? (task.oper || ctx.oper) : ctx.oper;\r\n        if (task && task.assert) {\r\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx)\r\n        }\r\n\r\n        if (!src) {\r\n            this.route(c => {\r\n                src = taskSourceVal(getAssertSrc(c.option, oper), c);\r\n                if (src) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return (relative !== false) ? src : absoluteSrc(ctx.env.root, src);\r\n    }\r\n\r\n    getDist(task?: ITaskInfo, relative = false): string {\r\n        let dist: string;\r\n        let ctx = this;\r\n        // let oper = task ? (task.oper || context.oper) : context.oper;\r\n        if (task && task.assert) {\r\n            dist = getCurrentDist(task.assert, ctx);\r\n        }\r\n        if (!dist) {\r\n            this.route(c => {\r\n                dist = getCurrentDist(c.option, c);\r\n                if (dist) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        return (relative !== false) ? dist : absolutePath(ctx.env.root, dist);\r\n    }\r\n\r\n    subTaskName(task, ext = '') {\r\n        let ctx = this;\r\n        let name = '';\r\n        // let oper = context.oper;\r\n        if (_.isString(task)) {\r\n            name = task;\r\n        } else if (task && task !== ctx.option) {\r\n            // oper = task.oper || context.oper;\r\n            if (task.name) {\r\n                name = taskStringVal(task.name, ctx)\r\n            }\r\n            if (!name && task.assert && task.assert.name) {\r\n                name = taskStringVal(task.assert.name, ctx)\r\n            }\r\n        }\r\n        let optName: string;\r\n        this.route(c => {\r\n            optName = taskStringVal(c.option.name, c);\r\n            if (optName) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })\r\n\r\n        if (optName) {\r\n            if (name.indexOf(optName + '-') === 0) {\r\n                return name;\r\n            }\r\n            // avoid soma name.\r\n            if (name && optName !== name) {\r\n                return `${optName}-${name}` + ext;\r\n            }\r\n            return optName + ext;\r\n        } else {\r\n            return name + ext;\r\n        }\r\n    }\r\n\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInModule(module, _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTasksInDir(dirs: TaskSource, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInDir(ctx.to(dirs), _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine> {\r\n        return findTaskDefineInModule(module);\r\n    }\r\n\r\n    findTaskDefineInDir(dirs: TaskSource): Promise<ITaskDefine> {\r\n        return findTaskDefineInDir(this.to(dirs));\r\n    }\r\n\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n        return files(express, filter, mapping);\r\n    }\r\n\r\n\r\n    /**\r\n     *to Sequence.\r\n     *\r\n     *@param {ITask[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    toSequence(tasks: ITask[], zipName?: ZipTaskName): Src[] {\r\n        return toSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *filter file in directory.  default implement in bindingConfig.\r\n     *\r\n     *@param {Gulp} gulp\r\n     *@param {Src[]} tasks\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    runSequence(tasks: Src[]): Promise<any> {\r\n        return runSequence(this.gulp, tasks);\r\n    }\r\n\r\n    /**\r\n     *run task sequence in this context.\r\n     *\r\n     *@param {(ITask[] | Promise<ITask[]>)} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    runTaskSequence(tasks: ITask[] | Promise<ITask[]>, zipName?: ZipTaskName): Promise<any> {\r\n        return runTaskSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *zip task sequence.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    zipSequence(tasks: Src[], zipName?: ZipTaskName): string {\r\n        return zipSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *flattenSequence in this context.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string[]}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    flattenSequence(tasks: Src[], zipName?: ZipTaskName): string[] {\r\n        return flattenSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n\r\n    /**\r\n     *dynamic generate tasks.  default implement in bindingConfig.\r\n     *\r\n     *@param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     *@param {ITaskInfo} [match]\r\n     *@returns {ITask[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n        let ctx = this;\r\n        let gtask = generateTask(tasks, _.extend({ oper: ctx.oper }, match || {}), this);\r\n        this.taskseq = this.taskseq.concat(gtask);\r\n        return this.taskseq;\r\n    }\r\n\r\n    /**\r\n     *add task result to task sequence. default implement in bindingConfig.\r\n     *\r\n     *@param {Src[]} sequence  task sequence.\r\n     *@param {ITaskInfo} task\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[] {\r\n        if (this.cfg.addToSequence) {\r\n            return this.cfg.addToSequence(sequence, task);\r\n        }\r\n        return addToSequence(sequence, task, this);\r\n    }\r\n\r\n    getRootPath() {\r\n        let root: string;\r\n        if (this.env && this.env.root) {\r\n            root = this.env.root\r\n        } else {\r\n            this.route(c => {\r\n                if (c.env && c.env.root) {\r\n                    root = this.env.root;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return root;\r\n    }\r\n\r\n    getRootFolders(express?: folderCallback): string[] {\r\n        return this.getFolders(this.getRootPath(), express);\r\n    }\r\n\r\n    getFolders(pathstr: string, express?: folderCallback): string[] {\r\n        let dir = fs.readdirSync(pathstr);\r\n        let folders = [];\r\n        _.each(dir, (d: string) => {\r\n            let sf = path.join(pathstr, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                if (express) {\r\n                    let fl = express(sf, d, this);\r\n                    if (fl) {\r\n                        folders.push(fl);\r\n                    }\r\n                } else {\r\n                    folders.push(sf);\r\n                }\r\n            }\r\n        });\r\n        return folders;\r\n    }\r\n\r\n    getDistFolders(express?: folderCallback, task?: ITaskInfo): string[] {\r\n        return this.getFolders(this.getDist(task), express);\r\n    }\r\n\r\n    toRootSrc(src: Src): Src {\r\n        return absoluteSrc(this.getRootPath(), src);\r\n    }\r\n\r\n    toRootPath(pathstr: string): string {\r\n        return absolutePath(this.getRootPath(), pathstr);\r\n    }\r\n\r\n    toDistSrc(src: Src, task?: ITaskInfo): Src {\r\n        return absoluteSrc(this.getDist(task), src);\r\n    }\r\n\r\n    toDistPath(pathstr: string, task?: ITaskInfo): string {\r\n        return absolutePath(this.getDist(task), pathstr);\r\n    }\r\n\r\n    to<T>(setting: T | ((ctx: ITaskContext) => T)): T {\r\n        return _.isFunction(setting) ? setting(this) : setting;\r\n    }\r\n\r\n    toSrc(source: TaskSource): Src {\r\n        return taskSourceVal(source, this);\r\n    }\r\n\r\n    toStr(name: TaskString): string {\r\n        return taskStringVal(name, this);\r\n    }\r\n\r\n    toUrl(basePath: string, toPath?: string): string {\r\n        return (toPath ? path.relative(basePath, toPath) : basePath).replace(/\\\\/g, '/'); // .replace(/^\\//g, '');\r\n    }\r\n\r\n    private packages = {};\r\n    getPackage(filename?: TaskString): any {\r\n        filename = filename || this.cfg.packageFile;\r\n        let name = this.toRootPath(this.toStr(filename) || 'package.json');\r\n        if (!this.packages[name]) {\r\n            this.packages[name] = require(name);\r\n        }\r\n        return this.packages[name]\r\n    }\r\n\r\n    setup(): Promise<Src[]> {\r\n        if (this.option.oper && (this.oper & this.option.oper) <= 0) {\r\n            this.sequence = null;\r\n            return Promise.resolve(this.sequence);\r\n        } else {\r\n            return Promise.resolve(this.setupTasks())\r\n                .then(tasks => {\r\n                    if (!this.builder.isBuilt(this)) {\r\n                        this.builder.build(this);\r\n                    }\r\n                    return Promise.all(this.map(ctx => {\r\n                        return ctx.setup()\r\n                            .then(seq => {\r\n                                return ctx;\r\n                            });\r\n                    }, Mode.children))\r\n                        .then(subtasks => {\r\n                            return {\r\n                                tseq: tasks,\r\n                                subtasks: subtasks\r\n                            }\r\n                        })\r\n\r\n                })\r\n                .then(srcs => {\r\n                    let opt = this.option as IAsserts;\r\n                    let tseq = srcs.tseq;\r\n                    let ordertask = sortOrder(srcs.subtasks, ctx => ctx.option.order, this);\r\n\r\n                    let subseq: Src[] = [];\r\n                    _.each(ordertask, (t, idx) => {\r\n                        if (_.isArray(t)) {\r\n                            if (t.length > 0) {\r\n                                let ptasks = _.filter(_.map(t, it => this.zipSequence(<Src[]>it.getRunSequence())), it => !!it);\r\n                                if (ptasks.length > 0) {\r\n                                    subseq.push(ptasks);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let tk = this.zipSequence(t.getRunSequence());\r\n                            tk && subseq.push(tk);\r\n                        }\r\n                    });\r\n\r\n                    // let children = this.zipSequence(subseq, (name, runway) => this.subTaskName(name, (runway === RunWay.sequence ? '-sub-seq' : '-sub-paral')));\r\n                    subseq = this.flattenSequence(subseq);\r\n                    tseq = this.flattenSequence(tseq);\r\n                    if (tseq.length > 0) {\r\n                        tseq = opt.runWay === RunWay.parallel ? [this.flattenSequence(tseq)] : this.flattenSequence(tseq);\r\n                        if (subseq && subseq.length > 0) {\r\n                            if (opt.nodeSequence === NodeSequence.after) {\r\n                                tseq.splice(0, 0, ...subseq);\r\n                            } else {\r\n                                tseq.push(...subseq);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        tseq = subseq;\r\n                    }\r\n\r\n                    this.sequence = tseq;\r\n                    return this.sequence;\r\n                });\r\n        }\r\n    }\r\n\r\n    getRunSequence(): Src[] {\r\n        return this.sequence || [];\r\n    }\r\n\r\n    setupTasks(): Src[] | Promise<Src[]> {\r\n        return this.toSequence(this.taskseq);\r\n    }\r\n\r\n    addTask(...task: ITask[]) {\r\n        this.taskseq.push(...task);\r\n    }\r\n\r\n    removeTask(task: ITask): ITask[] | Promise<ITask[]> {\r\n        let idx = this.taskseq.indexOf(task);\r\n        if (idx >= 0 && idx < this.taskseq.length) {\r\n            return this.taskseq.splice(idx, 1);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     *run task in this context.\r\n     *\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    run(): Promise<any> {\r\n        if (this.env.help) {\r\n            return Promise.resolve(this.help())\r\n        } else {\r\n            // if (!this.builder.isBuilt(this)) {\r\n            //     this.builder.build(this);\r\n            // }\r\n            return this.setup()\r\n                .then(tseq => {\r\n                    let opt = this.option as IAsserts;\r\n                    if (opt.runWay === RunWay.parallel) {\r\n                        return this.runSequence([this.flattenSequence(tseq)]);\r\n                    } else {\r\n                        return this.runSequence(tseq);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    help() {\r\n        this.cfg.printHelp && this.cfg.printHelp(_.isBoolean(this.env.help) ? '' : this.env.help);\r\n    }\r\n\r\n    tasks(express?: (item: ITask) => boolean): ITask[] {\r\n        return express ? _.filter(this.taskseq, express) : this.taskseq;\r\n    }\r\n\r\n    registerTasks(express?: (item: ITask) => boolean): ITask[] {\r\n        let tasks = [];\r\n        this.each(c => {\r\n            tasks = tasks.concat(c.tasks(express));\r\n        });\r\n        return tasks;\r\n    }\r\n\r\n    globalTasks(): string[] {\r\n        return _.keys(this.globals.tasks || {});\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *get current env Operation.\r\n *\r\n *@export\r\n *@param {EnvOption} env\r\n *@returns\r\n */\r\nfunction currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy | Operation.release;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n/**\r\n *get assert source.\r\n *\r\n *@param {IAssertDist} assert\r\n *@param {Operation} oper\r\n *@returns\r\n */\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n *get dist.\r\n *\r\n *@param {IAssertDist} ds\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, ctx: ITaskContext) {\r\n    let dist: string;\r\n    let env = ctx.env;\r\n    let oper = ctx.oper;\r\n    if (env.deploy || (oper & Operation.deploy) > 0) {\r\n        dist = taskStringVal(ds.deployDist, ctx);\r\n    }\r\n    if (!dist && (env.release || (oper & Operation.release) > 0)) {\r\n        dist = taskStringVal(ds.releaseDist, ctx);\r\n    }\r\n    if (!dist && (env.e2e || (oper & Operation.e2e) > 0)) {\r\n        dist = taskStringVal(ds.e2eDist, ctx);\r\n    }\r\n    if (!dist && (env.test || (oper & Operation.test) > 0)) {\r\n        dist = taskStringVal(ds.testDist, ctx);\r\n    }\r\n    if (!dist && ((oper & Operation.build) > 0)) {\r\n        dist = taskStringVal(ds.buildDist, ctx);\r\n    }\r\n    if (!dist) {\r\n        dist = taskStringVal(ds.dist, ctx);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n/**\r\n *filter fileName in directory.\r\n *\r\n *@export\r\n *@param {string} directory\r\n *@param {((fileName: string) => boolean)} [express]\r\n *@returns {string[]}\r\n */\r\nfunction files(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n    return Promise.resolve(globby(express))\r\n        .then((files: string[]) => {\r\n            if (filter) {\r\n                files = _.filter(files, filter)\r\n            }\r\n            if (mapping) {\r\n                files = _.map(files, mapping);\r\n            }\r\n            return files;\r\n        })\r\n}\r\n\r\n/**\r\n *task src, string or array string.\r\n *\r\n *@export\r\n *@param {TaskSource} src\r\n *@param {Operation} oper runtime Operation\r\n *@param {IEnvOption} [env]\r\n *@returns\r\n */\r\nfunction taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n *task string.\r\n *\r\n *@export\r\n *@param {TaskString} name\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n"]}