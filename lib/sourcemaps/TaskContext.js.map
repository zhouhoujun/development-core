{"version":3,"sources":["TaskContext.ts"],"names":["bindingConfig","cfg","parent","createContext","TaskContext","currentOperation","env","oper","deploy","TaskConfig_1","Operation","release","build","watch","test","serve","e2e","getAssertSrc","assert","src","testSrc","e2eSrc","watchSrc","clean","cleanSrc","dist","getCurrentDist","ds","ctx","taskStringVal","deployDist","releaseDist","e2eDist","testDist","buildDist","files","express","filter","mapping","Promise","resolve","globby","then","_","map","taskSourceVal","isFunction","name","require","gulp","minimist","generateTask_1","taskSequence_1","utils_1","findTasks_1","path","fs","exports","globals","this","taskseq","sequence","children","packages","add","pcfg","omit","getConfig","createEnv","setConfig","Object","defineProperty","prototype","_gulp","process","argv","slice","string","default","NODE_ENV","setEnvViaOperate","extend","option","context","push","remove","items","each","i","find","mode","item","isFinded","contexts","Mode","traverse","r","route","eachChildren","trans","arr","matchCompare","task","match","getSrc","relative","c","absoluteSrc","root","getDist","absolutePath","subTaskName","ext","isString","optName","indexOf","findTasks","module","findTasksInModule","findTasksInDir","dirs","to","findTaskDefine","findTaskDefineInModule","findTaskDefineInDir","fileFilter","toSequence","tasks","zipName","runSequence","runTaskSequence","zipSequence","flattenSequence","generateTask","gtask","concat","addToSequence","getRootPath","_this","getRootFolders","getFolders","pathstr","dir","readdirSync","folders","d","sf","join","f","lstatSync","isDirectory","fl","getDistFolders","toRootSrc","toRootPath","toDistSrc","toDistPath","setting","toSrc","source","toStr","toUrl","basePath","toPath","replace","getPackage","filename","packageFile","setup","all","setupTasks","seq","srcs","opt","tseq","shift","ordertask","sortOrder","order","subseq","t","idx","isArray","length","ptasks","it","getRunSequence","tk","runWay","RunWay","parallel","nodeSequence","NodeSequence","after","splice","apply","addTask","_i","arguments","_a","removeTask","run","help","printHelp","isBoolean","registerTasks","globalTasks","keys"],"mappings":"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","file":"../TaskContext.js","sourcesContent":["import *as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport *as gulp from 'gulp';\r\nimport * as minimist from 'minimist';\r\nimport {\r\n    ITask, IAssertDist, IEnvOption, Operation, ITaskContext, ITaskDefine, IDynamicTaskOption\r\n    , NodeSequence, RunWay, ZipTaskName, Express, Mode, ITaskConfig, ITaskInfo, Src, TaskSource, IAsserts, TaskString, folderCallback\r\n} from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { toSequence, runSequence, addToSequence, zipSequence, flattenSequence, runTaskSequence } from './taskSequence';\r\nimport { sortOrder, matchCompare, absoluteSrc, absolutePath } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './findTasks';\r\nimport *as path from 'path';\r\nimport *as fs from 'fs';\r\nconst globby = require('globby');\r\n\r\n/**\r\n *binding Config, create task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    return createContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *create Task context.\r\n *\r\n *@export\r\n *@param {ITaskConfig} cfg\r\n *@param {ITaskContext} [parent]\r\n *@returns {ITaskContext}\r\n */\r\nexport function createContext(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    if (cfg.createContext) {\r\n        return cfg.createContext(cfg, parent);\r\n    }\r\n    return new TaskContext(cfg, parent);\r\n}\r\n\r\n/**\r\n *global data.\r\n */\r\nlet globals = {};\r\n\r\n/**\r\n *TaskContext\r\n *\r\n *@export\r\n *@class TaskContext\r\n *@implements {ITaskContext}\r\n */\r\nexport class TaskContext implements ITaskContext {\r\n    protected cfg: ITaskConfig;\r\n    protected taskseq: ITask[] = [];\r\n\r\n    protected sequence: Src[] = [];\r\n    protected children: ITaskContext[] = [];\r\n\r\n    oper: Operation;\r\n    option: IAsserts;\r\n    env: IEnvOption;\r\n    globals: any;\r\n\r\n    constructor(cfg: ITaskConfig, public parent?: ITaskContext) {\r\n        if (parent) {\r\n            parent.add(this);\r\n            let pcfg: ITaskConfig = _.omit(parent.getConfig(), 'option');\r\n            pcfg.env = pcfg.env || this.createEnv();\r\n            this.setConfig(pcfg);\r\n        } else {\r\n            cfg = cfg || {};\r\n            cfg.env = cfg.env || this.createEnv();\r\n        }\r\n        this.setConfig(cfg);\r\n    }\r\n\r\n    private _gulp: Gulp;\r\n    get gulp() {\r\n        return this._gulp || gulp;\r\n    }\r\n    set gulp(gulp: Gulp) {\r\n        this._gulp = gulp;\r\n    }\r\n\r\n    protected createEnv(): IEnvOption {\r\n        let env: IEnvOption = minimist(process.argv.slice(2), {\r\n            string: 'env',\r\n            default: { env: process.env.NODE_ENV || 'development' }\r\n        }) as IEnvOption;\r\n        return env;\r\n    }\r\n\r\n    protected setEnvViaOperate(oper: Operation) {\r\n        this.env = this.env || {};\r\n        if ((oper & Operation.deploy) > 0) {\r\n            this.env.deploy = true;\r\n            this.env.release = false;\r\n        } else if ((oper & Operation.release) > 0) {\r\n            this.env.release = true;\r\n            this.env.deploy = false;\r\n            oper = Operation.release;\r\n        }\r\n\r\n        if ((oper & Operation.watch) > 0) {\r\n            this.env.watch = true;\r\n        }\r\n\r\n        if ((oper & Operation.test) > 0) {\r\n            this.env.test = true;\r\n        }\r\n\r\n        if ((oper & Operation.serve) > 0) {\r\n            this.env.serve = true;\r\n        }\r\n\r\n        if ((oper & Operation.e2e) > 0) {\r\n            this.env.e2e = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *load config\r\n     *\r\n     *@param {ITaskConfig} cfg\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    setConfig(cfg: ITaskConfig) {\r\n        if (!cfg) {\r\n            return;\r\n        }\r\n        if (cfg.env) {\r\n            this.env = cfg.env = _.extend({}, this.env || {}, cfg.env);\r\n            this.oper = currentOperation(this.env);\r\n        }\r\n        if (cfg.oper) {\r\n            this.oper = cfg.oper;\r\n            this.setEnvViaOperate(this.oper);\r\n        }\r\n        this.globals = cfg.globals || globals;\r\n        if (cfg.option) {\r\n            this.option = cfg.option = _.extend({}, this.option || {}, cfg.option);\r\n        }\r\n        this.cfg = _.extend(this.cfg, cfg);\r\n    }\r\n\r\n    /**\r\n     *get config.\r\n     *\r\n     *@returns {ITaskConfig}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    getConfig(): ITaskConfig {\r\n        return this.cfg || {};\r\n    }\r\n\r\n    /**\r\n     *add sub ITaskContext\r\n     *\r\n     *@param {ITaskContext} context\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    add(context: ITaskContext): void {\r\n        context.parent = this;\r\n        this.children.push(context);\r\n    }\r\n    /**\r\n     *remove sub ITaskContext.\r\n     *\r\n     *@param {ITaskContext} [context]\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    remove(context?: ITaskContext): ITaskContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n\r\n    /**\r\n     *find sub context via express.\r\n     *\r\n     *@template T\r\n     *@param {(T | Express<T, boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {T}\r\n     *@memberof TaskContext\r\n     */\r\n    find<T extends ITaskContext>(express: T | Express<T, boolean>, mode?: Mode): T {\r\n        let context: ITaskContext;\r\n        this.each<T>(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<ITaskContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context as T;\r\n    }\r\n\r\n    /**\r\n     *filter items.\r\n     *\r\n     *@template T\r\n     *@param {(Express<T, void | boolean>)} express\r\n     *@param {Mode} [mode]\r\n     *@returns {ITaskContext[]}\r\n     *@memberof TaskContext\r\n     */\r\n    filter<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode): T[] {\r\n        let contexts: ITaskContext[] = [];\r\n        this.each<T>(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts as T[];\r\n    }\r\n    /**\r\n     *find parent context via express.\r\n     *\r\n     *@param {(ITaskContext | Express<ITaskContext, boolean>)} express\r\n     *@param {Mode} [mode] {enum:['route','children', traverse']} default traverse.\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    each<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode) {\r\n        mode = mode || Mode.traverse;\r\n        let r;\r\n        switch (mode) {\r\n            case Mode.route:\r\n                r = this.route(express);\r\n                break;\r\n            case Mode.children:\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case Mode.traverse:\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * map context.\r\n     *\r\n     *@template T\r\n     *@param {Express<ITaskContext, T>} express\r\n     *@param {Mode} [mode]\r\n     *@param {Express<ITaskContext, boolean>} [filter]\r\n     *@returns {T[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    map<T>(express: Express<ITaskContext, T>, mode?: Mode, filter?: Express<ITaskContext, boolean>): T[] {\r\n        let arr: T[] = []\r\n        this.each((ctx) => {\r\n            if (filter) {\r\n                if (filter(ctx)) {\r\n                    arr.push(express(ctx));\r\n                }\r\n            } else {\r\n                arr.push(express(ctx));\r\n            }\r\n        }, mode);\r\n        return arr;\r\n    }\r\n\r\n    eachChildren(express: Express<ITaskContext, void | boolean>) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *do express work in routing.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    route(express: Express<ITaskContext, void | boolean>) {\r\n        if (!express(this)) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent.route) {\r\n            return this.parent.route(express);\r\n        }\r\n    }\r\n    /**\r\n     *translate all sub context to do express work.\r\n     *\r\n     *@param {Express<ITaskContext, void | boolean>} express\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    trans(express: Express<ITaskContext, void | boolean>) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean {\r\n        if (this.option.match) {\r\n            return this.option.match(task, match);\r\n        }\r\n        return matchCompare(task, match);\r\n    }\r\n\r\n    getSrc(task?: ITaskInfo, relative = false): Src {\r\n        let src: Src;\r\n        let ctx = this;\r\n        let oper = task ? (task.oper || ctx.oper) : ctx.oper;\r\n        if (task && task.assert) {\r\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx)\r\n        }\r\n\r\n        if (!src) {\r\n            this.route(c => {\r\n                src = taskSourceVal(getAssertSrc(c.option, oper), c);\r\n                if (src) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return (relative !== false) ? src : absoluteSrc(ctx.env.root, src);\r\n    }\r\n\r\n    getDist(task?: ITaskInfo, relative = false): string {\r\n        let dist: string;\r\n        let ctx = this;\r\n        // let oper = task ? (task.oper || context.oper) : context.oper;\r\n        if (task && task.assert) {\r\n            dist = getCurrentDist(task.assert, ctx);\r\n        }\r\n        if (!dist) {\r\n            this.route(c => {\r\n                dist = getCurrentDist(c.option, c);\r\n                if (dist) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        return (relative !== false) ? dist : absolutePath(ctx.env.root, dist);\r\n    }\r\n\r\n    subTaskName(task, ext = '') {\r\n        let ctx = this;\r\n        let name = '';\r\n        // let oper = context.oper;\r\n        if (_.isString(task)) {\r\n            name = task;\r\n        } else if (task && task !== ctx.option) {\r\n            // oper = task.oper || context.oper;\r\n            if (task.name) {\r\n                name = taskStringVal(task.name, ctx)\r\n            }\r\n            if (!name && task.assert && task.assert.name) {\r\n                name = taskStringVal(task.assert.name, ctx)\r\n            }\r\n        }\r\n        let optName: string;\r\n        this.route(c => {\r\n            optName = taskStringVal(c.option.name, c);\r\n            if (optName) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })\r\n\r\n        if (optName) {\r\n            if (name.indexOf(optName + '-') === 0) {\r\n                return name;\r\n            }\r\n            // avoid soma name.\r\n            if (name && optName !== name) {\r\n                return `${optName}-${name}` + ext;\r\n            }\r\n            return optName + ext;\r\n        } else {\r\n            return name + ext;\r\n        }\r\n    }\r\n\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInModule(module, _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTasksInDir(dirs: TaskSource, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInDir(ctx.to(dirs), _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine> {\r\n        return findTaskDefineInModule(module);\r\n    }\r\n\r\n    findTaskDefineInDir(dirs: TaskSource): Promise<ITaskDefine> {\r\n        return findTaskDefineInDir(this.to(dirs));\r\n    }\r\n\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n        return files(express, filter, mapping);\r\n    }\r\n\r\n\r\n    /**\r\n     *to Sequence.\r\n     *\r\n     *@param {ITask[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    toSequence(tasks: ITask[], zipName?: ZipTaskName): Src[] {\r\n        return toSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *filter file in directory.  default implement in bindingConfig.\r\n     *\r\n     *@param {Gulp} gulp\r\n     *@param {Src[]} tasks\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    runSequence(tasks: Src[]): Promise<any> {\r\n        return runSequence(this.gulp, tasks);\r\n    }\r\n\r\n    /**\r\n     *run task sequence in this context.\r\n     *\r\n     *@param {(ITask[] | Promise<ITask[]>)} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    runTaskSequence(tasks: ITask[] | Promise<ITask[]>, zipName?: ZipTaskName): Promise<any> {\r\n        return runTaskSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *zip task sequence.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    zipSequence(tasks: Src[], zipName?: ZipTaskName): string {\r\n        return zipSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n    /**\r\n     *flattenSequence in this context.\r\n     *\r\n     *@param {Src[]} tasks\r\n     *@param {ZipTaskName} [zipName]\r\n     *@returns {string[]}\r\n     *\r\n     *@memberof ITaskContext\r\n     */\r\n    flattenSequence(tasks: Src[], zipName?: ZipTaskName): string[] {\r\n        return flattenSequence(this.gulp, tasks, this, zipName);\r\n    }\r\n\r\n\r\n    /**\r\n     *dynamic generate tasks.  default implement in bindingConfig.\r\n     *\r\n     *@param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     *@param {ITaskInfo} [match]\r\n     *@returns {ITask[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n        let ctx = this;\r\n        let gtask = generateTask(tasks, _.extend({ oper: ctx.oper }, match || {}), this);\r\n        this.taskseq = this.taskseq.concat(gtask);\r\n        return this.taskseq;\r\n    }\r\n\r\n    /**\r\n     *add task result to task sequence. default implement in bindingConfig.\r\n     *\r\n     *@param {Src[]} sequence  task sequence.\r\n     *@param {ITaskInfo} task\r\n     *@returns {Src[]}\r\n     *\r\n     *@memberOf ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[] {\r\n        if (this.cfg.addToSequence) {\r\n            return this.cfg.addToSequence(sequence, task);\r\n        }\r\n        return addToSequence(sequence, task, this);\r\n    }\r\n\r\n    getRootPath() {\r\n        let root: string;\r\n        if (this.env && this.env.root) {\r\n            root = this.env.root\r\n        } else {\r\n            this.route(c => {\r\n                if (c.env && c.env.root) {\r\n                    root = this.env.root;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        return root;\r\n    }\r\n\r\n    getRootFolders(express?: folderCallback): string[] {\r\n        return this.getFolders(this.getRootPath(), express);\r\n    }\r\n\r\n    getFolders(pathstr: string, express?: folderCallback): string[] {\r\n        let dir = fs.readdirSync(pathstr);\r\n        let folders = [];\r\n        _.each(dir, (d: string) => {\r\n            let sf = path.join(pathstr, d);\r\n            let f = fs.lstatSync(sf);\r\n            if (f.isDirectory()) {\r\n                if (express) {\r\n                    let fl = express(sf, d, this);\r\n                    if (fl) {\r\n                        folders.push(fl);\r\n                    }\r\n                } else {\r\n                    folders.push(sf);\r\n                }\r\n            }\r\n        });\r\n        return folders;\r\n    }\r\n\r\n    getDistFolders(express?: folderCallback, task?: ITaskInfo): string[] {\r\n        return this.getFolders(this.getDist(task), express);\r\n    }\r\n\r\n    toRootSrc(src: Src): Src {\r\n        return absoluteSrc(this.getRootPath(), src);\r\n    }\r\n\r\n    toRootPath(pathstr: string): string {\r\n        return absolutePath(this.getRootPath(), pathstr);\r\n    }\r\n\r\n    toDistSrc(src: Src, task?: ITaskInfo): Src {\r\n        return absoluteSrc(this.getDist(task), src);\r\n    }\r\n\r\n    toDistPath(pathstr: string, task?: ITaskInfo): string {\r\n        return absolutePath(this.getDist(task), pathstr);\r\n    }\r\n\r\n    to<T>(setting: T | ((ctx: ITaskContext) => T)): T {\r\n        return _.isFunction(setting) ? setting(this) : setting;\r\n    }\r\n\r\n    toSrc(source: TaskSource): Src {\r\n        return taskSourceVal(source, this);\r\n    }\r\n\r\n    toStr(name: TaskString): string {\r\n        return taskStringVal(name, this);\r\n    }\r\n\r\n    toUrl(basePath: string, toPath?: string): string {\r\n        return (toPath ? path.relative(basePath, toPath) : basePath).replace(/\\\\/g, '/'); // .replace(/^\\//g, '');\r\n    }\r\n\r\n    private packages = {};\r\n    getPackage(filename?: TaskString): any {\r\n        filename = filename || this.cfg.packageFile;\r\n        let name = this.toRootPath(this.toStr(filename) || 'package.json');\r\n        if (!this.packages[name]) {\r\n            this.packages[name] = require(name);\r\n        }\r\n        return this.packages[name]\r\n    }\r\n\r\n    setup(): Promise<Src[]> {\r\n\r\n        if (this.option.oper && (this.oper & this.option.oper) <= 0) {\r\n            this.sequence = null;\r\n            return Promise.resolve(this.sequence);\r\n        } else {\r\n            return Promise.all<any>(\r\n                [\r\n                    this.setupTasks(),\r\n                    ...this.map(ctx => {\r\n                        return ctx.setup()\r\n                            .then(seq => {\r\n                                return ctx;\r\n                            });\r\n                    }, Mode.children)\r\n                ])\r\n                .then(srcs => {\r\n                    let opt = this.option as IAsserts;\r\n                    let tseq = srcs.shift() as Src[];\r\n                    let ordertask = sortOrder(<ITaskContext[]>srcs, ctx => ctx.option.order, this);\r\n\r\n                    let subseq: Src[] = [];\r\n                    _.each(ordertask, (t, idx) => {\r\n                        if (_.isArray(t)) {\r\n                            if (t.length > 0) {\r\n                                let ptasks = _.filter(_.map(t, it => this.zipSequence(<Src[]>it.getRunSequence())), it => !!it);\r\n                                if (ptasks.length > 0) {\r\n                                    subseq.push(ptasks);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let tk = this.zipSequence(t.getRunSequence());\r\n                            tk && subseq.push(tk);\r\n                        }\r\n                    });\r\n\r\n                    // let children = this.zipSequence(subseq, (name, runway) => this.subTaskName(name, (runway === RunWay.sequence ? '-sub-seq' : '-sub-paral')));\r\n                    subseq = this.flattenSequence(subseq);\r\n                    tseq = this.flattenSequence(tseq);\r\n                    if (tseq.length > 0) {\r\n                        tseq = opt.runWay === RunWay.parallel ? [this.flattenSequence(tseq)] : this.flattenSequence(tseq);\r\n                        if (subseq && subseq.length > 0) {\r\n                            if (opt.nodeSequence === NodeSequence.after) {\r\n                                tseq.splice(0, 0, ...subseq);\r\n                            } else {\r\n                                tseq.push(...subseq);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        tseq = subseq;\r\n                    }\r\n\r\n                    this.sequence = tseq;\r\n                    return this.sequence;\r\n                });\r\n        }\r\n    }\r\n\r\n    getRunSequence(): Src[] {\r\n        return this.sequence || [];\r\n    }\r\n\r\n    setupTasks(): Src[] | Promise<Src[]> {\r\n        return this.toSequence(this.taskseq);\r\n    }\r\n\r\n    addTask(...task: ITask[]) {\r\n        this.taskseq.push(...task);\r\n    }\r\n\r\n    removeTask(task: ITask): ITask[] | Promise<ITask[]> {\r\n        let idx = this.taskseq.indexOf(task);\r\n        if (idx >= 0 && idx < this.taskseq.length) {\r\n            return this.taskseq.splice(idx, 1);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     *run task in this context.\r\n     *\r\n     *@returns {Promise<any>}\r\n     *\r\n     *@memberof TaskContext\r\n     */\r\n    run(): Promise<any> {\r\n        if (this.env.help) {\r\n            return Promise.resolve(this.help())\r\n        } else {\r\n            return this.setup()\r\n                .then(tseq => {\r\n                    let opt = this.option as IAsserts;\r\n                    if (opt.runWay === RunWay.parallel) {\r\n                        return this.runSequence([this.flattenSequence(tseq)]);\r\n                    } else {\r\n                        return this.runSequence(tseq);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    help() {\r\n        this.cfg.printHelp && this.cfg.printHelp(_.isBoolean(this.env.help) ? '' : this.env.help);\r\n    }\r\n\r\n    tasks(express?: (item: ITask) => boolean): ITask[] {\r\n        return express ? _.filter(this.taskseq, express) : this.taskseq;\r\n    }\r\n\r\n    registerTasks(express?: (item: ITask) => boolean): ITask[] {\r\n        let tasks = [];\r\n        this.each(c => {\r\n            tasks = tasks.concat(c.tasks(express));\r\n        });\r\n        return tasks;\r\n    }\r\n\r\n    globalTasks(): string[] {\r\n        return _.keys(this.globals.tasks || {});\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *get current env Operation.\r\n *\r\n *@export\r\n *@param {EnvOption} env\r\n *@returns\r\n */\r\nfunction currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy | Operation.release;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n/**\r\n *get assert source.\r\n *\r\n *@param {IAssertDist} assert\r\n *@param {Operation} oper\r\n *@returns\r\n */\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n *get dist.\r\n *\r\n *@param {IAssertDist} ds\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, ctx: ITaskContext) {\r\n    let dist: string;\r\n    let env = ctx.env;\r\n    let oper = ctx.oper;\r\n    if (env.deploy || (oper & Operation.deploy) > 0) {\r\n        dist = taskStringVal(ds.deployDist, ctx);\r\n    }\r\n    if (!dist && (env.release || (oper & Operation.release) > 0)) {\r\n        dist = taskStringVal(ds.releaseDist, ctx);\r\n    }\r\n    if (!dist && (env.e2e || (oper & Operation.e2e) > 0)) {\r\n        dist = taskStringVal(ds.e2eDist, ctx);\r\n    }\r\n    if (!dist && (env.test || (oper & Operation.test) > 0)) {\r\n        dist = taskStringVal(ds.testDist, ctx);\r\n    }\r\n    if (!dist && ((oper & Operation.build) > 0)) {\r\n        dist = taskStringVal(ds.buildDist, ctx);\r\n    }\r\n    if (!dist) {\r\n        dist = taskStringVal(ds.dist, ctx);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n/**\r\n *filter fileName in directory.\r\n *\r\n *@export\r\n *@param {string} directory\r\n *@param {((fileName: string) => boolean)} [express]\r\n *@returns {string[]}\r\n */\r\nfunction files(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n    return Promise.resolve(globby(express))\r\n        .then((files: string[]) => {\r\n            if (filter) {\r\n                files = _.filter(files, filter)\r\n            }\r\n            if (mapping) {\r\n                files = _.map(files, mapping);\r\n            }\r\n            return files;\r\n        })\r\n}\r\n\r\n/**\r\n *task src, string or array string.\r\n *\r\n *@export\r\n *@param {TaskSource} src\r\n *@param {Operation} oper runtime Operation\r\n *@param {IEnvOption} [env]\r\n *@returns\r\n */\r\nfunction taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n *task string.\r\n *\r\n *@export\r\n *@param {TaskString} name\r\n *@param {ITaskContext} ctx\r\n *@returns\r\n */\r\nfunction taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n"]}