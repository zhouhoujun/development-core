{"version":3,"sources":["decorator.js","decorator.ts"],"names":["task","option","target","findTasks","tasks","_","isFunction","decorator","push","isArray","each","sm","concat","keys","key","test","console","log","chalk","grey","cyan","taskdefine","findTaskDefines","defs","findTaskDefine","def","findTaskDefineInModule","md","tsdef","isString","require","err","Promise","reject","resolve","findTasksInModule","mdls","findTaskDefineInDir","dirs","race","map","dir","fs_1","existsSync","mdl","requireDir","findTasksInDir","all","recurse","then","flatten","exports"],"mappings":"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","file":"../decorator.js","sourcesContent":["\"use strict\";\nrequire('reflect-metadata');\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst fs_1 = require('fs');\nconst requireDir = require('require-dir');\nfunction task(option) {\n    return (target) => {\n        target['__task'] = option || {};\n        return target;\n    };\n}\nexports.task = task;\nfunction findTasks(target) {\n    let tasks = [];\n    if (!target) {\n        return tasks;\n    }\n    if (_.isFunction(target)) {\n        if (target['__task']) {\n            let task = new target();\n            task.decorator = target['__task'];\n            tasks.push(task);\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            tasks.concat(findTasks(sm));\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return;\n            }\n            console.log(chalk.grey('find task from :'), chalk.cyan(key));\n            tasks = tasks.concat(findTasks(target[key]));\n        });\n    }\n    return tasks;\n}\nexports.findTasks = findTasks;\nfunction taskdefine() {\n    return (target) => {\n        target['__taskdefine'] = true;\n        return target;\n    };\n}\nexports.taskdefine = taskdefine;\nfunction findTaskDefines(target) {\n    let defs = [];\n    if (!target) {\n        return defs;\n    }\n    if (_.isFunction(target)) {\n        if (target['__taskdefine']) {\n            defs.push(new target());\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            defs.concat(findTaskDefines(sm));\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return;\n            }\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\n            defs = defs.concat(findTaskDefines(target[key]));\n        });\n    }\n    return defs;\n}\nexports.findTaskDefines = findTaskDefines;\nfunction findTaskDefine(target) {\n    let def;\n    if (!target) {\n        return null;\n    }\n    if (_.isFunction(target)) {\n        if (target['__taskdefine']) {\n            def = new target();\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            if (def) {\n                return false;\n            }\n            def = findTaskDefine(sm);\n            return true;\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (def) {\n                return false;\n            }\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return true;\n            }\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\n            def = findTaskDefine(target[key]);\n            return true;\n        });\n    }\n    return def;\n}\nexports.findTaskDefine = findTaskDefine;\nfunction findTaskDefineInModule(md) {\n    let tsdef;\n    try {\n        if (_.isString(md)) {\n            tsdef = findTaskDefine(require(md));\n        }\n        else {\n            tsdef = findTaskDefine(md);\n        }\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n    if (tsdef) {\n        return Promise.resolve(tsdef);\n    }\n    else {\n        return Promise.reject('can not found task define.');\n    }\n}\nexports.findTaskDefineInModule = findTaskDefineInModule;\nfunction findTasksInModule(md) {\n    let mdls;\n    try {\n        if (_.isString(md)) {\n            mdls = findTasks(require(md));\n        }\n        else {\n            mdls = findTasks(md);\n        }\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n    return Promise.resolve(mdls);\n}\nexports.findTasksInModule = findTasksInModule;\nfunction findTaskDefineInDir(dirs) {\n    return Promise.race(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\n        return new Promise((resolve, reject) => {\n            if (fs_1.existsSync(dir)) {\n                let mdl = requireDir(dir);\n                if (mdl) {\n                    let def = findTaskDefine(mdl);\n                    if (def) {\n                        resolve(def);\n                    }\n                }\n            }\n        });\n    }));\n}\nexports.findTaskDefineInDir = findTaskDefineInDir;\nfunction findTasksInDir(dirs) {\n    return Promise.all(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\n        console.log(chalk.grey('begin load task from dir'), chalk.cyan(dir));\n        try {\n            let mdl = requireDir(dir, { recurse: true });\n            return Promise.resolve(findTasks(mdl));\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }))\n        .then(tasks => {\n        return _.flatten(tasks);\n    });\n}\nexports.findTasksInDir = findTasksInDir;\n","import 'reflect-metadata';\r\nimport * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { ITask, ITaskInfo, ITaskDefine, Src } from './TaskConfig';\r\nimport { existsSync } from 'fs';\r\nconst requireDir = require('require-dir');\r\n\r\n/**\r\n * task decorator.\r\n * \r\n * @export\r\n * @param {ITaskInfo} type\r\n * @returns\r\n */\r\nexport function task(option?: ITaskInfo) {\r\n    return (target: any) => {\r\n        target['__task'] = option || {};\r\n        return target;\r\n    }\r\n}\r\n\r\nexport function findTasks(target: any): ITask[] {\r\n    let tasks: ITask[] = [];\r\n    if (!target) {\r\n        return tasks;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__task']) {\r\n            let task: ITask = new target();\r\n            task.decorator = <ITaskInfo>target['__task'];\r\n            tasks.push(task);\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            tasks.concat(findTasks(sm));\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return;\r\n            }\r\n            console.log(chalk.grey('find task from :'), chalk.cyan(key));\r\n            tasks = tasks.concat(findTasks(target[key]));\r\n        });\r\n    }\r\n\r\n    return tasks;\r\n}\r\n\r\n/**\r\n * decorator task define implements ITaskDefine.\r\n * \r\n * @export\r\n * @param {Function} constructor\r\n */\r\nexport function taskdefine() {\r\n    return (target: any) => {\r\n        target['__taskdefine'] = true;\r\n        return target;\r\n    }\r\n}\r\n\r\n/**\r\n * get all taskdefine in module.\r\n * \r\n * @export\r\n * @param {any} target\r\n * @returns\r\n */\r\nexport function findTaskDefines(target): ITaskDefine[] {\r\n    let defs: ITaskDefine[] = [];\r\n    if (!target) {\r\n        return defs;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__taskdefine']) {\r\n            defs.push(<ITaskDefine>new target());\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            defs.concat(findTaskDefines(sm));\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return;\r\n            }\r\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\r\n            defs = defs.concat(findTaskDefines(target[key]));\r\n        });\r\n    }\r\n\r\n    return defs;\r\n}\r\n\r\n\r\n/**\r\n * get one taskdefine in module.\r\n * \r\n * @export\r\n * @param {any} target\r\n * @returns\r\n */\r\nexport function findTaskDefine(target): ITaskDefine {\r\n    let def: ITaskDefine;\r\n    if (!target) {\r\n        return null;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__taskdefine']) {\r\n            def = <ITaskDefine>new target();\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            if (def) {\r\n                return false;\r\n            }\r\n            def = findTaskDefine(sm);\r\n            return true;\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (def) {\r\n                return false;\r\n            }\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return true;\r\n            }\r\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\r\n            def = findTaskDefine(target[key]);\r\n            return true;\r\n        });\r\n    }\r\n\r\n    return def;\r\n}\r\n\r\n/**\r\n * find one taskdefine in module.\r\n * \r\n * @export\r\n * @param {(string | Object)} md\r\n * @returns {Promise<ITaskDefine>}\r\n */\r\nexport function findTaskDefineInModule(md: string | Object): Promise<ITaskDefine> {\r\n    let tsdef;\r\n    try {\r\n        if (_.isString(md)) {\r\n            tsdef = findTaskDefine(require(md));\r\n        } else {\r\n            tsdef = findTaskDefine(md);\r\n        }\r\n    } catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    if (tsdef) {\r\n        return Promise.resolve(tsdef);\r\n    } else {\r\n        // console.error('can not found task config builder method in module {0}.', mdl);\r\n        return Promise.reject('can not found task define.');\r\n    }\r\n}\r\n\r\n\r\nexport function findTasksInModule(md: string | Object): Promise<ITask[]> {\r\n    let mdls;\r\n    try {\r\n        if (_.isString(md)) {\r\n            mdls = findTasks(require(md));\r\n        } else {\r\n            mdls = findTasks(md);\r\n        }\r\n    } catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(mdls);\r\n}\r\n\r\n\r\n/**\r\n * find one task define in directories.\r\n * \r\n * @export\r\n * @param {Src} dirs\r\n * @returns {Promise<ITaskDefine>}\r\n */\r\nexport function findTaskDefineInDir(dirs: Src): Promise<ITaskDefine> {\r\n    return Promise.race<ITaskDefine>(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\r\n        return new Promise<ITaskDefine>((resolve, reject) => {\r\n            if (existsSync(dir)) {\r\n                let mdl = requireDir(dir);\r\n                if (mdl) {\r\n                    let def = findTaskDefine(mdl);\r\n                    if (def) {\r\n                        resolve(def);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }));\r\n}\r\n\r\n/**\r\n * find tasks in directories.\r\n * \r\n * @export\r\n * @param {Src} dirs\r\n * @returns {Promise<ITask[]>}\r\n */\r\nexport function findTasksInDir(dirs: Src): Promise<ITask[]> {\r\n    return Promise.all(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\r\n        console.log(chalk.grey('begin load task from dir'), chalk.cyan(dir));\r\n        try {\r\n            let mdl = requireDir(dir, { recurse: true });\r\n            return Promise.resolve(findTasks(mdl));\r\n        } catch (err) {\r\n            return Promise.reject(err);\r\n        }\r\n    }))\r\n        .then(tasks => {\r\n            return _.flatten(tasks);\r\n        });\r\n}"]}