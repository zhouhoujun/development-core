{"version":3,"sources":["decorator.js","decorator.ts"],"names":["task","oper","order","name","Reflect","metadata","taskMetadataKey","getTask","target","type","getMetadata","taskconfig","taskconfigrMetadataKey","getTaskconfig","taskloader","taskloaderMetadataKey","getTaskloader","taskdefine","constructor","taskdefineMetadataKey","findTaskDefine","require","Symbol","exports"],"mappings":"AAAA,YCYA,SAAAA,MAAqBC,EAAkBC,EAAgBC,GACnD,MAAOC,SAAQC,SAASC,iBAAmBH,KAAMA,EAAMF,KAAMA,EAAMC,MAAOA,IAG9E,QAAAK,SAAwBC,EAAgBC,GACpC,MAAOL,SAAQM,YAAYJ,gBAAiBE,EAAQC,GAYxD,QAAAE,YAA2BV,GACvB,MAAOG,SAAQC,SAASO,uBAAwBX,GAGpD,QAAAY,eAA8BL,EAAgBP,GAC1C,MAAOG,SAAQM,YAAYE,uBAAwBJ,GAYvD,QAAAM,YAA2Bb,GACvB,MAAOG,SAAQC,SAASU,sBAAuBd,GAGnD,QAAAe,eAA8BR,EAAgBP,GAC1C,MAAOG,SAAQM,YAAYK,sBAAuBP,GAUtD,QAAAS,YAA2BC,GACvB,MAAOd,SAAQC,SAASc,sBAAuBD,GAUnD,QAAAE,gBAA+BZ,GAC3B,MAAOJ,SAAQM,YAAYJ,gBAAiBE,GAzEhDa,QAAO,mBAIP,IAAMf,iBAAkBgB,OAAO,OAQfC,SAAAvB,KAAIA,KAIJuB,QAAAhB,QAAOA,OAKvB,IAAMK,wBAAyBU,OAAO,aAQtBC,SAAAZ,WAAUA,WAIVY,QAAAV,cAAaA,aAK7B,IAAME,uBAAwBO,OAAO,aAQrBC,SAAAT,WAAUA,WAIVS,QAAAP,cAAaA,aAI7B,IAAMG,uBAAwBG,OAAO,aAOrBC,SAAAN,WAAUA,WAWVM,QAAAH,eAAcA","file":"../decorator.js","sourcesContent":["\"use strict\";\nrequire('reflect-metadata');\nconst taskMetadataKey = Symbol('task');\nfunction task(oper, order, name) {\n    return Reflect.metadata(taskMetadataKey, { name: name, oper: oper, order: order });\n}\nexports.task = task;\nfunction getTask(target, type) {\n    return Reflect.getMetadata(taskMetadataKey, target, type);\n}\nexports.getTask = getTask;\nconst taskconfigrMetadataKey = Symbol('taskconfig');\nfunction taskconfig(oper) {\n    return Reflect.metadata(taskconfigrMetadataKey, oper);\n}\nexports.taskconfig = taskconfig;\nfunction getTaskconfig(target, oper) {\n    return Reflect.getMetadata(taskconfigrMetadataKey, target);\n}\nexports.getTaskconfig = getTaskconfig;\nconst taskloaderMetadataKey = Symbol('taskloader');\nfunction taskloader(oper) {\n    return Reflect.metadata(taskloaderMetadataKey, oper);\n}\nexports.taskloader = taskloader;\nfunction getTaskloader(target, oper) {\n    return Reflect.getMetadata(taskloaderMetadataKey, target);\n}\nexports.getTaskloader = getTaskloader;\nconst taskdefineMetadataKey = Symbol('taskdefine');\nfunction taskdefine(constructor) {\n    return Reflect.metadata(taskdefineMetadataKey, constructor);\n}\nexports.taskdefine = taskdefine;\nfunction findTaskDefine(target) {\n    return Reflect.getMetadata(taskMetadataKey, target);\n}\nexports.findTaskDefine = findTaskDefine;\n","import 'reflect-metadata';\r\n\r\nimport { Operation } from './TaskConfig';\r\n\r\nconst taskMetadataKey = Symbol('task');\r\n/**\r\n * task decorator.\r\n * \r\n * @export\r\n * @param {string} type\r\n * @returns\r\n */\r\nexport function task(oper?: Operation, order?: number, name?: string) {\r\n    return Reflect.metadata(taskMetadataKey, { name: name, oper: oper, order: order });\r\n}\r\n\r\nexport function getTask(target: Object, type: string) {\r\n    return Reflect.getMetadata(taskMetadataKey, target, type);\r\n}\r\n\r\n\r\nconst taskconfigrMetadataKey = Symbol('taskconfig');\r\n/**\r\n * task loader decorator.\r\n * \r\n * @export\r\n * @param {string} type\r\n * @returns\r\n */\r\nexport function taskconfig(oper?: Operation) {\r\n    return Reflect.metadata(taskconfigrMetadataKey, oper);\r\n}\r\n\r\nexport function getTaskconfig(target: Object, oper?: Operation) {\r\n    return Reflect.getMetadata(taskconfigrMetadataKey, target);\r\n}\r\n\r\n\r\nconst taskloaderMetadataKey = Symbol('taskloader');\r\n/**\r\n * task loader decorator.\r\n * \r\n * @export\r\n * @param {string} type\r\n * @returns\r\n */\r\nexport function taskloader(oper?: Operation) {\r\n    return Reflect.metadata(taskloaderMetadataKey, oper);\r\n}\r\n\r\nexport function getTaskloader(target: Object, oper?: Operation) {\r\n    return Reflect.getMetadata(taskloaderMetadataKey, target);\r\n}\r\n\r\nconst taskdefineMetadataKey = Symbol('taskdefine');\r\n/**\r\n * decorator task define implements ITaskDefine.\r\n * \r\n * @export\r\n * @param {Function} constructor\r\n */\r\nexport function taskdefine(constructor: Function) {\r\n    return Reflect.metadata(taskdefineMetadataKey, constructor);\r\n}\r\n\r\n/**\r\n * get taskdefine in module.\r\n * \r\n * @export\r\n * @param {any} target\r\n * @returns\r\n */\r\nexport function findTaskDefine(target) {\r\n    return Reflect.getMetadata(taskMetadataKey, target);\r\n}\r\n"]}