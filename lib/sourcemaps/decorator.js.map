{"version":3,"sources":["decorator.js","decorator.ts"],"names":["task","target","_","isFunction","_ret","tg","v","_typeof","dynamicTask","_ret2","findTaskset","tasks","match","ctx","tinfo","isBoolean","utils_1","matchCompare","has","setInfo","set","_ret3","dyts","map","tk","extend","clone","generateTask_1","generateTask","isArray","each","sm","keys","key","test","console","log","chalk","grey","cyan","findTaskMap","Map","forEach","it","concat","push","findTasks","taskdefine","_ret4","findTaskDefines","defs","dc","taskDefine2Context","findTaskDefine","def","findTaskDefineInModule","md","tsdef","isString","require","err","Promise","reject","resolve","yellow","findTasksInModule","mdls","findTaskDefineInDir","dirs","race","dir","fs_1","existsSync","mdl","requireDir","duplicates","camelcase","recurse","findTasksInDir","all","then","flatten","tdef","context","cfg","bindingConfig_1","bindingConfig","loadConfig","option","env","loadTasks","exports"],"mappings":"AAAA,YCkBA,SAAAA,MAAyCC,GACrC,GAAIC,EAAEC,WAAWF,GAEb,MADAA,GAAA,UACOA,CACJ,IAAAG,GAAA,WACH,GAAIC,GAAKJ,CACT,QAAAK,EAAO,SAACL,GAEJ,MADAA,GAAA,OAAmBI,MACZJ,MAJR,OAAA,YAAA,mBAAAG,GAAA,YAAAG,QAAAH,IAAAA,EAAAE,EAAA,OAiBX,QAAAE,aAAgDP,GAC5C,GAAIA,GAAUC,EAAEC,WAAWF,GAEvB,MADAA,GAAA,iBACOA,CACJ,IAAAQ,GAAA,WACH,GAAIJ,GAAKJ,CACT,QAAAK,EAAO,SAACL,GAEJ,MADAA,GAAA,cAA0BI,MACnBJ,MAJR,OAAA,YAAA,mBAAAQ,GAAA,YAAAF,QAAAE,IAAAA,EAAAH,EAAA,OAYX,QAAAI,aAAqBC,EAA2BV,EAAaW,EAAwBC,GAEjF,GAAKZ,EAGL,GAAIC,EAAEC,WAAWF,IACb,GAAIA,EAAA,OAAkB,CAClB,GAAIa,GAAwBb,EAAA,MAG5B,IAFAa,EAAQZ,EAAEa,UAAUD,MAAcA,GAE7BE,QAAAC,aAAaH,EAAOF,EAAOC,GAC5B,MAEJ,IAAIF,EAAMO,IAAIjB,GACV,MAGJ,IAAID,GAAc,GAAIC,GAAOa,EACzBd,GAAKmB,SACLnB,EAAKmB,QAAQL,GAGjBH,EAAMS,IAAInB,EAAQD,OAEf,IAAIC,EAAA,cAAyB,CAAA,GAAAoB,GAAA,WAChC,GAAIP,GAAwBb,EAAA,aAE5B,KAAKe,QAAAC,aAAaH,EAAOF,EAAOC,GAC5B,OAAAP,EAAA,OAGJ,IAAIK,EAAMO,IAAIjB,GACV,OAAAK,EAAA,OAGJ,IAAIgB,GAAOpB,EAAEqB,KAAoB,GAAItB,IAAUU,QAAS,SAAAa,GAGpD,MAFAA,GAAKtB,EAAEuB,OAAOvB,EAAEwB,MAAMZ,GAAQU,IAIlCb,GAAMS,IAAInB,EAAQ0B,eAAAC,aAAaN,EAAMV,EAAOC,MAhBZ,IAAA,YAAA,mBAAAQ,GAAA,YAAAd,QAAAc,IAAA,MAAAA,GAAAf,OAkB7BJ,GAAE2B,QAAQ5B,GACjBC,EAAE4B,KAAK7B,EAAQ,SAAA8B,GACXrB,YAAYC,EAAOoB,EAAInB,EAAOC,KAGlCX,EAAE4B,KAAK5B,EAAE8B,KAAK/B,GAAS,SAAAgC,GACdA,GAAQhC,EAAOgC,KAAQ,WAAWC,KAAKD,KAG5CE,QAAQC,IAAIC,MAAMC,KAAK,oBAAqBD,MAAME,KAAKN,IACvDvB,YAAYC,EAAOV,EAAOgC,GAAMrB,EAAOC,MAMnD,QAAA2B,aAAqBvC,EAAaW,EAAwBC,EAAoBU,GAC1EA,EAAMA,GAAO,GAAIkB,KACjB/B,YAAYa,EAAKtB,EAAQW,EAAOC,EAChC,IAAIF,KAQJ,OAPAY,GAAImB,QAAQ,SAACC,GACLzC,EAAE2B,QAAQc,GACVhC,EAAQA,EAAMiC,OAAOD,GAErBhC,EAAMkC,KAAKF,KAGZhC,EAWX,QAAAmC,WAA0B7C,EAAaW,EAAwBC,GAC3D,MAAO2B,aAAYvC,EAAQW,EAAOC,GAStC,QAAAkC,YAA+C9C,GAC3C,GAAIC,EAAEC,WAAWF,GAEb,MADAA,GAAA,gBAA2B,EACpBA,CACJ,IAAA+C,GAAA,WACH,GAAI3C,GAAKJ,CACT,QAAAK,EAAO,SAACL,GAEJ,MADAA,GAAA,eAA2BI,IAAM,EAC1BJ,MAJR,OAAA,YAAA,mBAAA+C,GAAA,YAAAzC,QAAAyC,IAAAA,EAAA1C,EAAA,OAiBX,QAAA2C,iBAAgChD,GAC5B,GAAIiD,KACJ,KAAKjD,EACD,MAAOiD,EAEX,IAAIhD,EAAEC,WAAWF,IACb,GAAIA,EAAA,eAA0B,CAC1B,GAAIkD,GAAK,GAAIlD,EACRkD,GAAA,aACDA,EAAKC,mBAAmBD,IAE5BD,EAAKL,KAAqBM,QAEvBjD,GAAE2B,QAAQ5B,GACjBC,EAAE4B,KAAK7B,EAAQ,SAAA8B,GACXmB,EAAKN,OAAOK,gBAAgBlB,MAGhC7B,EAAE4B,KAAK5B,EAAE8B,KAAK/B,GAAS,SAAAgC,GACdA,GAAQhC,EAAOgC,KAAQ,WAAWC,KAAKD,KAG5CE,QAAQC,IAAIC,MAAMC,KAAK,2BAA4BD,MAAME,KAAKN,IAC9DiB,EAAOA,EAAKN,OAAOK,gBAAgBhD,EAAOgC,OAIlD,OAAOiB,GAWX,QAAAG,gBAA+BpD,GAC3B,GAAIqD,GAAAA,MACJ,KAAKrD,EACD,MAAO,KAEX,IAAIC,EAAEC,WAAWF,IACb,GAAIA,EAAA,eAA0B,CAC1B,GAAIkD,GAAK,GAAIlD,EAETqD,GADAH,EAAA,WACMA,EAEAC,mBAAmBD,QAG1BjD,GAAE2B,QAAQ5B,GACjBC,EAAE4B,KAAK7B,EAAQ,SAAA8B,GACX,OAAIuB,IAGJA,EAAMD,eAAetB,IACd,KAGX7B,EAAE4B,KAAK5B,EAAE8B,KAAK/B,GAAS,SAAAgC,GACnB,OAAIqB,MAGCrB,GAAQhC,EAAOgC,KAAQ,WAAWC,KAAKD,MAG5CE,QAAQC,IAAIC,MAAMC,KAAK,2BAA4BD,MAAME,KAAKN,IAC9DqB,EAAMD,eAAepD,EAAOgC,KACrB,KAIf,OAAOqB,GAUX,QAAAC,wBAAuCC,GACnC,GAAIC,GAAAA,MACJ,KAEQA,EAAQJ,eADRnD,EAAEwD,SAASF,GACYG,QAAQH,GAERA,GAE7B,MAAOI,GACL,MAAOC,SAAQC,OAAOF,GAG1B,MAAIH,GACOI,QAAQE,QAAQN,IAGvBtB,QAAQC,IAAIC,MAAM2B,OAAO,yCAClBH,QAAQE,QAAQ,OAa/B,QAAAE,mBAAkCT,EAAqB5C,EAAwBC,GAC3E,GAAIqD,GAAAA,MACJ,KAEQA,EADAhE,EAAEwD,SAASF,GACJV,UAAUa,QAAQH,GAAK5C,EAAOC,GAE9BiC,UAAUU,EAAI5C,EAAOC,GAElC,MAAO+C,GACL,MAAOC,SAAQC,OAAOF,GAG1B,MAAOC,SAAQE,QAAQG,GAW3B,QAAAC,qBAAoCC,GAChC,MAAOP,SAAQQ,KAAqBnE,EAAEqB,IAAIrB,EAAE2B,QAAQuC,GAAQA,GAAQA,GAAO,SAAAE,GACvE,MAAO,IAAIT,SAAwB,SAACE,EAASD,GACzC,GAAIS,KAAAC,WAAWF,GAAM,CACjB,GAAIG,GAAMC,WAAWJ,GAAOK,YAAY,EAAMC,WAAW,EAAMC,SAAS,GACxE,IAAIJ,EAAK,CACL,GAAInB,GAAMD,eAAeoB,EACrBnB,IACAS,EAAQT,UAiBhC,QAAAwB,gBAA+BV,EAAWxD,EAAwBC,GAC9D,GAAIU,GAAM,GAAIkB,IACd,OAAOoB,SAAQkB,IAAI7E,EAAEqB,IAAIrB,EAAE2B,QAAQuC,GAAQA,GAAQA,GAAO,SAAAE,GACtDnC,QAAQC,IAAIC,MAAMC,KAAK,4BAA6BD,MAAME,KAAK+B,GAC/D,KACI,GAAIG,GAAMC,WAAWJ,GAAOK,YAAY,EAAMC,WAAW,EAAMC,SAAS,GACxE,OAAOhB,SAAQE,QAAQvB,YAAYiC,EAAK7D,EAAOC,EAAKU,IACtD,MAAOqC,GACL,MAAOC,SAAQC,OAAOF,OAGzBoB,KAAK,SAAArE,GACF,MAAOT,GAAE+E,QAAQtE,KAW7B,QAAAyC,oBAAmC8B,GAC/B,GAAIC,GAAejF,EAAEuB,UAAWyD,EAOhC,OANAC,GAAA,WAAwB,SAACC,GACrB,MAAOC,iBAAAC,cAAcJ,EAAKK,WAAWH,EAAII,OAAQJ,EAAIK,OAGzDN,EAAA,MAAmBD,EAAKQ,UAAY,SAACP,GAAD,MAAaD,GAAKQ,UAAUP,IAAW,KAEpDA,uNAvW3BxB,SAAO,mBACP,IAAYzD,GAACyD,QAAM,UACPtB,MAAKsB,QAAM,SAEvBhC,eAAAgC,QAA6B,kBAC7B0B,gBAAA1B,QAA8B,mBAC9B3C,QAAA2C,QAA6B,WAC7BY,KAAAZ,QAA2B,MACrBe,WAAaf,QAAQ,cAUXgC,SAAA3F,KAAIA,KAqBJ2F,QAAAnF,YAAWA,YAgGXmF,QAAA7C,UAASA,UAUT6C,QAAA5C,WAAUA,WAqBV4C,QAAA1C,gBAAeA,gBAsCf0C,QAAAtC,eAAcA,eA8CdsC,QAAApC,uBAAsBA,uBA8BtBoC,QAAA1B,kBAAiBA,kBAuBjB0B,QAAAxB,oBAAmBA,oBAyBnBwB,QAAAb,eAAcA,eAuBda,QAAAvC,mBAAkBA","file":"../decorator.js","sourcesContent":["\"use strict\";\nrequire('reflect-metadata');\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst generateTask_1 = require('./generateTask');\nconst bindingConfig_1 = require('./bindingConfig');\nconst utils_1 = require('./utils');\nconst fs_1 = require('fs');\nconst requireDir = require('require-dir');\n/**\n * task decorator.\n *\n * @export\n * @param {ITaskDecorator} type\n * @returns\n */\nfunction task(target) {\n    if (_.isFunction(target)) {\n        target['__task'] = {};\n        return target;\n    }\n    else {\n        let tg = target;\n        return (target) => {\n            target['__task'] = tg || {};\n            return target;\n        };\n    }\n}\nexports.task = task;\n/**\n * dynamic task decorator.\n *\n * @export\n * @template T\n * @param {((new <T>() => T) | ITaskDecorator)} [target]\n * @returns {*}\n */\nfunction dynamicTask(target) {\n    if (target && _.isFunction(target)) {\n        target['__dynamictask'] = {};\n        return target;\n    }\n    else {\n        let tg = target;\n        return (target) => {\n            target['__dynamictask'] = tg || {};\n            return target;\n        };\n    }\n}\nexports.dynamicTask = dynamicTask;\nfunction findTaskset(tasks, target, match, ctx) {\n    if (!target) {\n        return;\n    }\n    if (_.isFunction(target)) {\n        if (target['__task']) {\n            let tinfo = target['__task'];\n            tinfo = _.isBoolean(tinfo) ? {} : tinfo;\n            if (!utils_1.matchCompare(tinfo, match, ctx)) {\n                return;\n            }\n            if (tasks.has(target)) {\n                return;\n            }\n            let task = new target(tinfo);\n            if (task.setInfo) {\n                task.setInfo(tinfo);\n            }\n            tasks.set(target, task);\n        }\n        else if (target['__dynamictask']) {\n            let tinfo = target['__dynamictask'];\n            if (!utils_1.matchCompare(tinfo, match, ctx)) {\n                return;\n            }\n            if (tasks.has(target)) {\n                return;\n            }\n            let dyts = _.map((new target()).tasks(), tk => {\n                tk = _.extend(_.clone(tinfo), tk);\n                // tk.group = tk.group || tinfo.group;\n                return tk;\n            });\n            tasks.set(target, generateTask_1.generateTask(dyts, match, ctx));\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            findTaskset(tasks, sm, match, ctx);\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return;\n            }\n            console.log(chalk.grey('find task from :'), chalk.cyan(key));\n            findTaskset(tasks, target[key], match, ctx);\n        });\n    }\n}\nfunction findTaskMap(target, match, ctx, map) {\n    map = map || new Map();\n    findTaskset(map, target, match, ctx);\n    let tasks = [];\n    map.forEach((it) => {\n        if (_.isArray(it)) {\n            tasks = tasks.concat(it);\n        }\n        else {\n            tasks.push(it);\n        }\n    });\n    return tasks;\n}\n/**\n * find tasks in Object module.\n *\n * @export\n * @param {*} target\n * @param {ITaskDecorator} [match]\n * @param {ITaskContext} [ctx]\n * @returns {ITask[]}\n */\nfunction findTasks(target, match, ctx) {\n    return findTaskMap(target, match, ctx);\n}\nexports.findTasks = findTasks;\n/**\n * decorator task define implements IContextDefine.\n *\n * @export\n * @param {Function} constructor\n */\nfunction taskdefine(target) {\n    if (_.isFunction(target)) {\n        target['__task_context'] = true;\n        return target;\n    }\n    else {\n        let tg = target;\n        return (target) => {\n            target['__task_context'] = tg || true;\n            return target;\n        };\n    }\n}\nexports.taskdefine = taskdefine;\n/**\n * get all taskdefine in module.\n *\n * @export\n * @param {any} target\n * @returns\n */\nfunction findTaskDefines(target) {\n    let defs = [];\n    if (!target) {\n        return defs;\n    }\n    if (_.isFunction(target)) {\n        if (target['__task_context']) {\n            let dc = new target();\n            if (!dc['getContext']) {\n                dc = taskDefine2Context(dc);\n            }\n            defs.push(dc);\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            defs.concat(findTaskDefines(sm));\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return;\n            }\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\n            defs = defs.concat(findTaskDefines(target[key]));\n        });\n    }\n    return defs;\n}\nexports.findTaskDefines = findTaskDefines;\n/**\n * get one taskdefine in module.\n *\n * @export\n * @param {any} target\n * @returns\n */\nfunction findTaskDefine(target) {\n    let def;\n    if (!target) {\n        return null;\n    }\n    if (_.isFunction(target)) {\n        if (target['__task_context']) {\n            let dc = new target();\n            if (dc['getContext']) {\n                def = dc;\n            }\n            else {\n                def = taskDefine2Context(dc);\n            }\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            if (def) {\n                return false;\n            }\n            def = findTaskDefine(sm);\n            return true;\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (def) {\n                return false;\n            }\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return true;\n            }\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\n            def = findTaskDefine(target[key]);\n            return true;\n        });\n    }\n    return def;\n}\nexports.findTaskDefine = findTaskDefine;\n/**\n * find one taskdefine in module.\n *\n * @export\n * @param {(string | Object)} md\n * @returns {Promise<IContextDefine>}\n */\nfunction findTaskDefineInModule(md) {\n    let tsdef;\n    try {\n        if (_.isString(md)) {\n            tsdef = findTaskDefine(require(md));\n        }\n        else {\n            tsdef = findTaskDefine(md);\n        }\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n    if (tsdef) {\n        return Promise.resolve(tsdef);\n    }\n    else {\n        // console.error('can not found task config builder method in module {0}.', mdl);\n        console.log(chalk.yellow('can not found task define in module.'));\n        return Promise.resolve(null);\n    }\n}\nexports.findTaskDefineInModule = findTaskDefineInModule;\n/**\n * fund tasks in module.\n *\n * @export\n * @param {(string | Object)} md\n * @param {ITaskDecorator} [match]\n * @param {ITaskContext} [ctx]\n * @returns {Promise<ITask[]>}\n */\nfunction findTasksInModule(md, match, ctx) {\n    let mdls;\n    try {\n        if (_.isString(md)) {\n            mdls = findTasks(require(md), match, ctx);\n        }\n        else {\n            mdls = findTasks(md, match, ctx);\n        }\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n    return Promise.resolve(mdls);\n}\nexports.findTasksInModule = findTasksInModule;\n/**\n * find one task define in directories.\n *\n * @export\n * @param {Src} dirs\n * @returns {Promise<IContextDefine>}\n */\nfunction findTaskDefineInDir(dirs) {\n    return Promise.race(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\n        return new Promise((resolve, reject) => {\n            if (fs_1.existsSync(dir)) {\n                let mdl = requireDir(dir, { duplicates: true, camelcase: true, recurse: true });\n                if (mdl) {\n                    let def = findTaskDefine(mdl);\n                    if (def) {\n                        resolve(def);\n                    }\n                }\n            }\n        });\n    }));\n}\nexports.findTaskDefineInDir = findTaskDefineInDir;\n/**\n * find tasks in directories.\n *\n * @export\n * @param {Src} dirs\n * @param {ITaskDecorator} [match]\n * @param {ITaskContext} [ctx]\n * @returns {Promise<ITask[]>}\n */\nfunction findTasksInDir(dirs, match, ctx) {\n    let map = new Map();\n    return Promise.all(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\n        console.log(chalk.grey('begin load task from dir'), chalk.cyan(dir));\n        try {\n            let mdl = requireDir(dir, { duplicates: true, camelcase: true, recurse: true });\n            return Promise.resolve(findTaskMap(mdl, match, ctx, map));\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }))\n        .then(tasks => {\n        return _.flatten(tasks);\n    });\n}\nexports.findTasksInDir = findTasksInDir;\n/**\n * task define context convert.\n *\n * @export\n * @param {ITaskDefine} tdef\n * @returns {IContextDefine}\n */\nfunction taskDefine2Context(tdef) {\n    let context = _.extend({}, tdef);\n    context['getContext'] = (cfg) => {\n        return bindingConfig_1.bindingConfig(tdef.loadConfig(cfg.option, cfg.env));\n    };\n    context['tasks'] = tdef.loadTasks ? (context) => tdef.loadTasks(context) : null;\n    return context;\n}\nexports.taskDefine2Context = taskDefine2Context;\n","import 'reflect-metadata';\r\nimport * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { ITask, ITaskDecorator, ITaskContext, ITaskConfig, IContextDefine, ITaskDefine, Src, IDynamicTasks } from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { bindingConfig } from './bindingConfig';\r\nimport { matchCompare } from './utils';\r\nimport { existsSync } from 'fs';\r\nconst requireDir = require('require-dir');\r\n\r\n\r\n/**\r\n * task decorator.\r\n * \r\n * @export\r\n * @param {ITaskDecorator} type\r\n * @returns\r\n */\r\nexport function task<T extends Function>(target?: (new <T>() => T) | ITaskDecorator): any {\r\n    if (_.isFunction(target)) {\r\n        target['__task'] = {};\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__task'] = tg || {};\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * dynamic task decorator.\r\n * \r\n * @export\r\n * @template T\r\n * @param {((new <T>() => T) | ITaskDecorator)} [target]\r\n * @returns {*}\r\n */\r\nexport function dynamicTask<T extends Function>(target?: (new <T>() => T) | ITaskDecorator): any {\r\n    if (target && _.isFunction(target)) {\r\n        target['__dynamictask'] = {};\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__dynamictask'] = tg || {};\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntype Taskitem = ITask | ITask[];\r\n\r\nfunction findTaskset(tasks: Map<any, Taskitem>, target: any, match?: ITaskDecorator, ctx?: ITaskContext) {\r\n\r\n    if (!target) {\r\n        return;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__task']) {\r\n            let tinfo: ITaskDecorator = target['__task'];\r\n            tinfo = _.isBoolean(tinfo) ? {} : tinfo;\r\n\r\n            if (!matchCompare(tinfo, match, ctx)) {\r\n                return;\r\n            }\r\n            if (tasks.has(target)) {\r\n                return;\r\n            }\r\n\r\n            let task: ITask = new target(tinfo);\r\n            if (task.setInfo) {\r\n                task.setInfo(tinfo);\r\n            }\r\n\r\n            tasks.set(target, task);\r\n\r\n        } else if (target['__dynamictask']) {\r\n            let tinfo: ITaskDecorator = target['__dynamictask'];\r\n\r\n            if (!matchCompare(tinfo, match, ctx)) {\r\n                return;\r\n            }\r\n\r\n            if (tasks.has(target)) {\r\n                return;\r\n            }\r\n\r\n            let dyts = _.map((<IDynamicTasks>new target()).tasks(), tk => {\r\n                tk = _.extend(_.clone(tinfo), tk);\r\n                // tk.group = tk.group || tinfo.group;\r\n                return tk;\r\n            });\r\n            tasks.set(target, generateTask(dyts, match, ctx));\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            findTaskset(tasks, sm, match, ctx);\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return;\r\n            }\r\n            console.log(chalk.grey('find task from :'), chalk.cyan(key));\r\n            findTaskset(tasks, target[key], match, ctx);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction findTaskMap(target: any, match?: ITaskDecorator, ctx?: ITaskContext, map?: Map<any, Taskitem>): ITask[] {\r\n    map = map || new Map<any, Taskitem>();\r\n    findTaskset(map, target, match, ctx);\r\n    let tasks: ITask[] = [];\r\n    map.forEach((it: Taskitem) => {\r\n        if (_.isArray(it)) {\r\n            tasks = tasks.concat(it);\r\n        } else {\r\n            tasks.push(it);\r\n        }\r\n    });\r\n    return tasks;\r\n}\r\n/**\r\n * find tasks in Object module.\r\n * \r\n * @export\r\n * @param {*} target\r\n * @param {ITaskDecorator} [match]\r\n * @param {ITaskContext} [ctx]\r\n * @returns {ITask[]}\r\n */\r\nexport function findTasks(target: any, match?: ITaskDecorator, ctx?: ITaskContext): ITask[] {\r\n    return findTaskMap(target, match, ctx);\r\n}\r\n\r\n/**\r\n * decorator task define implements IContextDefine.\r\n * \r\n * @export\r\n * @param {Function} constructor\r\n */\r\nexport function taskdefine<T extends Function>(target?: (new <T>() => T)): any {\r\n    if (_.isFunction(target)) {\r\n        target['__task_context'] = true;\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__task_context'] = tg || true;\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * get all taskdefine in module.\r\n * \r\n * @export\r\n * @param {any} target\r\n * @returns\r\n */\r\nexport function findTaskDefines(target): IContextDefine[] {\r\n    let defs: IContextDefine[] = [];\r\n    if (!target) {\r\n        return defs;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__task_context']) {\r\n            let dc = new target();\r\n            if (!dc['getContext']) {\r\n                dc = taskDefine2Context(dc);\r\n            }\r\n            defs.push(<IContextDefine>dc);\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            defs.concat(findTaskDefines(sm));\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return;\r\n            }\r\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\r\n            defs = defs.concat(findTaskDefines(target[key]));\r\n        });\r\n    }\r\n\r\n    return defs;\r\n}\r\n\r\n\r\n/**\r\n * get one taskdefine in module.\r\n * \r\n * @export\r\n * @param {any} target\r\n * @returns\r\n */\r\nexport function findTaskDefine(target): IContextDefine {\r\n    let def: IContextDefine;\r\n    if (!target) {\r\n        return null;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__task_context']) {\r\n            let dc = new target();\r\n            if (dc['getContext']) {\r\n                def = dc;\r\n            } else {\r\n                def = taskDefine2Context(dc);\r\n            }\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            if (def) {\r\n                return false;\r\n            }\r\n            def = findTaskDefine(sm);\r\n            return true;\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (def) {\r\n                return false;\r\n            }\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return true;\r\n            }\r\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\r\n            def = findTaskDefine(target[key]);\r\n            return true;\r\n        });\r\n    }\r\n\r\n    return def;\r\n}\r\n\r\n/**\r\n * find one taskdefine in module.\r\n * \r\n * @export\r\n * @param {(string | Object)} md\r\n * @returns {Promise<IContextDefine>}\r\n */\r\nexport function findTaskDefineInModule(md: string | Object): Promise<IContextDefine> {\r\n    let tsdef;\r\n    try {\r\n        if (_.isString(md)) {\r\n            tsdef = findTaskDefine(require(md));\r\n        } else {\r\n            tsdef = findTaskDefine(md);\r\n        }\r\n    } catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    if (tsdef) {\r\n        return Promise.resolve(tsdef);\r\n    } else {\r\n        // console.error('can not found task config builder method in module {0}.', mdl);\r\n        console.log(chalk.yellow('can not found task define in module.'));\r\n        return Promise.resolve(null);\r\n    }\r\n}\r\n\r\n/**\r\n * fund tasks in module.\r\n * \r\n * @export\r\n * @param {(string | Object)} md\r\n * @param {ITaskDecorator} [match]\r\n * @param {ITaskContext} [ctx]\r\n * @returns {Promise<ITask[]>}\r\n */\r\nexport function findTasksInModule(md: string | Object, match?: ITaskDecorator, ctx?: ITaskContext): Promise<ITask[]> {\r\n    let mdls;\r\n    try {\r\n        if (_.isString(md)) {\r\n            mdls = findTasks(require(md), match, ctx);\r\n        } else {\r\n            mdls = findTasks(md, match, ctx);\r\n        }\r\n    } catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(mdls);\r\n}\r\n\r\n\r\n/**\r\n * find one task define in directories.\r\n * \r\n * @export\r\n * @param {Src} dirs\r\n * @returns {Promise<IContextDefine>}\r\n */\r\nexport function findTaskDefineInDir(dirs: Src): Promise<IContextDefine> {\r\n    return Promise.race<IContextDefine>(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\r\n        return new Promise<IContextDefine>((resolve, reject) => {\r\n            if (existsSync(dir)) {\r\n                let mdl = requireDir(dir, { duplicates: true, camelcase: true, recurse: true });\r\n                if (mdl) {\r\n                    let def = findTaskDefine(mdl);\r\n                    if (def) {\r\n                        resolve(def);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }));\r\n}\r\n\r\n/**\r\n * find tasks in directories.\r\n * \r\n * @export\r\n * @param {Src} dirs\r\n * @param {ITaskDecorator} [match]\r\n * @param {ITaskContext} [ctx]\r\n * @returns {Promise<ITask[]>}\r\n */\r\nexport function findTasksInDir(dirs: Src, match?: ITaskDecorator, ctx?: ITaskContext): Promise<ITask[]> {\r\n    let map = new Map<any, Taskitem>();\r\n    return Promise.all(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\r\n        console.log(chalk.grey('begin load task from dir'), chalk.cyan(dir));\r\n        try {\r\n            let mdl = requireDir(dir, { duplicates: true, camelcase: true, recurse: true });\r\n            return Promise.resolve(findTaskMap(mdl, match, ctx, map));\r\n        } catch (err) {\r\n            return Promise.reject(err);\r\n        }\r\n    }))\r\n        .then(tasks => {\r\n            return _.flatten(tasks);\r\n        });\r\n}\r\n\r\n/**\r\n * task define context convert.\r\n * \r\n * @export\r\n * @param {ITaskDefine} tdef\r\n * @returns {IContextDefine}\r\n */\r\nexport function taskDefine2Context(tdef: ITaskDefine): IContextDefine {\r\n    let context: any = _.extend({}, tdef);\r\n    context['getContext'] = (cfg: ITaskConfig) => {\r\n        return bindingConfig(tdef.loadConfig(cfg.option, cfg.env));\r\n    };\r\n\r\n    context['tasks'] = tdef.loadTasks ? (context) => tdef.loadTasks(context) : null;\r\n\r\n    return <IContextDefine>context;\r\n}\r\n"]}