{"version":3,"sources":["decorator.js","decorator.ts"],"names":["task","target","_","isFunction","_ret","tg","v","_typeof","dynamicTask","_ret2","findTasks","match","tasks","tinfo","oper","group","watch","decorator","push","dyts","concat","generateTask_1","generateTask","isArray","each","sm","keys","key","test","console","log","chalk","grey","cyan","taskdefine","_ret3","findTaskDefines","defs","findTaskDefine","def","findTaskDefineInModule","md","tsdef","isString","require","err","Promise","reject","resolve","findTasksInModule","mdls","findTaskDefineInDir","dirs","race","map","dir","fs_1","existsSync","mdl","requireDir","findTasksInDir","all","recurse","then","flatten","exports"],"mappings":"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","file":"../decorator.js","sourcesContent":["\"use strict\";\nrequire('reflect-metadata');\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst generateTask_1 = require('./generateTask');\nconst fs_1 = require('fs');\nconst requireDir = require('require-dir');\nfunction task(target) {\n    if (_.isFunction(target)) {\n        target['__task'] = {};\n        return target;\n    }\n    else {\n        let tg = target;\n        return (target) => {\n            target['__task'] = tg || {};\n            return target;\n        };\n    }\n}\nexports.task = task;\nfunction dynamicTask(target) {\n    if (target && _.isFunction(target)) {\n        target['__dynamictask'] = true;\n        return target;\n    }\n    else {\n        let tg = target;\n        return (target) => {\n            target['__dynamictask'] = tg || true;\n            return target;\n        };\n    }\n}\nexports.dynamicTask = dynamicTask;\nfunction findTasks(target, match) {\n    let tasks = [];\n    if (!target) {\n        return tasks;\n    }\n    if (_.isFunction(target)) {\n        if (target['__task']) {\n            let tinfo = target['__task'];\n            if (match) {\n                if (match.oper && tinfo.oper && (tinfo.oper & match.oper) <= 0) {\n                    return tasks;\n                }\n                if (match.group && tinfo.group !== match.group) {\n                    return tasks;\n                }\n            }\n            if (tinfo.watch) {\n                if (!match || !match.watch) {\n                    return tasks;\n                }\n                else if (tinfo.watch !== match.watch) {\n                    return tasks;\n                }\n            }\n            let task = new target();\n            task.decorator = tinfo;\n            tasks.push(task);\n        }\n        else if (target['__dynamictask']) {\n            let tinfo = target['__dynamictask'];\n            if (match) {\n                if (match.oper && tinfo.oper && (tinfo.oper & match.oper) <= 0) {\n                    return tasks;\n                }\n                if (match.group && tinfo.group !== match.group) {\n                    return tasks;\n                }\n            }\n            if (tinfo.watch) {\n                if (!match || !match.watch) {\n                    return tasks;\n                }\n                else if (tinfo.watch !== match.watch) {\n                    return tasks;\n                }\n            }\n            let dyts = (new target()).tasks();\n            tasks = tasks.concat(generateTask_1.generateTask(dyts, match));\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            tasks.concat(findTasks(sm, match));\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return;\n            }\n            console.log(chalk.grey('find task from :'), chalk.cyan(key));\n            tasks = tasks.concat(findTasks(target[key], match));\n        });\n    }\n    return tasks;\n}\nexports.findTasks = findTasks;\nfunction taskdefine(target) {\n    if (_.isFunction(target)) {\n        target['__taskdefine'] = true;\n        return target;\n    }\n    else {\n        let tg = target;\n        return (target) => {\n            target['__taskdefine'] = tg || true;\n            return target;\n        };\n    }\n}\nexports.taskdefine = taskdefine;\nfunction findTaskDefines(target) {\n    let defs = [];\n    if (!target) {\n        return defs;\n    }\n    if (_.isFunction(target)) {\n        if (target['__taskdefine']) {\n            defs.push(new target());\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            defs.concat(findTaskDefines(sm));\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return;\n            }\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\n            defs = defs.concat(findTaskDefines(target[key]));\n        });\n    }\n    return defs;\n}\nexports.findTaskDefines = findTaskDefines;\nfunction findTaskDefine(target) {\n    let def;\n    if (!target) {\n        return null;\n    }\n    if (_.isFunction(target)) {\n        if (target['__taskdefine']) {\n            def = new target();\n        }\n    }\n    else if (_.isArray(target)) {\n        _.each(target, sm => {\n            if (def) {\n                return false;\n            }\n            def = findTaskDefine(sm);\n            return true;\n        });\n    }\n    else {\n        _.each(_.keys(target), key => {\n            if (def) {\n                return false;\n            }\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\n                return true;\n            }\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\n            def = findTaskDefine(target[key]);\n            return true;\n        });\n    }\n    return def;\n}\nexports.findTaskDefine = findTaskDefine;\nfunction findTaskDefineInModule(md) {\n    let tsdef;\n    try {\n        if (_.isString(md)) {\n            tsdef = findTaskDefine(require(md));\n        }\n        else {\n            tsdef = findTaskDefine(md);\n        }\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n    if (tsdef) {\n        return Promise.resolve(tsdef);\n    }\n    else {\n        return Promise.reject('can not found task define.');\n    }\n}\nexports.findTaskDefineInModule = findTaskDefineInModule;\nfunction findTasksInModule(md, match) {\n    let mdls;\n    try {\n        if (_.isString(md)) {\n            mdls = findTasks(require(md), match);\n        }\n        else {\n            mdls = findTasks(md, match);\n        }\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n    return Promise.resolve(mdls);\n}\nexports.findTasksInModule = findTasksInModule;\nfunction findTaskDefineInDir(dirs) {\n    return Promise.race(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\n        return new Promise((resolve, reject) => {\n            if (fs_1.existsSync(dir)) {\n                let mdl = requireDir(dir);\n                if (mdl) {\n                    let def = findTaskDefine(mdl);\n                    if (def) {\n                        resolve(def);\n                    }\n                }\n            }\n        });\n    }));\n}\nexports.findTaskDefineInDir = findTaskDefineInDir;\nfunction findTasksInDir(dirs, match) {\n    return Promise.all(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\n        console.log(chalk.grey('begin load task from dir'), chalk.cyan(dir));\n        try {\n            let mdl = requireDir(dir, { recurse: true });\n            return Promise.resolve(findTasks(mdl, match));\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }))\n        .then(tasks => {\n        return _.flatten(tasks);\n    });\n}\nexports.findTasksInDir = findTasksInDir;\n","import 'reflect-metadata';\r\nimport * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\nimport { ITask, ITaskInfo, ITaskDefine, Src, IDynamicTasks, Operation, IEnvOption } from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { existsSync } from 'fs';\r\nconst requireDir = require('require-dir');\r\n\r\n\r\n/**\r\n * task decorator.\r\n * \r\n * @export\r\n * @param {ITaskInfo} type\r\n * @returns\r\n */\r\nexport function task<T extends Function>(target?: (new <T>() => T) | ITaskInfo): any {\r\n    if (_.isFunction(target)) {\r\n        target['__task'] = {};\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__task'] = tg || {};\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\nexport function dynamicTask<T extends Function>(target?: (new <T>() => T) | ITaskInfo): any {\r\n    if (target && _.isFunction(target)) {\r\n        target['__dynamictask'] = true;\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__dynamictask'] = tg || true;\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * find tasks in Object module.\r\n * \r\n * @export\r\n * @param {*} target\r\n * @param {ITaskInfo} [match]\r\n * @returns {ITask[]}\r\n */\r\nexport function findTasks(target: any, match?: ITaskInfo): ITask[] {\r\n    let tasks: ITask[] = [];\r\n    if (!target) {\r\n        return tasks;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__task']) {\r\n            let tinfo: ITaskInfo = target['__task'];\r\n\r\n            if (match) {\r\n                if (match.oper && tinfo.oper && (tinfo.oper & match.oper) <= 0) {\r\n                    return tasks;\r\n                }\r\n\r\n                if (match.group && tinfo.group !== match.group) {\r\n                    return tasks;\r\n                }\r\n            }\r\n\r\n            if (tinfo.watch) {\r\n                if (!match || !match.watch) {\r\n                    return tasks;\r\n                } else if (tinfo.watch !== match.watch) {\r\n                    return tasks;\r\n                }\r\n            }\r\n\r\n\r\n            let task: ITask = new target();\r\n            task.decorator = tinfo;\r\n            tasks.push(task);\r\n        } else if (target['__dynamictask']) {\r\n            let tinfo: ITaskInfo = target['__dynamictask'];\r\n            if (match) {\r\n                if (match.oper && tinfo.oper && (tinfo.oper & match.oper) <= 0) {\r\n                    return tasks;\r\n                }\r\n\r\n                if (match.group && tinfo.group !== match.group) {\r\n                    return tasks;\r\n                }\r\n            }\r\n\r\n            if (tinfo.watch) {\r\n                if (!match || !match.watch) {\r\n                    return tasks;\r\n                } else if (tinfo.watch !== match.watch) {\r\n                    return tasks;\r\n                }\r\n            }\r\n\r\n            let dyts = (<IDynamicTasks>new target()).tasks()\r\n            tasks = tasks.concat(generateTask(dyts, match));\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            tasks.concat(findTasks(sm, match));\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return;\r\n            }\r\n            console.log(chalk.grey('find task from :'), chalk.cyan(key));\r\n            tasks = tasks.concat(findTasks(target[key], match));\r\n        });\r\n    }\r\n\r\n    return tasks;\r\n}\r\n\r\n/**\r\n * decorator task define implements ITaskDefine.\r\n * \r\n * @export\r\n * @param {Function} constructor\r\n */\r\nexport function taskdefine<T extends Function>(target?: (new <T>() => T)): any {\r\n    if (_.isFunction(target)) {\r\n        target['__taskdefine'] = true;\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__taskdefine'] = tg || true;\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * get all taskdefine in module.\r\n * \r\n * @export\r\n * @param {any} target\r\n * @returns\r\n */\r\nexport function findTaskDefines(target): ITaskDefine[] {\r\n    let defs: ITaskDefine[] = [];\r\n    if (!target) {\r\n        return defs;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__taskdefine']) {\r\n            defs.push(<ITaskDefine>new target());\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            defs.concat(findTaskDefines(sm));\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return;\r\n            }\r\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\r\n            defs = defs.concat(findTaskDefines(target[key]));\r\n        });\r\n    }\r\n\r\n    return defs;\r\n}\r\n\r\n\r\n/**\r\n * get one taskdefine in module.\r\n * \r\n * @export\r\n * @param {any} target\r\n * @returns\r\n */\r\nexport function findTaskDefine(target): ITaskDefine {\r\n    let def: ITaskDefine;\r\n    if (!target) {\r\n        return null;\r\n    }\r\n    if (_.isFunction(target)) {\r\n        if (target['__taskdefine']) {\r\n            def = <ITaskDefine>new target();\r\n        }\r\n    } else if (_.isArray(target)) {\r\n        _.each(target, sm => {\r\n            if (def) {\r\n                return false;\r\n            }\r\n            def = findTaskDefine(sm);\r\n            return true;\r\n        });\r\n    } else {\r\n        _.each(_.keys(target), key => {\r\n            if (def) {\r\n                return false;\r\n            }\r\n            if (!key || !target[key] || /^[0-9]+$/.test(key)) {\r\n                return true;\r\n            }\r\n            console.log(chalk.grey('find task define from :'), chalk.cyan(key));\r\n            def = findTaskDefine(target[key]);\r\n            return true;\r\n        });\r\n    }\r\n\r\n    return def;\r\n}\r\n\r\n/**\r\n * find one taskdefine in module.\r\n * \r\n * @export\r\n * @param {(string | Object)} md\r\n * @returns {Promise<ITaskDefine>}\r\n */\r\nexport function findTaskDefineInModule(md: string | Object): Promise<ITaskDefine> {\r\n    let tsdef;\r\n    try {\r\n        if (_.isString(md)) {\r\n            tsdef = findTaskDefine(require(md));\r\n        } else {\r\n            tsdef = findTaskDefine(md);\r\n        }\r\n    } catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    if (tsdef) {\r\n        return Promise.resolve(tsdef);\r\n    } else {\r\n        // console.error('can not found task config builder method in module {0}.', mdl);\r\n        return Promise.reject('can not found task define.');\r\n    }\r\n}\r\n\r\n\r\nexport function findTasksInModule(md: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n    let mdls;\r\n    try {\r\n        if (_.isString(md)) {\r\n            mdls = findTasks(require(md), match);\r\n        } else {\r\n            mdls = findTasks(md, match);\r\n        }\r\n    } catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    return Promise.resolve(mdls);\r\n}\r\n\r\n\r\n/**\r\n * find one task define in directories.\r\n * \r\n * @export\r\n * @param {Src} dirs\r\n * @returns {Promise<ITaskDefine>}\r\n */\r\nexport function findTaskDefineInDir(dirs: Src): Promise<ITaskDefine> {\r\n    return Promise.race<ITaskDefine>(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\r\n        return new Promise<ITaskDefine>((resolve, reject) => {\r\n            if (existsSync(dir)) {\r\n                let mdl = requireDir(dir);\r\n                if (mdl) {\r\n                    let def = findTaskDefine(mdl);\r\n                    if (def) {\r\n                        resolve(def);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }));\r\n}\r\n\r\n/**\r\n * find tasks in directories.\r\n * \r\n * @export\r\n * @param {Src} dirs\r\n * @param {ITaskInfo} [match]\r\n * @returns {Promise<ITask[]>}\r\n */\r\nexport function findTasksInDir(dirs: Src, match?: ITaskInfo): Promise<ITask[]> {\r\n    return Promise.all(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\r\n        console.log(chalk.grey('begin load task from dir'), chalk.cyan(dir));\r\n        try {\r\n            let mdl = requireDir(dir, { recurse: true });\r\n            return Promise.resolve(findTasks(mdl, match));\r\n        } catch (err) {\r\n            return Promise.reject(err);\r\n        }\r\n    }))\r\n        .then(tasks => {\r\n            return _.flatten(tasks);\r\n        });\r\n}"]}