{"version":3,"sources":["decorator.ts"],"names":["task","target","_","isFunction","tg_1","dynamicTask","tg_2","taskdefine","tg_3","require","exports"],"mappings":"YAYA,SAAAA,MAAyCC,GACrC,GAAIC,EAAEC,WAAWF,GAEb,MADAA,GAAe,UACRA,CAEP,IAAIG,GAAKH,CACT,OAAO,UAACA,GAEJ,MADAA,GAAe,OAAIG,MACZH,GAanB,QAAAI,aAAgDJ,GAC5C,GAAIA,GAAUC,EAAEC,WAAWF,GAEvB,MADAA,GAAsB,iBACfA,CAEP,IAAIK,GAAKL,CACT,OAAO,UAACA,GAEJ,MADAA,GAAsB,cAAIK,MACnBL,GAWnB,QAAAM,YAA+CN,GAC3C,GAAIC,EAAEC,WAAWF,GAEb,MADAA,GAAuB,gBAAI,EACpBA,CAEP,IAAIO,GAAKP,CACT,OAAO,UAACA,GAEJ,MADAA,GAAuB,eAAIO,IAAM,EAC1BP,0DA5DnBQ,QAAA,mBACA,IAAAP,GAAAO,QAAA,SAWAC,SAAAV,KAAAA,KAqBAU,QAAAL,YAAAA,YAmBAK,QAAAH,WAAAA","file":"../decorator.js","sourcesContent":["import 'reflect-metadata';\r\nimport * as _ from 'lodash';\r\nimport { ITaskDecorator } from './ITaskDecorator';\r\n\r\n\r\n/**\r\n * task decorator.\r\n *\r\n * @export\r\n * @param {ITaskDecorator} type\r\n * @returns\r\n */\r\nexport function task<T extends Function>(target?: (new <T>() => T) | ITaskDecorator): any {\r\n    if (_.isFunction(target)) {\r\n        target['__task'] = {};\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__task'] = tg || {};\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * dynamic task decorator.\r\n *\r\n * @export\r\n * @template T\r\n * @param {((new <T>() => T) | ITaskDecorator)} [target]\r\n * @returns {*}\r\n */\r\nexport function dynamicTask<T extends Function>(target?: (new <T>() => T) | ITaskDecorator): any {\r\n    if (target && _.isFunction(target)) {\r\n        target['__dynamictask'] = {};\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__dynamictask'] = tg || {};\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * decorator task define implements ITaskDefine.\r\n *\r\n * @export\r\n * @param {Function} constructor\r\n */\r\nexport function taskdefine<T extends Function>(target?: (new <T>() => T)): any {\r\n    if (_.isFunction(target)) {\r\n        target['__task_context'] = true;\r\n        return target;\r\n    } else {\r\n        let tg = target;\r\n        return (target: any) => {\r\n            target['__task_context'] = tg || true;\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\n"]}