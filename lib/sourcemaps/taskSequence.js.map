{"version":3,"sources":["taskSequence.js","taskSequence.ts"],"names":["toSequence","gulp","tasks","ctx","zipName","seq","len","length","utils_1","sortOrder","t","getInfo","order","hasWatchtasks","_","each","info","oper","tname","setup","TaskConfig_1","Operation","watch","push","registerTasks","autoWatch","wname","task","src","getSrc","console","log","chalk","cyan","call","isArray","watchname","taskSequenceWatch","it","indexOf","globals","registerGlobals","hasRegistered","error","red","process","exit","express","option","_ret2","wats","name","isBoolean","toWatchSeq","filterTaskSequence","zipSequence","v","_typeof","registerZipTask","i","taskname","runSequence","first","last","RunWay","sequence","fs","ls","parallel","flattenSequence","result","tk","zipSrc","some","addToSequence","taskSequence","rst","taskName","isNumber","isFunction","Math","round","splice","rseq","isString","filter","itm","run","Promise","resolve","reject","ps","then","startTask","catch","err","taskErr","taskStop","reslove","tskmap","e","values","on","start","runTaskSequence","taskseq","require","exports"],"mappings":"AAAA,YCkBA,SAAAA,YAA2BC,EAAYC,EAAgBC,EAAmBC,GACtE,GAAIC,MACAC,EAAMJ,EAAMK,MAChB,IAAID,EAAM,EACN,MAAOD,EAEXH,GAAQM,QAAAC,UAAiBP,EAAO,SAAAQ,GAAA,MAAKA,GAAEC,UAAUC,OAEjD,IAAIC,KACJC,GAAEC,KAAKb,EAAO,SAAAQ,GACV,GAAIM,GAAON,EAAEC,SACTK,GAAKC,KAAOd,EAAIc,OAAM,WACtB,GAAIC,GAAQR,EAAES,MAAMhB,EAAKF,EACzB,IAAIiB,IAEKF,EAAKC,KAAOG,aAAAC,UAAUC,OACvBT,EAAcU,KAAKL,GAEvBM,cAAcrB,EAAKe,GACnBb,EAAIkB,KAAKL,GAEJf,EAAIc,KAAOG,aAAAC,UAAUC,OAAWN,EAAKC,KAAOG,aAAAC,UAAUI,WAAY,CACnE,GAAIC,GAAQR,EAAQ,SACpBM,eAAcrB,EAAKuB,GACnBzB,EAAK0B,KAAKD,EAAO,WACb,GAAIE,GAAMzB,EAAI0B,OAAOb,EACrBc,SAAQC,IAAI,cAAeC,MAAMC,KAAKC,KAAKF,MAAOJ,IAClD3B,EAAKqB,MAAMM,EAAKd,EAAEqB,QAAQjB,GAASA,GAAiBA,MAGxDL,EAAcU,KAAKG,GACnBrB,EAAIkB,KAAKG,QAMzB,IAAIU,GAAYC,kBAAkBpC,EAAMI,EAAKF,EAAK,SAAAmC,GAC9C,QAAKA,MAGDzB,EAAcN,OAAS,IAChBM,EAAc0B,QAAQD,GAAM,IAGxClC,EAMH,OALIgC,KACAZ,cAAcrB,EAAKiC,GACnB/B,EAAIkB,KAAKa,IAGN/B,EAGX,QAAAmB,eAAuBrB,EAAmBD,GACtCC,EAAIqC,QAAQtC,MAAQC,EAAIqC,QAAQtC,UAC5BY,EAAEqB,QAAQjC,GACVY,EAAEC,KAAKb,EAAO,SAAAQ,GAAA,MAAK+B,iBAAgBtC,EAAKO,KAExC+B,gBAAgBtC,EAAKD,GAI7B,QAAAwC,eAAuBvC,EAAmBwB,GAEtC,MADAxB,GAAIqC,QAAQtC,MAAQC,EAAIqC,QAAQtC,YACxBC,EAAIqC,QAAQtC,MAAMyB,GAG9B,QAAAc,iBAAyBtC,EAAmBwB,GACpCxB,EAAIqC,QAAQtC,MAAMyB,IAClBG,QAAQa,MAAMX,MAAMY,IAAI,kBAAmBZ,MAAMC,KAAKN,IACtDkB,QAAQC,KAAK,IAEb3C,EAAIqC,QAAQtC,MAAMyB,GAAQA,EAelC,QAAAU,mBAAkCpC,EAAYC,EAAcC,EAAmB4C,EAAoC3C,GAE/G,GAAKD,EAAIc,KAAOG,aAAAC,UAAUC,OAAUnB,EAAI6C,OAAO1B,MAAO,CAAA,GAAA2B,GAAA,WAClD,GAAIC,MACAC,EAAO,EACX,IAAIrC,EAAEsC,UAAUjD,EAAI6C,OAAO1B,OAAQ,CAC/B,GAAI+B,GAAaC,mBAAmBpD,EAAO6C,EAC3CI,GAAOI,YAAYtD,EAAMoD,EAAYlD,EAAKC,GAC1C+C,GAAQD,EAAK3B,KAAK4B,OAElBD,GAAO/C,EAAI6C,OAAO1B,KAGtB,IAAI4B,EAAK3C,OAAS,EAOd,MANA4C,GAAOA,EAAOA,EAAO,UAAY,SACjClD,EAAK0B,KAAKwB,EAAM,WACZ,GAAIvB,GAAMzB,EAAI0B,QACdC,SAAQC,IAAI,cAAeC,MAAMC,KAAKC,KAAKF,MAAOJ,IAClD3B,EAAKqB,MAAMM,EAAKsB,MAEpBM,EAAOL,KAlBuC,IAAA,YAAA,mBAAAF,GAAA,YAAAQ,QAAAR,IAAA,MAAAA,GAAAO,EAqBtD,MAAO,GAGX,QAAAE,iBAAyBzD,EAAYkD,EAAcjD,EAAcC,GAG7D,IAFA,GAAIwD,GAAI,EACJC,EAAWT,EACRT,cAAcvC,EAAKyD,IAAaD,EAAI,IACvCC,EAAWT,EAAOQ,EAClB7B,QAAQC,IAAI,sBAAuBC,MAAMC,KAAK2B,IAC9CD,GAEJ,OAAIA,IAAK,IACL7B,QAAQa,MAAMX,MAAMY,IAAI,kBAAmBZ,MAAMC,KAAKkB,GAAO,mBACtD,KAGXV,gBAAgBtC,EAAKyD,GACrB3D,EAAK0B,KAAKiC,EAAU,WAChB,MAAOC,aAAY5D,EAAMC,KAEtB0D,GAaX,QAAAL,aAA4BtD,EAAYC,EAAcC,EAAmBC,GACrE,GAAIF,EAAMK,OAAS,EAAG,CAClB,GAAIuD,GAAQhD,EAAEgD,MAAM5D,EACpB4D,GAAQhD,EAAEqB,QAAQ2B,GAAShD,EAAEgD,MAAMA,GAASA,CAC5C,IAAIC,GAAOjD,EAAEiD,KAAK7D,EAClB6D,GAAOjD,EAAEqB,QAAQ4B,GAAQjD,EAAEiD,KAAKA,GAAQA,CACxC,IAAIZ,GAAUW,EAAV,IAAmBC,CAEvB,OADAZ,GAAO/C,EAAUA,EAAQ+C,EAAM/B,aAAA4C,OAAOC,SAAU9D,GAAOgD,EAAO,OACvDO,gBAAgBzD,EAAMkD,EAAMjD,EAAOC,GAEvC,GAAqB,IAAjBD,EAAMK,OAAc,CAC3B,GAAIuD,GAAQhD,EAAEgD,MAAM5D,EACpB,IAAIY,EAAEqB,QAAQ2B,GAAQ,CAClB,GAAIA,EAAMvD,OAAS,EAAG,CAClB,GAAI2D,GAAKpD,EAAEgD,MAAMA,GACbK,EAAKrD,EAAEiD,KAAKD,GACZX,EAAUe,EAAV,IAAgBC,CAEpB,OADAhB,GAAO/C,EAAUA,EAAQ+C,EAAM/B,aAAA4C,OAAOI,SAAUjE,GAAOgD,EAAO,SACvDO,gBAAgBzD,EAAMkD,EAAMjD,EAAOC,GAE1C,MAAOW,GAAEgD,MAAMA,IAAU,GAG7B,MAAOA,IAAS,GAIxB,MAAO,GAaX,QAAAO,iBAAgCpE,EAAYC,EAAcC,EAAmBC,GACzE,GAAIkE,KAWJ,OAVAxD,GAAEC,KAAKb,EAAO,SAAAqE,GACV,GAAIzD,EAAEqB,QAAQoC,GAAK,CACf,GAAIC,GAAiB1D,EAAE2D,KAAKF,EAAI,SAAA7D,GAAA,MAAKI,GAAEqB,QAAQzB,KAAO6D,GAAMA,GACxDX,EAAWL,YAAYtD,EAAMuE,EAAQrE,EAAKC,EAC9CwD,IAAYU,EAAO/C,KAAKqC,OAExBU,GAAO/C,KAAKgD,KAIbD,EAWX,QAAAI,eAA8BC,EAAqBC,GAC/C,IAAKA,EACD,MAAOD,EAEX,IAAIC,EAAIC,SAAU,CACd,GAAIjE,GAAQ,EACRN,EAAMqE,EAAapE,OAAS,CAC5BO,GAAEgE,SAASF,EAAIhE,OACfA,EAAQgE,EAAIhE,MACLE,EAAEiE,WAAWH,EAAIhE,SACxBA,EAAQgE,EAAIhE,MAAMN,IAGlBQ,EAAEgE,SAASlE,KACPA,EAAQ,GAAKA,EAAQ,EACrBA,EAAQoE,KAAKC,MAAMrE,EAAQN,GACV,IAAVM,EACPA,EAAQN,EACDM,EAAQN,IACfM,EAAQoE,KAAKC,MAAMrE,EAAQN,KAG/BM,EAAQ,IACRA,EAAQ,GAGRA,GAAS,GAAKA,EAAQ+D,EAAapE,OACnCoE,EAAaO,OAAOtE,EAAO,EAAGgE,EAAIC,UAElCF,EAAapD,KAAKqD,EAAIC,UAG9B,MAAOF,GAWX,QAAArB,oBAA4BjD,EAAY0C,GACpC,GAAIoC,KAYJ,OAXApC,GAAUA,GAAY,SAACT,GAAD,QAAUA,GAChCxB,EAAEC,KAAKV,EAAK,SAAAiC,GACHA,IAGDxB,EAAEsE,SAAS9C,IAAOS,EAAQT,GAC1B6C,EAAK5D,KAAKe,GACHxB,EAAEqB,QAAQG,IACjB6C,EAAK5D,KAAKT,EAAEuE,OAAO/C,EAAI,SAAAgD,GAAA,MAAOvC,GAAQuC,SAGvCH,EAYX,QAAAtB,aAA4B5D,EAAYC,GACpCA,EAAQoD,mBAAmBpD,GAC3B4B,QAAQC,IAAI,eAAgBC,MAAMC,KAAU/B,GAC5C,IAAIqF,GAAM,GAAIC,SAAQ,SAACC,EAASC,GAC5B,GAAIC,GAAmB,IAcvB,OAbIzF,IAASA,EAAMK,OAAS,EACxBO,EAAEC,KAAKb,EAAO,SAAAyB,GAENgE,EADAA,EACKA,EAAGC,KAAK,WACT,MAAOC,WAAU5F,EAAM0B,KAGtBkE,UAAU5F,EAAM0B,KAI7BgE,EAAKH,QAAQC,UAEVE,EACFC,KAAKH,GACLK,MAAMJ,IAEf,OAAOH,GAAIO,MAAM,SAAAC,GACbjE,QAAQa,MAAMX,MAAMY,IAAImD,MAYhC,QAAAF,WAAmB5F,EAAY0B,GAC3B,GAAIqE,GAAU,KAAMC,EAAW,IAC/B,OAAO,IAAIT,SAAQ,SAACU,EAASR,GACzB,GAAIS,KACJrF,GAAEC,KAAKD,EAAEqB,QAAQR,GAAQA,GAAQA,GAAO,SAAAjB,GACpCyF,EAAOzF,IAAK,IAEhBsF,EAAU,SAACD,GACPlD,QAAQC,KAAKiD,GACbjE,QAAQa,MAAMX,MAAMY,IAAImD,IACxBL,EAAOK,IAEXE,EAAW,SAACG,GACRD,EAAOC,EAAEzE,OAAQ,EACZb,EAAE2D,KAAK3D,EAAEuF,OAAOF,GAAS,SAAA7D,GAAA,OAAOA,KACjC4D,KAGRjG,EAAKqG,GAAG,YAAaL,GAChBK,GAAG,WAAYN,GACpB/F,EAAKsG,MAAM5E,KAEViE,KAAK,WACE3F,EAAA,iBACAA,EAAA,eAAuB,YAAagG,GACpChG,EAAA,eAAuB,WAAY+F,KAExC,SAAAD,GACK9F,EAAA,iBACAA,EAAA,eAAuB,YAAagG,GACpChG,EAAA,eAAuB,WAAY+F,MAgBnD,QAAAQ,iBAAgCvG,EAAYC,EAAmCC,EAAmBC,GAC9F,MAAOoF,SAAQC,QAAQvF,GAClB0F,KAAK,SAAA1F,GACF,GAAIuG,GAAUzG,WAAWC,EAAMC,EAAOC,EAAKC,EAC3C,OAAOyD,aAAY5D,EAAMwG,2NA1XzB3F,EAAC4F,QAAM,UAEP1E,MAAK0E,QAAM,SACvBtF,aAAAsF,QAAuE,gBACvElG,QAAAkG,QAA0B,UAcVC,SAAA3G,WAAUA,WAwFV2G,QAAAtE,kBAAiBA,kBAwDjBsE,QAAApD,YAAWA,YAwCXoD,QAAAtC,gBAAeA,gBAuBfsC,QAAAjC,cAAaA,cAoEbiC,QAAA9C,YAAWA,YAiFX8C,QAAAH,gBAAeA","file":"../taskSequence.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst TaskConfig_1 = require('./TaskConfig');\nconst utils_1 = require('./utils');\n/**\n * convert setup task result to run sequence src.\n *\n * @export\n * @param {Gulp} gulp\n * @param {ITask[]} tasks\n * @param {ITaskContext} ctx\n * @param {ZipTaskName} [zipName]\n * @returns {Src[]}\n */\nfunction toSequence(gulp, tasks, ctx, zipName) {\n    let seq = [];\n    let len = tasks.length;\n    if (len < 1) {\n        return seq;\n    }\n    tasks = utils_1.sortOrder(tasks, t => t.getInfo().order);\n    let hasWatchtasks = [];\n    _.each(tasks, t => {\n        let info = t.getInfo();\n        if (info.oper & ctx.oper) {\n            let tname = t.setup(ctx, gulp);\n            if (tname) {\n                // is watch task.\n                if ((info.oper & TaskConfig_1.Operation.watch)) {\n                    hasWatchtasks.push(tname);\n                }\n                registerTasks(ctx, tname);\n                seq.push(tname);\n                // autoWatch\n                if ((ctx.oper & TaskConfig_1.Operation.watch) && (info.oper & TaskConfig_1.Operation.autoWatch)) {\n                    let wname = tname + '-twatch';\n                    registerTasks(ctx, wname);\n                    gulp.task(wname, () => {\n                        let src = ctx.getSrc(info);\n                        console.log('watch, src:', chalk.cyan.call(chalk, src));\n                        gulp.watch(src, _.isArray(tname) ? tname : [tname]);\n                    });\n                    hasWatchtasks.push(wname);\n                    seq.push(wname);\n                }\n            }\n        }\n    });\n    let watchname = taskSequenceWatch(gulp, seq, ctx, it => {\n        if (!it) {\n            return false;\n        }\n        if (hasWatchtasks.length > 0) {\n            return hasWatchtasks.indexOf(it) < 0;\n        }\n        return true;\n    }, zipName);\n    if (watchname) {\n        registerTasks(ctx, watchname);\n        seq.push(watchname);\n    }\n    return seq;\n}\nexports.toSequence = toSequence;\nfunction registerTasks(ctx, tasks) {\n    ctx.globals.tasks = ctx.globals.tasks || {};\n    if (_.isArray(tasks)) {\n        _.each(tasks, t => registerGlobals(ctx, t));\n    }\n    else {\n        registerGlobals(ctx, tasks);\n    }\n}\nfunction hasRegistered(ctx, task) {\n    ctx.globals.tasks = ctx.globals.tasks || {};\n    return (ctx.globals.tasks[task]) ? true : false;\n}\nfunction registerGlobals(ctx, task) {\n    if (ctx.globals.tasks[task]) {\n        console.error(chalk.red('has same task:'), chalk.cyan(task));\n        process.exit(0);\n    }\n    else {\n        ctx.globals.tasks[task] = task;\n    }\n}\n/**\n * generate watch task for sequence\n *\n * @export\n * @param {Gulp} gulp\n * @param {Src[]} tasks\n * @param {ITaskContext} ctx\n * @param {(str: string) => boolean} [express]\n * @param {ZipTaskName} [zipName]\n * @returns {string}\n */\nfunction taskSequenceWatch(gulp, tasks, ctx, express, zipName) {\n    // create watch task.\n    if ((ctx.oper & TaskConfig_1.Operation.watch) && ctx.option.watch) {\n        let wats = [];\n        let name = '';\n        if (_.isBoolean(ctx.option.watch)) {\n            let toWatchSeq = filterTaskSequence(tasks, express);\n            name = zipSequence(gulp, toWatchSeq, ctx, zipName);\n            name && wats.push(name);\n        }\n        else {\n            wats = ctx.option.watch;\n        }\n        if (wats.length > 0) {\n            name = name ? name + '-owatch' : 'owatch';\n            gulp.task(name, () => {\n                let src = ctx.getSrc();\n                console.log('watch, src:', chalk.cyan.call(chalk, src));\n                gulp.watch(src, wats);\n            });\n            return name;\n        }\n    }\n    return '';\n}\nexports.taskSequenceWatch = taskSequenceWatch;\nfunction registerZipTask(gulp, name, tasks, ctx) {\n    let i = 0;\n    let taskname = name;\n    while (hasRegistered(ctx, taskname) && i < 50) {\n        taskname = name + i;\n        console.log('try register name: ', chalk.cyan(taskname));\n        i++;\n    }\n    if (i >= 50) {\n        console.error(chalk.red('has same task:'), chalk.cyan(name), 'too many times.');\n        return '';\n    }\n    registerGlobals(ctx, taskname);\n    gulp.task(taskname, () => {\n        return runSequence(gulp, tasks);\n    });\n    return taskname;\n}\n/**\n * zip tasks to a single task.\n *\n * @export\n * @param {Gulp} gulp\n * @param {Src[]} tasks\n * @param {ITaskContext} ctx\n * @param {ZipTaskName} [zipName]\n * @returns {string}\n */\nfunction zipSequence(gulp, tasks, ctx, zipName) {\n    if (tasks.length > 1) {\n        let first = _.first(tasks);\n        first = _.isArray(first) ? _.first(first) : first;\n        let last = _.last(tasks);\n        last = _.isArray(last) ? _.last(last) : last;\n        let name = `${first}-${last}`;\n        name = zipName ? zipName(name, TaskConfig_1.RunWay.sequence, ctx) : name + '-seq';\n        return registerZipTask(gulp, name, tasks, ctx);\n    }\n    else if (tasks.length === 1) {\n        let first = _.first(tasks);\n        if (_.isArray(first)) {\n            if (first.length > 1) {\n                let fs = _.first(first);\n                let ls = _.last(first);\n                let name = `${fs}-${ls}`;\n                name = zipName ? zipName(name, TaskConfig_1.RunWay.parallel, ctx) : name + '-paral';\n                return registerZipTask(gulp, name, tasks, ctx);\n            }\n            else {\n                return _.first(first) || '';\n            }\n        }\n        else {\n            return first || '';\n        }\n    }\n    return '';\n}\nexports.zipSequence = zipSequence;\n/**\n * flatten task Sequence.\n *\n * @export\n * @param {Gulp} gulp\n * @param {Src[]} tasks\n * @param {ITaskContext} ctx\n * @param {ZipTaskName} [zipName]\n * @returns {string[]}\n */\nfunction flattenSequence(gulp, tasks, ctx, zipName) {\n    let result = [];\n    _.each(tasks, tk => {\n        if (_.isArray(tk)) {\n            let zipSrc = (_.some(tk, t => _.isArray(t))) ? tk : [tk];\n            let taskname = zipSequence(gulp, zipSrc, ctx, zipName);\n            taskname && result.push(taskname);\n        }\n        else {\n            result.push(tk);\n        }\n    });\n    return result;\n}\nexports.flattenSequence = flattenSequence;\n/**\n * add task to task sequence.\n *\n * @export\n * @param {Src[]} taskSequence\n * @param {ITaskInfo} rst\n * @returns\n */\nfunction addToSequence(taskSequence, rst) {\n    if (!rst) {\n        return taskSequence;\n    }\n    if (rst.taskName) {\n        let order = 1;\n        let len = taskSequence.length + 1;\n        if (_.isNumber(rst.order)) {\n            order = rst.order;\n        }\n        else if (_.isFunction(rst.order)) {\n            order = rst.order(len);\n        }\n        if (_.isNumber(order)) {\n            if (order > 0 && order < 1) {\n                order = Math.round(order * len);\n            }\n            else if (order === 1) {\n                order = len;\n            }\n            else if (order > len) {\n                order = Math.round(order % len);\n            }\n        }\n        if (order < 0) {\n            order = 0;\n        }\n        if (order >= 0 && order < taskSequence.length) {\n            taskSequence.splice(order, 0, rst.taskName);\n        }\n        else {\n            taskSequence.push(rst.taskName);\n        }\n    }\n    return taskSequence;\n}\nexports.addToSequence = addToSequence;\n/**\n * filter task sequence. make sure no empty.\n *\n * @param {Src[]} seq\n * @param {(str: string) => boolean} [filter]\n * @returns {Src[]}\n */\nfunction filterTaskSequence(seq, express) {\n    let rseq = [];\n    express = express || ((it) => !!it);\n    _.each(seq, it => {\n        if (!it) {\n            return;\n        }\n        if (_.isString(it) && express(it)) {\n            rseq.push(it);\n        }\n        else if (_.isArray(it)) {\n            rseq.push(_.filter(it, itm => express(itm)));\n        }\n    });\n    return rseq;\n}\n/**\n * run task sequence.\n *\n * @protected\n * @param {Gulp} gulp\n * @param {Src[]} tasks\n * @returns {Promise<any>}\n *\n * @memberOf Development\n */\nfunction runSequence(gulp, tasks) {\n    tasks = filterTaskSequence(tasks);\n    console.log('run tasks : ', chalk.cyan(tasks));\n    let run = new Promise((resolve, reject) => {\n        let ps = null;\n        if (tasks && tasks.length > 0) {\n            _.each(tasks, task => {\n                if (ps) {\n                    ps = ps.then(() => {\n                        return startTask(gulp, task);\n                    });\n                }\n                else {\n                    ps = startTask(gulp, task);\n                }\n            });\n        }\n        else {\n            ps = Promise.resolve();\n        }\n        return ps\n            .then(resolve)\n            .catch(reject);\n    });\n    return run.catch(err => {\n        console.error(chalk.red(err));\n        // process.exit(0);\n    });\n}\nexports.runSequence = runSequence;\n/**\n * start task.\n *\n * @param {Gulp} gulp\n * @param {Src} task\n * @returns {Promise<any>}\n */\nfunction startTask(gulp, task) {\n    let taskErr = null, taskStop = null;\n    return new Promise((reslove, reject) => {\n        let tskmap = {};\n        _.each(_.isArray(task) ? task : [task], t => {\n            tskmap[t] = false;\n        });\n        taskErr = (err) => {\n            process.exit(err);\n            console.error(chalk.red(err));\n            reject(err);\n        };\n        taskStop = (e) => {\n            tskmap[e.task] = true;\n            if (!_.some(_.values(tskmap), it => !it)) {\n                reslove();\n            }\n        };\n        gulp.on('task_stop', taskStop)\n            .on('task_err', taskErr);\n        gulp.start(task);\n    })\n        .then(() => {\n        if (gulp['removeListener']) {\n            gulp['removeListener']('task_stop', taskStop);\n            gulp['removeListener']('task_err', taskErr);\n        }\n    }, err => {\n        if (gulp['removeListener']) {\n            gulp['removeListener']('task_stop', taskStop);\n            gulp['removeListener']('task_err', taskErr);\n        }\n        // process.exit(0);\n    });\n}\n/**\n * run task sequence\n *\n * @export\n * @param {Gulp} gulp\n * @param {(ITask[] | Promise<ITask[]>)} tasks\n * @param {ITaskContext} ctx\n * @param {ZipTaskName} [zipName]\n * @returns {Promise<any>}\n */\nfunction runTaskSequence(gulp, tasks, ctx, zipName) {\n    return Promise.resolve(tasks)\n        .then(tasks => {\n        let taskseq = toSequence(gulp, tasks, ctx, zipName);\n        return runSequence(gulp, taskseq);\n    });\n}\nexports.runTaskSequence = runTaskSequence;\n","import * as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport { Src, RunWay, ITaskInfo, ITaskContext, ITask, Operation } from './TaskConfig';\r\nimport { sortOrder } from './utils';\r\n\r\n\r\nexport type ZipTaskName = (name: string, runWay?: RunWay, ctx?: ITaskContext) => string\r\n/**\r\n * convert setup task result to run sequence src.\r\n * \r\n * @export\r\n * @param {Gulp} gulp\r\n * @param {ITask[]} tasks\r\n * @param {ITaskContext} ctx\r\n * @param {ZipTaskName} [zipName]\r\n * @returns {Src[]}\r\n */\r\nexport function toSequence(gulp: Gulp, tasks: ITask[], ctx: ITaskContext, zipName?: ZipTaskName): Src[] {\r\n    let seq: Src[] = [];\r\n    let len = tasks.length;\r\n    if (len < 1) {\r\n        return seq;\r\n    }\r\n    tasks = sortOrder<ITask>(tasks, t => t.getInfo().order);\r\n\r\n    let hasWatchtasks = [];\r\n    _.each(tasks, t => {\r\n        let info = t.getInfo();\r\n        if (info.oper & ctx.oper) {\r\n            let tname = t.setup(ctx, gulp);\r\n            if (tname) {\r\n                // is watch task.\r\n                if ((info.oper & Operation.watch)) {\r\n                    hasWatchtasks.push(tname);\r\n                }\r\n                registerTasks(ctx, tname);\r\n                seq.push(tname);\r\n                // autoWatch\r\n                if ((ctx.oper & Operation.watch) && (info.oper & Operation.autoWatch)) {\r\n                    let wname = tname + '-twatch';\r\n                    registerTasks(ctx, wname);\r\n                    gulp.task(wname, () => {\r\n                        let src = ctx.getSrc(info);\r\n                        console.log('watch, src:', chalk.cyan.call(chalk, src));\r\n                        gulp.watch(src, _.isArray(tname) ? tname : [<string>tname]);\r\n                    });\r\n\r\n                    hasWatchtasks.push(wname);\r\n                    seq.push(wname);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    let watchname = taskSequenceWatch(gulp, seq, ctx, it => {\r\n        if (!it) {\r\n            return false;\r\n        }\r\n        if (hasWatchtasks.length > 0) {\r\n            return hasWatchtasks.indexOf(it) < 0;\r\n        }\r\n        return true;\r\n    }, zipName);\r\n    if (watchname) {\r\n        registerTasks(ctx, watchname);\r\n        seq.push(watchname);\r\n    }\r\n\r\n    return seq;\r\n}\r\n\r\nfunction registerTasks(ctx: ITaskContext, tasks: Src) {\r\n    ctx.globals.tasks = ctx.globals.tasks || {};\r\n    if (_.isArray(tasks)) {\r\n        _.each(tasks, t => registerGlobals(ctx, t));\r\n    } else {\r\n        registerGlobals(ctx, tasks);\r\n    }\r\n}\r\n\r\nfunction hasRegistered(ctx: ITaskContext, task: string) {\r\n    ctx.globals.tasks = ctx.globals.tasks || {};\r\n    return (ctx.globals.tasks[task]) ? true : false;\r\n}\r\n\r\nfunction registerGlobals(ctx: ITaskContext, task: string) {\r\n    if (ctx.globals.tasks[task]) {\r\n        console.error(chalk.red('has same task:'), chalk.cyan(task));\r\n        process.exit(0);\r\n    } else {\r\n        ctx.globals.tasks[task] = task;\r\n    }\r\n}\r\n\r\n/**\r\n * generate watch task for sequence\r\n * \r\n * @export\r\n * @param {Gulp} gulp\r\n * @param {Src[]} tasks\r\n * @param {ITaskContext} ctx\r\n * @param {(str: string) => boolean} [express]\r\n * @param {ZipTaskName} [zipName]\r\n * @returns {string}\r\n */\r\nexport function taskSequenceWatch(gulp: Gulp, tasks: Src[], ctx: ITaskContext, express?: (str: string) => boolean, zipName?: ZipTaskName): string {\r\n    // create watch task.\r\n    if ((ctx.oper & Operation.watch) && ctx.option.watch) {\r\n        let wats = [];\r\n        let name = '';\r\n        if (_.isBoolean(ctx.option.watch)) {\r\n            let toWatchSeq = filterTaskSequence(tasks, express);\r\n            name = zipSequence(gulp, toWatchSeq, ctx, zipName);\r\n            name && wats.push(name);\r\n        } else {\r\n            wats = ctx.option.watch;\r\n        }\r\n\r\n        if (wats.length > 0) {\r\n            name = name ? name + '-owatch' : 'owatch';\r\n            gulp.task(name, () => {\r\n                let src = ctx.getSrc();\r\n                console.log('watch, src:', chalk.cyan.call(chalk, src));\r\n                gulp.watch(src, wats)\r\n            });\r\n            return name;\r\n        }\r\n    }\r\n    return '';\r\n}\r\n\r\nfunction registerZipTask(gulp: Gulp, name: string, tasks: Src[], ctx: ITaskContext) {\r\n    let i = 0;\r\n    let taskname = name;\r\n    while (hasRegistered(ctx, taskname) && i < 50) {\r\n        taskname = name + i;\r\n        console.log('try register name: ', chalk.cyan(taskname));\r\n        i++;\r\n    }\r\n    if (i >= 50) {\r\n        console.error(chalk.red('has same task:'), chalk.cyan(name), 'too many times.');\r\n        return '';\r\n    }\r\n\r\n    registerGlobals(ctx, taskname);\r\n    gulp.task(taskname, () => {\r\n        return runSequence(gulp, tasks);\r\n    });\r\n    return taskname;\r\n}\r\n\r\n/**\r\n * zip tasks to a single task.\r\n * \r\n * @export\r\n * @param {Gulp} gulp\r\n * @param {Src[]} tasks\r\n * @param {ITaskContext} ctx\r\n * @param {ZipTaskName} [zipName]\r\n * @returns {string}\r\n */\r\nexport function zipSequence(gulp: Gulp, tasks: Src[], ctx: ITaskContext, zipName?: ZipTaskName): string {\r\n    if (tasks.length > 1) {\r\n        let first = _.first(tasks);\r\n        first = _.isArray(first) ? _.first(first) : first;\r\n        let last = _.last(tasks);\r\n        last = _.isArray(last) ? _.last(last) : last;\r\n        let name = `${first}-${last}`;\r\n        name = zipName ? zipName(name, RunWay.sequence, ctx) : name + '-seq';\r\n        return registerZipTask(gulp, name, tasks, ctx);\r\n\r\n    } else if (tasks.length === 1) {\r\n        let first = _.first(tasks);\r\n        if (_.isArray(first)) {\r\n            if (first.length > 1) {\r\n                let fs = _.first(first);\r\n                let ls = _.last(first);\r\n                let name = `${fs}-${ls}`;\r\n                name = zipName ? zipName(name, RunWay.parallel, ctx) : name + '-paral';\r\n                return registerZipTask(gulp, name, tasks, ctx);\r\n            } else {\r\n                return _.first(first) || '';\r\n            }\r\n        } else {\r\n            return first || '';\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\n/**\r\n * flatten task Sequence.\r\n * \r\n * @export\r\n * @param {Gulp} gulp\r\n * @param {Src[]} tasks\r\n * @param {ITaskContext} ctx\r\n * @param {ZipTaskName} [zipName]\r\n * @returns {string[]}\r\n */\r\nexport function flattenSequence(gulp: Gulp, tasks: Src[], ctx: ITaskContext, zipName?: ZipTaskName): string[] {\r\n    let result: string[] = [];\r\n    _.each(tasks, tk => {\r\n        if (_.isArray(tk)) {\r\n            let zipSrc: Src[] = (_.some(tk, t => _.isArray(t))) ? tk : [tk];\r\n            let taskname = zipSequence(gulp, zipSrc, ctx, zipName);\r\n            taskname && result.push(taskname);\r\n        } else {\r\n            result.push(tk);\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * add task to task sequence.\r\n * \r\n * @export\r\n * @param {Src[]} taskSequence\r\n * @param {ITaskInfo} rst\r\n * @returns\r\n */\r\nexport function addToSequence(taskSequence: Src[], rst: ITaskInfo) {\r\n    if (!rst) {\r\n        return taskSequence;\r\n    }\r\n    if (rst.taskName) {\r\n        let order = 1;\r\n        let len = taskSequence.length + 1;\r\n        if (_.isNumber(rst.order)) {\r\n            order = rst.order;\r\n        } else if (_.isFunction(rst.order)) {\r\n            order = rst.order(len)\r\n        }\r\n\r\n        if (_.isNumber(order)) {\r\n            if (order > 0 && order < 1) {\r\n                order = Math.round(order * len);\r\n            } else if (order === 1) {\r\n                order = len;\r\n            } else if (order > len) {\r\n                order = Math.round(order % len);\r\n            }\r\n        }\r\n        if (order < 0) {\r\n            order = 0;\r\n        }\r\n\r\n        if (order >= 0 && order < taskSequence.length) {\r\n            taskSequence.splice(order, 0, rst.taskName);\r\n        } else {\r\n            taskSequence.push(rst.taskName);\r\n        }\r\n    }\r\n    return taskSequence;\r\n}\r\n\r\n\r\n/**\r\n * filter task sequence. make sure no empty.\r\n * \r\n * @param {Src[]} seq\r\n * @param {(str: string) => boolean} [filter]\r\n * @returns {Src[]}\r\n */\r\nfunction filterTaskSequence(seq: Src[], express?: (str: string) => boolean): Src[] {\r\n    let rseq: Src[] = [];\r\n    express = express || ((it) => !!it);\r\n    _.each(seq, it => {\r\n        if (!it) {\r\n            return;\r\n        }\r\n        if (_.isString(it) && express(it)) {\r\n            rseq.push(it);\r\n        } else if (_.isArray(it)) {\r\n            rseq.push(_.filter(it, itm => express(itm)));\r\n        }\r\n    });\r\n    return rseq;\r\n}\r\n/**\r\n * run task sequence.\r\n * \r\n * @protected\r\n * @param {Gulp} gulp\r\n * @param {Src[]} tasks\r\n * @returns {Promise<any>}\r\n * \r\n * @memberOf Development\r\n */\r\nexport function runSequence(gulp: Gulp, tasks: Src[]): Promise<any> {\r\n    tasks = filterTaskSequence(tasks);\r\n    console.log('run tasks : ', chalk.cyan(<any>tasks));\r\n    let run = new Promise((resolve, reject) => {\r\n        let ps: Promise<any> = null;\r\n        if (tasks && tasks.length > 0) {\r\n            _.each(tasks, task => {\r\n                if (ps) {\r\n                    ps = ps.then(() => {\r\n                        return startTask(gulp, task);\r\n                    })\r\n                } else {\r\n                    ps = startTask(gulp, task);\r\n                }\r\n            });\r\n        } else {\r\n            ps = Promise.resolve();\r\n        }\r\n        return ps\r\n            .then(resolve)\r\n            .catch(reject);\r\n    });\r\n    return run.catch(err => {\r\n        console.error(chalk.red(err));\r\n        // process.exit(0);\r\n    });\r\n}\r\n\r\n/**\r\n * start task.\r\n * \r\n * @param {Gulp} gulp\r\n * @param {Src} task\r\n * @returns {Promise<any>}\r\n */\r\nfunction startTask(gulp: Gulp, task: Src): Promise<any> {\r\n    let taskErr = null, taskStop = null;\r\n    return new Promise((reslove, reject) => {\r\n        let tskmap: any = {};\r\n        _.each(_.isArray(task) ? task : [task], t => {\r\n            tskmap[t] = false;\r\n        });\r\n        taskErr = (err) => {\r\n            process.exit(err);\r\n            console.error(chalk.red(err));\r\n            reject(err);\r\n        };\r\n        taskStop = (e: any) => {\r\n            tskmap[e.task] = true;\r\n            if (!_.some(_.values(tskmap), it => !it)) {\r\n                reslove();\r\n            }\r\n        }\r\n        gulp.on('task_stop', taskStop)\r\n            .on('task_err', taskErr);\r\n        gulp.start(task);\r\n    })\r\n        .then(() => {\r\n            if (gulp['removeListener']) {\r\n                gulp['removeListener']('task_stop', taskStop);\r\n                gulp['removeListener']('task_err', taskErr);\r\n            }\r\n        }, err => {\r\n            if (gulp['removeListener']) {\r\n                gulp['removeListener']('task_stop', taskStop);\r\n                gulp['removeListener']('task_err', taskErr);\r\n            }\r\n            // process.exit(0);\r\n        });\r\n}\r\n\r\n/**\r\n * run task sequence\r\n * \r\n * @export\r\n * @param {Gulp} gulp\r\n * @param {(ITask[] | Promise<ITask[]>)} tasks\r\n * @param {ITaskContext} ctx\r\n * @param {ZipTaskName} [zipName]\r\n * @returns {Promise<any>}\r\n */\r\nexport function runTaskSequence(gulp: Gulp, tasks: ITask[] | Promise<ITask[]>, ctx: ITaskContext, zipName?: ZipTaskName): Promise<any> {\r\n    return Promise.resolve(tasks)\r\n        .then(tasks => {\r\n            let taskseq = toSequence(gulp, tasks, ctx, zipName);\r\n            return runSequence(gulp, taskseq);\r\n        });\r\n}\r\n"]}