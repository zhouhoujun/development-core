{"version":3,"sources":["utils.js","utils.ts"],"names":["files","directory","express","res","fn","_","each","fs_1","readdirSync","fname","filePn","fst","lstatSync","isDirectory","concat","push","taskSourceVal","src","oper","isFunction","taskStringVal","name","contains","arr1","arr2","some","arr2Item","indexOf","convertOper","tinfo","def","arguments","length","undefined","TaskConfig_1","Operation","default","watch","e2e","test","convertMatchOper","match","build","deploy","release","matchOper","serve","matchTaskGroup","group","isString","isArray","require","exports"],"mappings":"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","file":"../utils.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst fs_1 = require('fs');\n/**\n * filter fileName in directory.\n *\n * @export\n * @param {string} directory\n * @param {((fileName: string) => boolean)} [express]\n * @returns {string[]}\n */\nfunction files(directory, express) {\n    let res = [];\n    express = express || ((fn) => true);\n    _.each(fs_1.readdirSync(directory), fname => {\n        let filePn = directory + '/' + fname;\n        var fst = fs_1.lstatSync(filePn);\n        if (!fst.isDirectory()) {\n            if (express(filePn)) {\n                res.push(filePn);\n            }\n        }\n        else {\n            res = res.concat(files(filePn, express));\n        }\n    });\n    return res;\n}\nexports.files = files;\nfunction taskSourceVal(src, oper) {\n    return _.isFunction(src) ? src(oper) : (src || '');\n}\nexports.taskSourceVal = taskSourceVal;\nfunction taskStringVal(name, oper) {\n    return _.isFunction(name) ? name(oper) : (name || '');\n}\nexports.taskStringVal = taskStringVal;\nfunction contains(arr1, arr2) {\n    return arr2.some(arr2Item => arr1.indexOf(arr2Item) >= 0);\n}\nfunction convertOper(tinfo, def = TaskConfig_1.Operation.default) {\n    tinfo = tinfo || {};\n    if (tinfo.watch) {\n        tinfo.oper = (tinfo.oper || 0) | TaskConfig_1.Operation.watch;\n    }\n    if (tinfo.e2e) {\n        tinfo.oper = (tinfo.oper || 0) | TaskConfig_1.Operation.e2e;\n    }\n    if (tinfo.test) {\n        tinfo.oper = (tinfo.oper || 0) | TaskConfig_1.Operation.test;\n    }\n    tinfo.oper = tinfo.oper || def;\n    return tinfo;\n}\nfunction convertMatchOper(match) {\n    match = convertOper(match, TaskConfig_1.Operation.build);\n    if ((match.oper & TaskConfig_1.Operation.test) > 0) {\n        match.oper = match.oper | TaskConfig_1.Operation.build;\n    }\n    if ((match.oper & TaskConfig_1.Operation.e2e) > 0) {\n        match.oper = match.oper | TaskConfig_1.Operation.build;\n    }\n    if ((match.oper & TaskConfig_1.Operation.deploy) > 0) {\n        match.oper = match.oper | TaskConfig_1.Operation.test;\n    }\n    if ((match.oper & TaskConfig_1.Operation.release) > 0) {\n        match.oper = match.oper | TaskConfig_1.Operation.test;\n    }\n    return match;\n}\nfunction matchOper(tinfo, match) {\n    match = convertMatchOper(match);\n    tinfo = convertOper(tinfo);\n    if ((tinfo.oper & match.oper) <= 0) {\n        return false;\n    }\n    if ((match.oper & TaskConfig_1.Operation.watch) <= 0 && (tinfo.oper & TaskConfig_1.Operation.watch) > 0) {\n        return false;\n    }\n    if ((match.oper & TaskConfig_1.Operation.serve) <= 0 && (tinfo.oper & TaskConfig_1.Operation.serve) > 0) {\n        return false;\n    }\n    if ((match.oper & TaskConfig_1.Operation.test) <= 0 && (tinfo.oper & TaskConfig_1.Operation.test) > 0) {\n        return false;\n    }\n    if ((match.oper & TaskConfig_1.Operation.e2e) <= 0 && (tinfo.oper & TaskConfig_1.Operation.e2e) > 0) {\n        return false;\n    }\n    return true;\n}\nexports.matchOper = matchOper;\nfunction matchTaskGroup(tinfo, match) {\n    if (tinfo.group && match && match.group) {\n        if (_.isString(match.group)) {\n            if (_.isString(tinfo.group) && tinfo.group !== match.group) {\n                return false;\n            }\n            else if (_.isArray(tinfo.group) && tinfo.group.indexOf(match.group) < 0) {\n                return false;\n            }\n        }\n        else if (_.isArray(match.group)) {\n            if (_.isString(tinfo.group) && match.group.indexOf(tinfo.group) < 0) {\n                return false;\n            }\n            else if (_.isArray(tinfo.group) && !contains(tinfo.group, match.group)) {\n                return false;\n            }\n        }\n    }\n    else if (tinfo.group) {\n        return false;\n    }\n    else if (match && match.group) {\n        return false;\n    }\n    return true;\n}\nexports.matchTaskGroup = matchTaskGroup;\n","import * as _ from 'lodash';\r\nimport { TaskSource, TaskString, Operation, ITaskInfo } from './TaskConfig';\r\nimport { readdirSync, lstatSync } from 'fs';\r\n/**\r\n * filter fileName in directory.\r\n * \r\n * @export\r\n * @param {string} directory\r\n * @param {((fileName: string) => boolean)} [express]\r\n * @returns {string[]}\r\n */\r\nexport function files(directory: string, express?: ((fileName: string) => boolean)): string[] {\r\n    let res: string[] = [];\r\n    express = express || ((fn) => true);\r\n    _.each(readdirSync(directory), fname => {\r\n        let filePn = directory + '/' + fname;\r\n        var fst = lstatSync(filePn);\r\n        if (!fst.isDirectory()) {\r\n            if (express(filePn)) {\r\n                res.push(filePn)\r\n            }\r\n        } else {\r\n            res = res.concat(files(filePn, express))\r\n        }\r\n    });\r\n    return res;\r\n}\r\n\r\nexport function taskSourceVal(src: TaskSource, oper?: Operation) {\r\n    return _.isFunction(src) ? src(oper) : (src || '');\r\n}\r\n\r\nexport function taskStringVal(name: TaskString, oper?: Operation) {\r\n    return _.isFunction(name) ? name(oper) : (name || '');\r\n}\r\n\r\n\r\nfunction contains(arr1: string[], arr2: string[]) {\r\n    return arr2.some(arr2Item => arr1.indexOf(arr2Item) >= 0);\r\n}\r\n\r\n\r\nfunction convertOper(tinfo: ITaskInfo, def = Operation.default) {\r\n    tinfo = tinfo || {};\r\n    if (tinfo.watch) {\r\n        tinfo.oper = (tinfo.oper || 0) | Operation.watch;\r\n    }\r\n    if (tinfo.e2e) {\r\n        tinfo.oper = (tinfo.oper || 0) | Operation.e2e;\r\n    }\r\n    if (tinfo.test) {\r\n        tinfo.oper = (tinfo.oper || 0) | Operation.test;\r\n    }\r\n\r\n    tinfo.oper = tinfo.oper || def;\r\n    return tinfo;\r\n}\r\nfunction convertMatchOper(match: ITaskInfo) {\r\n    match = convertOper(match, Operation.build);\r\n    if ((match.oper & Operation.test) > 0) {\r\n        match.oper = match.oper | Operation.build;\r\n    }\r\n    if ((match.oper & Operation.e2e) > 0) {\r\n        match.oper = match.oper | Operation.build;\r\n    }\r\n    if ((match.oper & Operation.deploy) > 0) {\r\n        match.oper = match.oper | Operation.test;\r\n    }\r\n    if ((match.oper & Operation.release) > 0) {\r\n        match.oper = match.oper | Operation.test;\r\n    }\r\n\r\n    return match;\r\n}\r\n\r\nexport function matchOper(tinfo: ITaskInfo, match: ITaskInfo) {\r\n\r\n    match = convertMatchOper(match);\r\n    tinfo = convertOper(tinfo);\r\n\r\n    if ((tinfo.oper & match.oper) <= 0) {\r\n        return false;\r\n    }\r\n    if ((match.oper & Operation.watch) <= 0 && (tinfo.oper & Operation.watch) > 0) {\r\n        return false;\r\n    }\r\n    if ((match.oper & Operation.serve) <= 0 && (tinfo.oper & Operation.serve) > 0) {\r\n        return false;\r\n    }\r\n    if ((match.oper & Operation.test) <= 0 && (tinfo.oper & Operation.test) > 0) {\r\n        return false;\r\n    }\r\n    if ((match.oper & Operation.e2e) <= 0 && (tinfo.oper & Operation.e2e) > 0) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n\r\n}\r\n\r\nexport function matchTaskGroup(tinfo: ITaskInfo, match: ITaskInfo): boolean {\r\n    if (tinfo.group && match && match.group) {\r\n        if (_.isString(match.group)) {\r\n            if (_.isString(tinfo.group) && tinfo.group !== match.group) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && tinfo.group.indexOf(match.group) < 0) {\r\n                return false;\r\n            }\r\n        } else if (_.isArray(match.group)) {\r\n            if (_.isString(tinfo.group) && match.group.indexOf(tinfo.group) < 0) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && !contains(tinfo.group, match.group)) {\r\n                return false;\r\n            }\r\n        }\r\n    } else if (tinfo.group) {\r\n        return false;\r\n    } else if (match && match.group) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n"]}