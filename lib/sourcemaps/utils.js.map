{"version":3,"sources":["utils.js","utils.ts"],"names":["_","require","TaskConfig_1","fs_1","path","files","directory","express","res","fn","each","readdirSync","filePn","fname","fst","lstatSync","isDirectory","push","concat","exports","sortOrder","sequence","orderBy","filter","t","isArray","order","isFunction","length","isNumber","taskSourceVal","src","ctx","taskStringVal","name","contains","arr1","arr2","some","indexOf","arr2Item","convertOper","decor","def","Operation","default","oper","convertMatchOper","match","test","release","build","e2e","deploy","someOper","oper1","oper2","matchTaskInfo","eq","watch","serve","matchTaskGroup","tinfo","group","isString","absolutePath","root","pathstr","isAbsolute","join","absoluteSrc","prefixSrc","map","p","strSrc","prefix","substring"],"mappings":"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","file":"../utils.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst fs_1 = require('fs');\nconst path = require('path');\n/**\n * filter fileName in directory.\n *\n * @export\n * @param {string} directory\n * @param {((fileName: string) => boolean)} [express]\n * @returns {string[]}\n */\nfunction files(directory, express) {\n    let res = [];\n    express = express || ((fn) => true);\n    _.each(fs_1.readdirSync(directory), fname => {\n        let filePn = directory + '/' + fname;\n        var fst = fs_1.lstatSync(filePn);\n        if (!fst.isDirectory()) {\n            if (express(filePn)) {\n                res.push(filePn);\n            }\n        }\n        else {\n            res = res.concat(files(filePn, express));\n        }\n    });\n    return res;\n}\nexports.files = files;\n/**\n * sorting via order.\n *\n * @export\n * @template T\n * @param {T[]} sequence\n * @param {(item: T) => Order} orderBy\n * @returns\n */\nfunction sortOrder(sequence, orderBy) {\n    return _.orderBy(_.filter(sequence, t => t), (t) => {\n        if (_.isArray(t)) {\n            return 0.5;\n        }\n        else {\n            let order = orderBy(t);\n            if (_.isFunction(order)) {\n                order = order(sequence.length);\n            }\n            else if (!_.isNumber(order)) {\n                order = 0.5;\n            }\n            if (order > 1) {\n                return (order % sequence.length) / sequence.length;\n            }\n            else if (order < 0) {\n                order = 0;\n            }\n            return order;\n        }\n    });\n}\nexports.sortOrder = sortOrder;\n/**\n * task src, string or array string.\n *\n * @export\n * @param {TaskSource} src\n * @param {Operation} oper runtime Operation\n * @param {IEnvOption} [env]\n * @returns\n */\nfunction taskSourceVal(src, ctx) {\n    return _.isFunction(src) ? src(ctx) : (src || '');\n}\nexports.taskSourceVal = taskSourceVal;\n/**\n * task string.\n *\n * @export\n * @param {TaskString} name\n * @param {ITaskContext} ctx\n * @returns\n */\nfunction taskStringVal(name, ctx) {\n    return _.isFunction(name) ? name(ctx) : (name || '');\n}\nexports.taskStringVal = taskStringVal;\nfunction contains(arr1, arr2) {\n    return arr2.some(arr2Item => arr1.indexOf(arr2Item) >= 0);\n}\n/**\n * convert old version Operation to new version Operation\n *\n * @export\n * @param {ITaskDecorator} decor\n * @param {any} [def=Operation.default]\n * @returns\n */\nfunction convertOper(decor, def = TaskConfig_1.Operation.default) {\n    decor = decor || {};\n    // // todo  compatibility\n    // if (decor['watch']) {\n    //     decor.oper = (decor.oper || def) | Operation.watch;\n    // }\n    // if (decor['e2e']) {\n    //     decor.oper = (decor.oper || def) | Operation.e2e;\n    // }\n    // if (decor['test']) {\n    //     decor.oper = (decor.oper || def) | Operation.test;\n    // }\n    // // ----\n    decor.oper = decor.oper || def;\n    return decor;\n}\nexports.convertOper = convertOper;\nfunction convertMatchOper(match) {\n    if ((match.oper & TaskConfig_1.Operation.test) && !(match.oper & TaskConfig_1.Operation.release)) {\n        match.oper = match.oper | TaskConfig_1.Operation.build;\n    }\n    if ((match.oper & TaskConfig_1.Operation.e2e) && !(match.oper & TaskConfig_1.Operation.release)) {\n        match.oper = match.oper | TaskConfig_1.Operation.build;\n    }\n    if (match.oper & TaskConfig_1.Operation.deploy) {\n        match.oper = match.oper | TaskConfig_1.Operation.test | TaskConfig_1.Operation.e2e;\n    }\n    if (match.oper & TaskConfig_1.Operation.release) {\n        match.oper = match.oper | TaskConfig_1.Operation.test;\n    }\n    return match;\n}\n/**\n * has some oper samed.\n *\n * @export\n * @param {Operation} oper1\n * @param {Operation} oper2\n * @returns\n */\nfunction someOper(oper1, oper2) {\n    return (oper1 & oper2) > 0;\n}\nexports.someOper = someOper;\n/**\n * match task via task info.\n *\n * @export\n * @param {ITaskDecorator} decor\n * @param {ITaskDecorator} match\n * @returns\n */\nfunction matchTaskInfo(decor, match) {\n    match = convertOper(match, TaskConfig_1.Operation.build);\n    decor = convertOper(decor);\n    if (match.match) {\n        return match.match(decor);\n    }\n    else if (decor.match) {\n        return decor.match(match);\n    }\n    else {\n        match = convertMatchOper(match);\n    }\n    let eq = decor.oper & match.oper;\n    // console.log('eq------->:', eq);\n    if (eq <= 0) {\n        return false;\n    }\n    if (decor.oper & TaskConfig_1.Operation.watch) {\n        if ((match.oper & TaskConfig_1.Operation.watch) <= 0) {\n            return false;\n        }\n        else {\n            if (eq <= TaskConfig_1.Operation.watch) {\n                return false;\n            }\n        }\n    }\n    if (decor.oper & TaskConfig_1.Operation.serve) {\n        if (!(match.oper & TaskConfig_1.Operation.serve)) {\n            return false;\n        }\n        else {\n            if (eq <= TaskConfig_1.Operation.serve) {\n                return false;\n            }\n        }\n    }\n    if (decor.oper & TaskConfig_1.Operation.test) {\n        if (!(match.oper & TaskConfig_1.Operation.test)) {\n            return false;\n        }\n        else {\n            if (eq <= TaskConfig_1.Operation.test) {\n                return false;\n            }\n        }\n    }\n    if (decor.oper & TaskConfig_1.Operation.e2e) {\n        if (!(match.oper & TaskConfig_1.Operation.e2e)) {\n            return false;\n        }\n        else {\n            if (eq <= TaskConfig_1.Operation.e2e) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nexports.matchTaskInfo = matchTaskInfo;\nfunction matchTaskGroup(tinfo, match) {\n    if (tinfo.group && match && match.group) {\n        if (_.isString(match.group)) {\n            if (_.isString(tinfo.group) && tinfo.group !== match.group) {\n                return false;\n            }\n            else if (_.isArray(tinfo.group) && tinfo.group.indexOf(match.group) < 0) {\n                return false;\n            }\n        }\n        else if (_.isArray(match.group)) {\n            if (_.isString(tinfo.group) && match.group.indexOf(tinfo.group) < 0) {\n                return false;\n            }\n            else if (_.isArray(tinfo.group) && !contains(tinfo.group, match.group)) {\n                return false;\n            }\n        }\n    }\n    else if (tinfo.group) {\n        return false;\n    }\n    else if (match && match.group) {\n        return false;\n    }\n    return true;\n}\nexports.matchTaskGroup = matchTaskGroup;\n/**\n * convert path to absolute path.\n *\n * @export\n * @param {string} root\n * @param {string} pathstr\n * @returns {string}\n */\nfunction absolutePath(root, pathstr) {\n    if (!root || path.isAbsolute(pathstr)) {\n        return pathstr;\n    }\n    return path.join(root, pathstr);\n}\nexports.absolutePath = absolutePath;\n/**\n * convert src to absolute path src.\n *\n * @export\n * @param {string} root\n * @param {Src} src\n * @returns {Src}\n */\nfunction absoluteSrc(root, src) {\n    if (_.isString(src)) {\n        return prefixSrc(root, src);\n    }\n    else {\n        return _.map(src, p => prefixSrc(root, p));\n    }\n}\nexports.absoluteSrc = absoluteSrc;\nfunction prefixSrc(root, strSrc) {\n    let prefix = '';\n    if (/^!/.test(strSrc)) {\n        prefix = '!';\n        strSrc = strSrc.substring(1, strSrc.length);\n    }\n    return prefix + absolutePath(root, strSrc);\n}\n","import * as _ from 'lodash';\r\nimport { TaskSource, TaskString, Operation, Order, ITaskDecorator, ITaskInfo, Src, ITaskContext } from './TaskConfig';\r\nimport { readdirSync, lstatSync } from 'fs';\r\nimport * as path from 'path';\r\n/**\r\n * filter fileName in directory.\r\n * \r\n * @export\r\n * @param {string} directory\r\n * @param {((fileName: string) => boolean)} [express]\r\n * @returns {string[]}\r\n */\r\nexport function files(directory: string, express?: ((fileName: string) => boolean)): string[] {\r\n    let res: string[] = [];\r\n    express = express || ((fn) => true);\r\n    _.each(readdirSync(directory), fname => {\r\n        let filePn = directory + '/' + fname;\r\n        var fst = lstatSync(filePn);\r\n        if (!fst.isDirectory()) {\r\n            if (express(filePn)) {\r\n                res.push(filePn)\r\n            }\r\n        } else {\r\n            res = res.concat(files(filePn, express))\r\n        }\r\n    });\r\n    return res;\r\n}\r\n\r\n/**\r\n * sorting via order.\r\n * \r\n * @export\r\n * @template T\r\n * @param {T[]} sequence\r\n * @param {(item: T) => Order} orderBy\r\n * @returns\r\n */\r\nexport function sortOrder<T>(sequence: T[], orderBy: (item: T) => Order) {\r\n    return _.orderBy(_.filter(sequence, t => t), (t: T) => {\r\n\r\n        if (_.isArray(t)) {\r\n            return 0.5;\r\n        } else {\r\n            let order = orderBy(t);\r\n\r\n            if (_.isFunction(order)) {\r\n                order = order(sequence.length);\r\n            } else if (!_.isNumber(order)) {\r\n                order = 0.5;\r\n            }\r\n\r\n            if (order > 1) {\r\n                return (order % sequence.length) / sequence.length;\r\n            } else if (order < 0) {\r\n                order = 0;\r\n            }\r\n\r\n            return order;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * task src, string or array string.\r\n * \r\n * @export\r\n * @param {TaskSource} src\r\n * @param {Operation} oper runtime Operation\r\n * @param {IEnvOption} [env]\r\n * @returns\r\n */\r\nexport function taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n * task string.\r\n * \r\n * @export\r\n * @param {TaskString} name\r\n * @param {ITaskContext} ctx\r\n * @returns\r\n */\r\nexport function taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n\r\n\r\nfunction contains(arr1: string[], arr2: string[]) {\r\n    return arr2.some(arr2Item => arr1.indexOf(arr2Item) >= 0);\r\n}\r\n\r\n\r\n/**\r\n * convert old version Operation to new version Operation\r\n * \r\n * @export\r\n * @param {ITaskDecorator} decor\r\n * @param {any} [def=Operation.default]\r\n * @returns\r\n */\r\nexport function convertOper(decor: ITaskDecorator, def = Operation.default) {\r\n    decor = decor || {};\r\n    // // todo  compatibility\r\n    // if (decor['watch']) {\r\n    //     decor.oper = (decor.oper || def) | Operation.watch;\r\n    // }\r\n    // if (decor['e2e']) {\r\n    //     decor.oper = (decor.oper || def) | Operation.e2e;\r\n    // }\r\n    // if (decor['test']) {\r\n    //     decor.oper = (decor.oper || def) | Operation.test;\r\n    // }\r\n    // // ----\r\n\r\n    decor.oper = decor.oper || def;\r\n    return decor;\r\n}\r\n\r\nfunction convertMatchOper(match: ITaskDecorator) {\r\n    if ((match.oper & Operation.test) && !(match.oper & Operation.release)) {\r\n        match.oper = match.oper | Operation.build;\r\n    }\r\n    if ((match.oper & Operation.e2e) && !(match.oper & Operation.release)) {\r\n        match.oper = match.oper | Operation.build;\r\n    }\r\n    if (match.oper & Operation.deploy) {\r\n        match.oper = match.oper | Operation.test | Operation.e2e;\r\n    }\r\n    if (match.oper & Operation.release) {\r\n        match.oper = match.oper | Operation.test;\r\n    }\r\n\r\n    return match;\r\n}\r\n\r\n\r\n/**\r\n * has some oper samed.\r\n * \r\n * @export\r\n * @param {Operation} oper1\r\n * @param {Operation} oper2\r\n * @returns\r\n */\r\nexport function someOper(oper1: Operation, oper2: Operation) {\r\n    return (oper1 & oper2) > 0;\r\n}\r\n\r\n/**\r\n * match task via task info.\r\n * \r\n * @export\r\n * @param {ITaskDecorator} decor\r\n * @param {ITaskDecorator} match\r\n * @returns\r\n */\r\nexport function matchTaskInfo(decor: ITaskDecorator, match: ITaskDecorator) {\r\n\r\n    match = convertOper(match, Operation.build);\r\n    decor = convertOper(decor);\r\n\r\n    if (match.match) {\r\n        return match.match(decor);\r\n    } else if (decor.match) {\r\n        return decor.match(match);\r\n    } else {\r\n        match = convertMatchOper(match);\r\n    }\r\n\r\n    let eq = decor.oper & match.oper;\r\n    // console.log('eq------->:', eq);\r\n    if (eq <= 0) {\r\n        return false;\r\n    }\r\n\r\n    if (decor.oper & Operation.watch) {\r\n        if ((match.oper & Operation.watch) <= 0) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.watch) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decor.oper & Operation.serve) {\r\n        if (!(match.oper & Operation.serve)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.serve) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decor.oper & Operation.test) {\r\n        if (!(match.oper & Operation.test)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.test) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decor.oper & Operation.e2e) {\r\n        if (!(match.oper & Operation.e2e)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.e2e) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function matchTaskGroup(tinfo: ITaskInfo, match: ITaskInfo): boolean {\r\n    if (tinfo.group && match && match.group) {\r\n        if (_.isString(match.group)) {\r\n            if (_.isString(tinfo.group) && tinfo.group !== match.group) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && tinfo.group.indexOf(match.group) < 0) {\r\n                return false;\r\n            }\r\n        } else if (_.isArray(match.group)) {\r\n            if (_.isString(tinfo.group) && match.group.indexOf(tinfo.group) < 0) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && !contains(tinfo.group, match.group)) {\r\n                return false;\r\n            }\r\n        }\r\n    } else if (tinfo.group) {\r\n        return false;\r\n    } else if (match && match.group) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * convert path to absolute path.\r\n * \r\n * @export\r\n * @param {string} root\r\n * @param {string} pathstr\r\n * @returns {string}\r\n */\r\nexport function absolutePath(root: string, pathstr: string): string {\r\n    if (!root || path.isAbsolute(pathstr)) {\r\n        return pathstr;\r\n    }\r\n    return path.join(root, pathstr);\r\n}\r\n\r\n/**\r\n * convert src to absolute path src.\r\n * \r\n * @export\r\n * @param {string} root\r\n * @param {Src} src\r\n * @returns {Src}\r\n */\r\nexport function absoluteSrc(root: string, src: Src): Src {\r\n    if (_.isString(src)) {\r\n        return prefixSrc(root, src);\r\n    } else {\r\n        return _.map(src, p => prefixSrc(root, p));\r\n    }\r\n}\r\n\r\nfunction prefixSrc(root: string, strSrc: string): string {\r\n    let prefix = '';\r\n    if (/^!/.test(strSrc)) {\r\n        prefix = '!';\r\n        strSrc = strSrc.substring(1, strSrc.length);\r\n    }\r\n    return prefix + absolutePath(root, strSrc);\r\n}\r\n"]}