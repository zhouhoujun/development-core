{"version":3,"sources":["utils.ts"],"names":["sortOrder","sequence","orderBy","ctx","forceSequence","parall","rseq","_","filter","t","isArray","order","isFunction","length","isNumber","orderVal","runWay","TaskConfig_1","RunWay","parallel","value","push","each","values","pals","first","splice","indexOf","contains","arr1","arr2","some","arr2Item","convertOper","decor","def","Operation","default","oper","convertMatchOper","match","test","release","build","e2e","deploy","someOper","oper1","oper2","matchCompare","tinfo","matchTaskInfo","matchTaskGroup","eq","watch","serve","group","isString","absolutePath","root","pathstr","path","isAbsolute","join","absoluteSrc","src","prefixSrc","map","p","strSrc","prefix","substring","require","exports"],"mappings":"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","file":"../utils.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { IMap, RunWay, Operation, Order, ITaskDecorator, ITaskInfo, Src, ITaskContext } from './TaskConfig';\r\nimport * as path from 'path';\r\n\r\n\r\n/**\r\n * sorting via order.\r\n * \r\n * @export\r\n * @template T\r\n * @param {T[]} sequence\r\n * @param {(item: T) => Order} orderBy\r\n * @param {ITaskContext} ctx\r\n * @param {boolean} [forceSequence=false]\r\n * @returns {(Array<T | T[]>)}\r\n */\r\nexport function sortOrder<T>(sequence: T[], orderBy: (item: T) => Order, ctx: ITaskContext, forceSequence = false): Array<T | T[]> {\r\n    let parall: IMap<T[]> = {};\r\n    let rseq: Array<T | T[]> = _.orderBy(_.filter(sequence, t => t), (t: T) => {\r\n        if (_.isArray(t)) {\r\n            return 0.5;\r\n        } else {\r\n            let order = orderBy(t);\r\n            if (_.isFunction(order)) {\r\n                order = order(sequence.length, ctx);\r\n            } else if (!_.isNumber(order) && !order) {\r\n                order = 0.5;\r\n            }\r\n\r\n            let orderVal: number;\r\n            if (_.isNumber(order)) {\r\n                orderVal = order;\r\n            } else {\r\n                if (!forceSequence && order.runWay === RunWay.parallel) {\r\n                    parall[order.value] = parall[order.value] || [];\r\n                    parall[order.value].push(t);\r\n                }\r\n                orderVal = order.value;\r\n            }\r\n\r\n            if (orderVal > 1) {\r\n                return (orderVal % sequence.length) / sequence.length;\r\n            } else if (orderVal < 0) {\r\n                orderVal = 0;\r\n            }\r\n\r\n            return orderVal;\r\n        }\r\n    });\r\n    if (!forceSequence) {\r\n        _.each(_.values(parall), pals => {\r\n            let first = _.first(pals);\r\n            rseq.splice(rseq.indexOf(first), pals.length, pals);\r\n        });\r\n    }\r\n\r\n    return rseq;\r\n}\r\n\r\n\r\nfunction contains(arr1: string[], arr2: string[]) {\r\n    return arr2.some(arr2Item => arr1.indexOf(arr2Item) >= 0);\r\n}\r\n\r\n\r\n/**\r\n * convert old version Operation to new version Operation\r\n * \r\n * @export\r\n * @param {ITaskDecorator} decor\r\n * @param {any} [def=Operation.default]\r\n * @returns\r\n */\r\nexport function convertOper(decor: ITaskDecorator, def = Operation.default) {\r\n    decor = decor || {};\r\n    // // todo  compatibility\r\n    // if (decor['watch']) {\r\n    //     decor.oper = (decor.oper || def) | Operation.watch;\r\n    // }\r\n    // if (decor['e2e']) {\r\n    //     decor.oper = (decor.oper || def) | Operation.e2e;\r\n    // }\r\n    // if (decor['test']) {\r\n    //     decor.oper = (decor.oper || def) | Operation.test;\r\n    // }\r\n    // // ----\r\n\r\n    decor.oper = decor.oper || def;\r\n    return decor;\r\n}\r\n\r\nfunction convertMatchOper(match: ITaskDecorator) {\r\n    if ((match.oper & Operation.test) && !(match.oper & Operation.release)) {\r\n        match.oper = match.oper | Operation.build;\r\n    }\r\n    if ((match.oper & Operation.e2e) && !(match.oper & Operation.release)) {\r\n        match.oper = match.oper | Operation.build;\r\n    }\r\n    if (match.oper & Operation.deploy) {\r\n        match.oper = match.oper | Operation.test | Operation.e2e;\r\n    }\r\n    if (match.oper & Operation.release) {\r\n        match.oper = match.oper | Operation.test;\r\n    }\r\n\r\n    return match;\r\n}\r\n\r\n\r\n/**\r\n * has some oper samed.\r\n * \r\n * @export\r\n * @param {Operation} oper1\r\n * @param {Operation} oper2\r\n * @returns\r\n */\r\nexport function someOper(oper1: Operation, oper2: Operation) {\r\n    return (oper1 & oper2) > 0;\r\n}\r\n\r\n\r\n/**\r\n * match\r\n * \r\n * @export\r\n * @param {ITaskDecorator} tinfo\r\n * @param {ITaskDecorator} match\r\n * @param {ITaskContext} [ctx]\r\n * @returns\r\n */\r\nexport function matchCompare(tinfo: ITaskDecorator, match: ITaskDecorator, ctx?: ITaskContext) {\r\n    if (ctx) {\r\n        return ctx.matchCompare(tinfo, match);\r\n    } else {\r\n        if (!matchTaskInfo(tinfo, match)) {\r\n            return false;\r\n        }\r\n\r\n        if (!matchTaskGroup(tinfo, match)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * match task via task info.\r\n * \r\n * @export\r\n * @param {ITaskDecorator} decor\r\n * @param {ITaskDecorator} match\r\n * @returns\r\n */\r\nfunction matchTaskInfo(decor: ITaskDecorator, match: ITaskDecorator) {\r\n\r\n    match = convertOper(match, Operation.build);\r\n    decor = convertOper(decor);\r\n\r\n    if (match.match) {\r\n        return match.match(decor);\r\n    } else if (decor.match) {\r\n        return decor.match(match);\r\n    } else {\r\n        match = convertMatchOper(match);\r\n    }\r\n\r\n    let eq = decor.oper & match.oper;\r\n    // console.log('eq------->:', eq);\r\n    if (eq <= 0) {\r\n        return false;\r\n    }\r\n\r\n    if (decor.oper & Operation.watch) {\r\n        if ((match.oper & Operation.watch) <= 0) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.watch) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decor.oper & Operation.serve) {\r\n        if (!(match.oper & Operation.serve)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.serve) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decor.oper & Operation.test) {\r\n        if (!(match.oper & Operation.test)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.test) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decor.oper & Operation.e2e) {\r\n        if (!(match.oper & Operation.e2e)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.e2e) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction matchTaskGroup(tinfo: ITaskInfo, match: ITaskInfo): boolean {\r\n    if (tinfo.group && match && match.group) {\r\n        if (_.isString(match.group)) {\r\n            if (_.isString(tinfo.group) && tinfo.group !== match.group) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && tinfo.group.indexOf(match.group) < 0) {\r\n                return false;\r\n            }\r\n        } else if (_.isArray(match.group)) {\r\n            if (_.isString(tinfo.group) && match.group.indexOf(tinfo.group) < 0) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && !contains(tinfo.group, match.group)) {\r\n                return false;\r\n            }\r\n        }\r\n    } else if (tinfo.group) {\r\n        return false;\r\n    } else if (match && match.group) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * convert path to absolute path.\r\n * \r\n * @export\r\n * @param {string} root\r\n * @param {string} pathstr\r\n * @returns {string}\r\n */\r\nexport function absolutePath(root: string, pathstr: string): string {\r\n    if (!root || path.isAbsolute(pathstr)) {\r\n        return pathstr;\r\n    }\r\n    return path.join(root, pathstr);\r\n}\r\n\r\n/**\r\n * convert src to absolute path src.\r\n * \r\n * @export\r\n * @param {string} root\r\n * @param {Src} src\r\n * @returns {Src}\r\n */\r\nexport function absoluteSrc(root: string, src: Src): Src {\r\n    if (_.isString(src)) {\r\n        return prefixSrc(root, src);\r\n    } else {\r\n        return _.map(src, p => prefixSrc(root, p));\r\n    }\r\n}\r\n\r\nfunction prefixSrc(root: string, strSrc: string): string {\r\n    let prefix = '';\r\n    if (/^!/.test(strSrc)) {\r\n        prefix = '!';\r\n        strSrc = strSrc.substring(1, strSrc.length);\r\n    }\r\n    return prefix + absolutePath(root, strSrc);\r\n}\r\n"]}