{"version":3,"sources":["utils.js","utils.ts"],"names":["files","directory","express","res","fn","_","each","fs_1","readdirSync","fname","filePn","fst","lstatSync","isDirectory","concat","push","taskSourceVal","src","oper","isFunction","taskStringVal","name","require","exports"],"mappings":"AAAA,YCWA,SAAAA,OAAsBC,EAAmBC,GACrC,GAAIC,KAaJ,OAZAD,GAAUA,GAAY,SAACE,GAAD,OAAQ,GAC9BC,EAAEC,KAAKC,KAAAC,YAAYP,GAAY,SAAAQ,GAC3B,GAAIC,GAAST,EAAY,IAAMQ,EAC3BE,EAAMJ,KAAAK,UAAUF,EACfC,GAAIE,cAKLV,EAAMA,EAAIW,OAAOd,MAAMU,EAAQR,IAJ3BA,EAAQQ,IACRP,EAAIY,KAAKL,KAMdP,EAGX,QAAAa,eAA8BC,EAAiBC,GAC3C,MAAOb,GAAEc,WAAWF,GAAOA,EAAIC,GAASD,GAAO,GAGnD,QAAAG,eAA8BC,EAAkBH,GAC5C,MAAOb,GAAEc,WAAWE,GAAQA,EAAKH,GAASG,GAAQ,GAjCtD,GAAYhB,GAACiB,QAAM,UAEnBf,KAAAe,QAAuC,KASvBC,SAAAvB,MAAKA,MAiBLuB,QAAAP,cAAaA,cAIbO,QAAAH,cAAaA","file":"../utils.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst fs_1 = require('fs');\nfunction files(directory, express) {\n    let res = [];\n    express = express || ((fn) => true);\n    _.each(fs_1.readdirSync(directory), fname => {\n        let filePn = directory + '/' + fname;\n        var fst = fs_1.lstatSync(filePn);\n        if (!fst.isDirectory()) {\n            if (express(filePn)) {\n                res.push(filePn);\n            }\n        }\n        else {\n            res = res.concat(files(filePn, express));\n        }\n    });\n    return res;\n}\nexports.files = files;\nfunction taskSourceVal(src, oper) {\n    return _.isFunction(src) ? src(oper) : (src || '');\n}\nexports.taskSourceVal = taskSourceVal;\nfunction taskStringVal(name, oper) {\n    return _.isFunction(name) ? name(oper) : (name || '');\n}\nexports.taskStringVal = taskStringVal;\n","import * as _ from 'lodash';\r\nimport { TaskSource, TaskString, Operation } from './TaskConfig';\r\nimport { readdirSync, lstatSync } from 'fs';\r\n/**\r\n * filter fileName in directory.\r\n * \r\n * @export\r\n * @param {string} directory\r\n * @param {((fileName: string) => boolean)} [express]\r\n * @returns {string[]}\r\n */\r\nexport function files(directory: string, express?: ((fileName: string) => boolean)): string[] {\r\n    let res: string[] = [];\r\n    express = express || ((fn) => true);\r\n    _.each(readdirSync(directory), fname => {\r\n        let filePn = directory + '/' + fname;\r\n        var fst = lstatSync(filePn);\r\n        if (!fst.isDirectory()) {\r\n            if (express(filePn)) {\r\n                res.push(filePn)\r\n            }\r\n        } else {\r\n            res = res.concat(files(filePn, express))\r\n        }\r\n    });\r\n    return res;\r\n}\r\n\r\nexport function taskSourceVal(src: TaskSource, oper?: Operation) {\r\n    return _.isFunction(src) ? src(oper) : (src || '');\r\n}\r\n\r\nexport function taskStringVal(name: TaskString, oper?: Operation) {\r\n    return _.isFunction(name) ? name(oper) : (name || '');\r\n}\r\n"]}