{"version":3,"sources":["utils.js","utils.ts"],"names":["files","directory","express","res","fn","_","each","fs_1","readdirSync","fname","filePn","fst","lstatSync","isDirectory","concat","push","taskSourceVal","src","oper","isFunction","taskStringVal","name","contains","arr1","arr2","some","arr2Item","indexOf","convertOper","tinfo","def","arguments","length","undefined","TaskConfig_1","Operation","default","watch","e2e","test","convertMatchOper","match","release","build","deploy","someOper","oper1","oper2","matchTaskInfo","eq","serve","matchTaskGroup","group","isString","isArray","absolutePath","root","pathstr","path","isAbsolute","join","absoluteSrc","map","p","require","exports"],"mappings":"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","file":"../utils.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst fs_1 = require('fs');\nconst path = require('path');\n/**\n * filter fileName in directory.\n *\n * @export\n * @param {string} directory\n * @param {((fileName: string) => boolean)} [express]\n * @returns {string[]}\n */\nfunction files(directory, express) {\n    let res = [];\n    express = express || ((fn) => true);\n    _.each(fs_1.readdirSync(directory), fname => {\n        let filePn = directory + '/' + fname;\n        var fst = fs_1.lstatSync(filePn);\n        if (!fst.isDirectory()) {\n            if (express(filePn)) {\n                res.push(filePn);\n            }\n        }\n        else {\n            res = res.concat(files(filePn, express));\n        }\n    });\n    return res;\n}\nexports.files = files;\nfunction taskSourceVal(src, oper) {\n    return _.isFunction(src) ? src(oper) : (src || '');\n}\nexports.taskSourceVal = taskSourceVal;\nfunction taskStringVal(name, oper) {\n    return _.isFunction(name) ? name(oper) : (name || '');\n}\nexports.taskStringVal = taskStringVal;\nfunction contains(arr1, arr2) {\n    return arr2.some(arr2Item => arr1.indexOf(arr2Item) >= 0);\n}\n/**\n * convert old version Operation to new version Operation\n *\n * @export\n * @param {ITaskInfo} tinfo\n * @param {any} [def=Operation.default]\n * @returns\n */\nfunction convertOper(tinfo, def = TaskConfig_1.Operation.default) {\n    tinfo = tinfo || {};\n    if (tinfo.watch) {\n        tinfo.oper = (tinfo.oper || def) | TaskConfig_1.Operation.watch;\n    }\n    if (tinfo.e2e) {\n        tinfo.oper = (tinfo.oper || def) | TaskConfig_1.Operation.e2e;\n    }\n    if (tinfo.test) {\n        tinfo.oper = (tinfo.oper || def) | TaskConfig_1.Operation.test;\n    }\n    tinfo.oper = tinfo.oper || def;\n    return tinfo;\n}\nexports.convertOper = convertOper;\nfunction convertMatchOper(match) {\n    if ((match.oper & TaskConfig_1.Operation.test) && !(match.oper & TaskConfig_1.Operation.release)) {\n        match.oper = match.oper | TaskConfig_1.Operation.build;\n    }\n    if ((match.oper & TaskConfig_1.Operation.e2e) && !(match.oper & TaskConfig_1.Operation.release)) {\n        match.oper = match.oper | TaskConfig_1.Operation.build;\n    }\n    if (match.oper & TaskConfig_1.Operation.deploy) {\n        match.oper = match.oper | TaskConfig_1.Operation.test | TaskConfig_1.Operation.e2e;\n    }\n    if (match.oper & TaskConfig_1.Operation.release) {\n        match.oper = match.oper | TaskConfig_1.Operation.test;\n    }\n    return match;\n}\n/**\n * has some oper samed.\n *\n * @export\n * @param {Operation} oper1\n * @param {Operation} oper2\n * @returns\n */\nfunction someOper(oper1, oper2) {\n    return (oper1 & oper2) > 0;\n}\nexports.someOper = someOper;\n/**\n * match task via task info.\n *\n * @export\n * @param {ITaskInfo} tinfo\n * @param {ITaskInfo} match\n * @returns\n */\nfunction matchTaskInfo(tinfo, match) {\n    match = convertOper(match, TaskConfig_1.Operation.build);\n    tinfo = convertOper(tinfo);\n    if (match.match) {\n        return match.match(tinfo);\n    }\n    else if (tinfo.match) {\n        return tinfo.match(match);\n    }\n    else {\n        match = convertMatchOper(match);\n    }\n    let eq = tinfo.oper & match.oper;\n    // console.log('eq------->:', eq);\n    if (eq <= 0) {\n        return false;\n    }\n    if (tinfo.oper & TaskConfig_1.Operation.watch) {\n        if ((match.oper & TaskConfig_1.Operation.watch) <= 0) {\n            return false;\n        }\n        else {\n            if (eq <= TaskConfig_1.Operation.watch) {\n                return false;\n            }\n        }\n    }\n    if (tinfo.oper & TaskConfig_1.Operation.serve) {\n        if (!(match.oper & TaskConfig_1.Operation.serve)) {\n            return false;\n        }\n        else {\n            if (eq <= TaskConfig_1.Operation.serve) {\n                return false;\n            }\n        }\n    }\n    if (tinfo.oper & TaskConfig_1.Operation.test) {\n        if (!(match.oper & TaskConfig_1.Operation.test)) {\n            return false;\n        }\n        else {\n            if (eq <= TaskConfig_1.Operation.test) {\n                return false;\n            }\n        }\n    }\n    if (tinfo.oper & TaskConfig_1.Operation.e2e) {\n        if (!(match.oper & TaskConfig_1.Operation.e2e)) {\n            return false;\n        }\n        else {\n            if (eq <= TaskConfig_1.Operation.e2e) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nexports.matchTaskInfo = matchTaskInfo;\nfunction matchTaskGroup(tinfo, match) {\n    if (tinfo.group && match && match.group) {\n        if (_.isString(match.group)) {\n            if (_.isString(tinfo.group) && tinfo.group !== match.group) {\n                return false;\n            }\n            else if (_.isArray(tinfo.group) && tinfo.group.indexOf(match.group) < 0) {\n                return false;\n            }\n        }\n        else if (_.isArray(match.group)) {\n            if (_.isString(tinfo.group) && match.group.indexOf(tinfo.group) < 0) {\n                return false;\n            }\n            else if (_.isArray(tinfo.group) && !contains(tinfo.group, match.group)) {\n                return false;\n            }\n        }\n    }\n    else if (tinfo.group) {\n        return false;\n    }\n    else if (match && match.group) {\n        return false;\n    }\n    return true;\n}\nexports.matchTaskGroup = matchTaskGroup;\n/**\n * convert path to absolute path.\n *\n * @export\n * @param {string} root\n * @param {string} pathstr\n * @returns {string}\n */\nfunction absolutePath(root, pathstr) {\n    if (!root || path.isAbsolute(pathstr)) {\n        return pathstr;\n    }\n    return path.join(root, pathstr);\n}\nexports.absolutePath = absolutePath;\n/**\n * convert src to absolute path src.\n *\n * @export\n * @param {string} root\n * @param {Src} src\n * @returns {Src}\n */\nfunction absoluteSrc(root, src) {\n    if (_.isString(src)) {\n        return absolutePath(root, src);\n    }\n    else {\n        return _.map(src, p => absolutePath(root, p));\n    }\n}\nexports.absoluteSrc = absoluteSrc;\n","import * as _ from 'lodash';\r\nimport { TaskSource, TaskString, Operation, ITaskInfo, Src } from './TaskConfig';\r\nimport { readdirSync, lstatSync } from 'fs';\r\nimport * as path from 'path';\r\n/**\r\n * filter fileName in directory.\r\n * \r\n * @export\r\n * @param {string} directory\r\n * @param {((fileName: string) => boolean)} [express]\r\n * @returns {string[]}\r\n */\r\nexport function files(directory: string, express?: ((fileName: string) => boolean)): string[] {\r\n    let res: string[] = [];\r\n    express = express || ((fn) => true);\r\n    _.each(readdirSync(directory), fname => {\r\n        let filePn = directory + '/' + fname;\r\n        var fst = lstatSync(filePn);\r\n        if (!fst.isDirectory()) {\r\n            if (express(filePn)) {\r\n                res.push(filePn)\r\n            }\r\n        } else {\r\n            res = res.concat(files(filePn, express))\r\n        }\r\n    });\r\n    return res;\r\n}\r\n\r\nexport function taskSourceVal(src: TaskSource, oper?: Operation) {\r\n    return _.isFunction(src) ? src(oper) : (src || '');\r\n}\r\n\r\nexport function taskStringVal(name: TaskString, oper?: Operation) {\r\n    return _.isFunction(name) ? name(oper) : (name || '');\r\n}\r\n\r\n\r\nfunction contains(arr1: string[], arr2: string[]) {\r\n    return arr2.some(arr2Item => arr1.indexOf(arr2Item) >= 0);\r\n}\r\n\r\n\r\n/**\r\n * convert old version Operation to new version Operation\r\n * \r\n * @export\r\n * @param {ITaskInfo} tinfo\r\n * @param {any} [def=Operation.default]\r\n * @returns\r\n */\r\nexport function convertOper(tinfo: ITaskInfo, def = Operation.default) {\r\n    tinfo = tinfo || {};\r\n    if (tinfo.watch) {\r\n        tinfo.oper = (tinfo.oper || def) | Operation.watch;\r\n    }\r\n    if (tinfo.e2e) {\r\n        tinfo.oper = (tinfo.oper || def) | Operation.e2e;\r\n    }\r\n    if (tinfo.test) {\r\n        tinfo.oper = (tinfo.oper || def) | Operation.test;\r\n    }\r\n\r\n    tinfo.oper = tinfo.oper || def;\r\n    return tinfo;\r\n}\r\nfunction convertMatchOper(match: ITaskInfo) {\r\n    if ((match.oper & Operation.test) && !(match.oper & Operation.release)) {\r\n        match.oper = match.oper | Operation.build;\r\n    }\r\n    if ((match.oper & Operation.e2e) && !(match.oper & Operation.release)) {\r\n        match.oper = match.oper | Operation.build;\r\n    }\r\n    if (match.oper & Operation.deploy) {\r\n        match.oper = match.oper | Operation.test | Operation.e2e;\r\n    }\r\n    if (match.oper & Operation.release) {\r\n        match.oper = match.oper | Operation.test;\r\n    }\r\n\r\n    return match;\r\n}\r\n\r\n\r\n/**\r\n * has some oper samed.\r\n * \r\n * @export\r\n * @param {Operation} oper1\r\n * @param {Operation} oper2\r\n * @returns\r\n */\r\nexport function someOper(oper1: Operation, oper2: Operation) {\r\n    return (oper1 & oper2) > 0;\r\n}\r\n\r\n/**\r\n * match task via task info.\r\n * \r\n * @export\r\n * @param {ITaskInfo} tinfo\r\n * @param {ITaskInfo} match\r\n * @returns\r\n */\r\nexport function matchTaskInfo(tinfo: ITaskInfo, match: ITaskInfo) {\r\n\r\n    match = convertOper(match, Operation.build);\r\n    tinfo = convertOper(tinfo);\r\n\r\n    if (match.match) {\r\n        return match.match(tinfo);\r\n    } else if (tinfo.match) {\r\n        return tinfo.match(match);\r\n    } else {\r\n        match = convertMatchOper(match);\r\n    }\r\n\r\n    let eq = tinfo.oper & match.oper;\r\n    // console.log('eq------->:', eq);\r\n    if (eq <= 0) {\r\n        return false;\r\n    }\r\n\r\n    if (tinfo.oper & Operation.watch) {\r\n        if ((match.oper & Operation.watch) <= 0) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.watch) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tinfo.oper & Operation.serve) {\r\n        if (!(match.oper & Operation.serve)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.serve) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tinfo.oper & Operation.test) {\r\n        if (!(match.oper & Operation.test)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.test) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tinfo.oper & Operation.e2e) {\r\n        if (!(match.oper & Operation.e2e)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.e2e) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function matchTaskGroup(tinfo: ITaskInfo, match: ITaskInfo): boolean {\r\n    if (tinfo.group && match && match.group) {\r\n        if (_.isString(match.group)) {\r\n            if (_.isString(tinfo.group) && tinfo.group !== match.group) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && tinfo.group.indexOf(match.group) < 0) {\r\n                return false;\r\n            }\r\n        } else if (_.isArray(match.group)) {\r\n            if (_.isString(tinfo.group) && match.group.indexOf(tinfo.group) < 0) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && !contains(tinfo.group, match.group)) {\r\n                return false;\r\n            }\r\n        }\r\n    } else if (tinfo.group) {\r\n        return false;\r\n    } else if (match && match.group) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * convert path to absolute path.\r\n * \r\n * @export\r\n * @param {string} root\r\n * @param {string} pathstr\r\n * @returns {string}\r\n */\r\nexport function absolutePath(root: string, pathstr: string): string {\r\n    if (!root || path.isAbsolute(pathstr)) {\r\n        return pathstr;\r\n    }\r\n    return path.join(root, pathstr);\r\n}\r\n\r\n/**\r\n * convert src to absolute path src.\r\n * \r\n * @export\r\n * @param {string} root\r\n * @param {Src} src\r\n * @returns {Src}\r\n */\r\nexport function absoluteSrc(root: string, src: Src): Src {\r\n    if (_.isString(src)) {\r\n        return absolutePath(root, src)\r\n    } else {\r\n        return _.map(src, p => absolutePath(root, p));\r\n    }\r\n}\r\n"]}