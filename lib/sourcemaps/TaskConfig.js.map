{"version":3,"sources":["TaskConfig.js","TaskConfig.ts"],"names":["RunWay","exports","Operation"],"mappings":"AAAA;ACGA;;;;;;;AAMA,CAAA,UAAYA,MAAZ,EAAkB;AACd;;;AAGAA,SAAAA,OAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AACA;;;AAGAA,SAAAA,OAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AACH,CATD,EAAYC,QAAAD,MAAA,KAAAC,QAAAD,MAAA,GAAM,EAAN,CAAZ;AAAA,IAAYA,SAAAC,QAAAD,MAAZ;AAWA;;;;;;AAMA,CAAA,UAAYE,SAAZ,EAAqB;AACjB;;;AAGAA,YAAAA,UAAA,OAAA,IAAA,CAAA,IAAA,OAAA;AACA;;;AAGAA,YAAAA,UAAA,MAAA,IAAA,CAAA,IAAA,MAAA;AACA;;;AAGAA,YAAAA,UAAA,KAAA,IAAA,CAAA,IAAA,KAAA;AACA;;;AAGAA,YAAAA,UAAA,SAAA,IAAA,CAAA,IAAA,SAAA;AACA;;;AAGAA,YAAAA,UAAA,QAAA,IAAA,EAAA,IAAA,QAAA;AACA;;;AAGAA,YAAAA,UAAA,OAAA,IAAA,EAAA,IAAA,OAAA;AACA;;;AAGAA,YAAAA,UAAA,OAAA,IAAA,EAAA,IAAA,OAAA;AAEA;;;AAGAA,YAAAA,UAAA,OAAA,IAAA,GAAA,IAAA,OAAA;AAEA;;;AAGAA,YAAAA,UAAA,SAAA,IAAA,EAAA,IAAA,SAAA;AAEA;;;AAGAA,YAAAA,UAAA,cAAA,IAAA,GAAA,IAAA,cAAA;AACH,CA5CD,EAAYD,QAAAC,SAAA,KAAAD,QAAAC,SAAA,GAAS,EAAT,CAAZ;AAAA,IAAYA,YAAAD,QAAAC,SAAZ","file":"../TaskConfig.js","sourcesContent":["\"use strict\";\n/**\n * mutil source stream pipe task run way.\n *\n * @export\n * @enum {number}\n */\n(function (RunWay) {\n    /**\n     * run mutil source stream by sequence.\n     */\n    RunWay[RunWay[\"sequence\"] = 1] = \"sequence\";\n    /**\n     * run mutil source stream by parallel.\n     */\n    RunWay[RunWay[\"parallel\"] = 2] = \"parallel\";\n})(exports.RunWay || (exports.RunWay = {}));\nvar RunWay = exports.RunWay;\n/**\n * project development build operation.\n *\n * @export\n * @enum {number}\n */\n(function (Operation) {\n    /**\n     * build compile project.\n     */\n    Operation[Operation[\"build\"] = 1] = \"build\";\n    /**\n     * test project.\n     */\n    Operation[Operation[\"test\"] = 2] = \"test\";\n    /**\n     * e2e test project.\n     */\n    Operation[Operation[\"e2e\"] = 4] = \"e2e\";\n    /**\n     * release project.\n     */\n    Operation[Operation[\"release\"] = 8] = \"release\";\n    /**\n     * release and deploy project.\n     */\n    Operation[Operation[\"deploy\"] = 16] = \"deploy\";\n    /**\n     * clean task\n     */\n    Operation[Operation[\"clean\"] = 32] = \"clean\";\n    /**\n     * serve task\n     */\n    Operation[Operation[\"serve\"] = 64] = \"serve\";\n    /**\n     * watch task.\n     */\n    Operation[Operation[\"watch\"] = 128] = \"watch\";\n    /**\n     * default operation.\n     */\n    Operation[Operation[\"default\"] = 25] = \"default\";\n    /**\n     * define watch Operation (Operation.build | Operation.test | Operation.e2e | Operation.watch)\n     */\n    Operation[Operation[\"defaultWatch\"] = 135] = \"defaultWatch\";\n})(exports.Operation || (exports.Operation = {}));\nvar Operation = exports.Operation;\n","import { Gulp, WatchEvent, WatchCallback, TaskCallback } from 'gulp';\r\n\r\n\r\n/**\r\n * mutil source stream pipe task run way.\r\n * \r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum RunWay {\r\n    /**\r\n     * run mutil source stream by sequence.\r\n     */\r\n    sequence = 1,\r\n    /**\r\n     * run mutil source stream by parallel.\r\n     */\r\n    parallel = 2\r\n}\r\n\r\n/**\r\n * project development build operation.\r\n * \r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum Operation {\r\n    /**\r\n     * build compile project.\r\n     */\r\n    build = 1 << 0,\r\n    /**\r\n     * test project.\r\n     */\r\n    test = 1 << 1,\r\n    /**\r\n     * e2e test project.\r\n     */\r\n    e2e = 1 << 2,\r\n    /**\r\n     * release project.\r\n     */\r\n    release = 1 << 3,\r\n    /**\r\n     * release and deploy project.\r\n     */\r\n    deploy = 1 << 4,\r\n    /**\r\n     * clean task\r\n     */\r\n    clean = 1 << 5,\r\n    /**\r\n     * serve task\r\n     */\r\n    serve = 1 << 6,\r\n\r\n    /**\r\n     * watch task.\r\n     */\r\n    watch = 1 << 7,\r\n\r\n    /**\r\n     * default operation.\r\n     */\r\n    default = Operation.build | Operation.release | Operation.deploy,\r\n\r\n    /**\r\n     * define watch Operation (Operation.build | Operation.test | Operation.e2e | Operation.watch)\r\n     */\r\n    defaultWatch = Operation.build | Operation.test | Operation.e2e | Operation.watch\r\n}\r\n\r\n/**\r\n * object map.\r\n * \r\n * @export\r\n * @interface IMap\r\n * @template T\r\n */\r\nexport interface IMap<T> {\r\n    [K: string]: T;\r\n}\r\n\r\n/**\r\n * Order type.\r\n */\r\nexport type Order = number | ((total: number) => number);\r\n\r\n/**\r\n * src\r\n */\r\nexport type Src = string | string[];\r\n\r\n/**\r\n * operate.\r\n * \r\n * @export\r\n * @interface IOperate\r\n */\r\nexport interface IOperate {\r\n    /**\r\n     * operate name\r\n     * \r\n     * @type {TaskString}\r\n     * @memberOf IOperate\r\n     */\r\n    name?: TaskString;\r\n    /**\r\n     * operation \r\n     * \r\n     * enmu flags. \r\n     * @type {Operation}\r\n     * @memberOf IOperate\r\n     */\r\n    oper?: Operation;\r\n    /**\r\n     * order index.\r\n     * \r\n     * @type {Order}\r\n     * @memberOf IOperate\r\n     */\r\n    order?: Order;\r\n}\r\n\r\n/**\r\n * task decorator info.\r\n * \r\n * @export\r\n * @interface ITaskDecorator\r\n * @extends {IOperate}\r\n */\r\nexport interface ITaskDecorator extends IOperate {\r\n    /**\r\n     * assert tasks. assert group name or extends name.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf ITaskInfo\r\n     */\r\n    group?: Src;\r\n\r\n    /**\r\n     * custom jduge info match to another.\r\n     * \r\n     * @param {ITaskDecorator} another\r\n     * \r\n     * @memberOf ITaskInfo\r\n     */\r\n    match?(another: ITaskDecorator);\r\n}\r\n\r\n/**\r\n * task decorator data.\r\n * \r\n * @export\r\n * @interface ITaskInfo\r\n * @extends {ITaskDecorator}\r\n */\r\nexport interface ITaskInfo extends ITaskDecorator {\r\n    /**\r\n     * finally task name.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf ITaskInfo\r\n     */\r\n    taskName?: Src;\r\n\r\n    /**\r\n     * assert dist info.\r\n     * \r\n     * @type {IAssertDist}\r\n     * @memberOf ITaskInfo\r\n     */\r\n    assert?: IAssertDist\r\n}\r\n\r\n/**\r\n * task interface.\r\n * \r\n * @export\r\n * @interface ITask\r\n */\r\nexport interface ITask {\r\n    /**\r\n     * old filed. \r\n     * \r\n     * @type {ITaskInfo}\r\n     * @memberOf ITask\r\n     */\r\n    getInfo(): ITaskInfo;\r\n\r\n    /**\r\n     * set task info.\r\n     * \r\n     * @param {ITaskInfo} info\r\n     * \r\n     * @memberOf ITask\r\n     */\r\n    setInfo?(info: ITaskInfo);\r\n    /**\r\n     * setup task.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} [gulp]\r\n     * @returns {TaskResult}\r\n     * \r\n     * @memberOf ITask\r\n     */\r\n    setup(context: ITaskContext, gulp?: Gulp): TaskResult;\r\n}\r\n\r\n\r\nexport type TaskResult = Src | void;\r\n\r\n/**\r\n * task source\r\n */\r\nexport type TaskSource = Src | ((ctx?: ITaskContext) => Src);\r\n\r\n/**\r\n * task string\r\n */\r\nexport type TaskString = string | ((ctx?: ITaskContext) => string);\r\n\r\n\r\n/**\r\n * transform interface.\r\n * \r\n * @export\r\n * @interface ITransform\r\n * @extends {NodeJS.ReadWriteStream}\r\n */\r\nexport interface ITransform extends IOperate, NodeJS.ReadWriteStream {\r\n    /**\r\n     * custom set ITransform after pipe out.\r\n     * \r\n     * @param {ITransform} ouputStream\r\n     * @returns {ITransform}\r\n     * \r\n     * @memberOf ITransform\r\n     */\r\n    transformPipe?(ouputStream: ITransform): ITransform;\r\n\r\n    /**\r\n     * custom transform from source stream pipe in.\r\n     * \r\n     * @param {ITransform} sourceStream\r\n     * @returns {ITransform}\r\n     * \r\n     * @memberOf ITransform\r\n     */\r\n    transformSourcePipe?(sourceStream: ITransform): ITransform;\r\n    /**\r\n     * transform pipe\r\n     * \r\n     * @param {NodeJS.ReadWriteStream} stream\r\n     * @returns {ITransform}\r\n     * \r\n     * @memberOf ITransform\r\n     */\r\n    pipe(stream: NodeJS.ReadWriteStream): ITransform;\r\n}\r\n\r\n/**\r\n * transform source.\r\n */\r\nexport type TransformSource = ITransform | ITransform[];\r\n/**\r\n * output transform.\r\n * \r\n * @export\r\n * @interface IOutput\r\n * @extends {ITransform}\r\n */\r\nexport interface IOutput extends ITransform {\r\n    // dts?: ITransform;\r\n    // js?: ITransform\r\n}\r\n\r\n\r\n/**\r\n * pipe work\r\n * \r\n * @export\r\n * @interface IPipe\r\n */\r\nexport interface IPipe extends IOperate {\r\n    /**\r\n     * transform to pipe work\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} [dist]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(ITransform | Promise<ITransform>)}\r\n     * \r\n     * @memberOf IPipe\r\n     */\r\n    toTransform?(context: ITaskContext, dist?: IAssertDist, gulp?: Gulp): ITransform | Promise<ITransform>;\r\n}\r\n\r\nexport type Pipe = IPipe | ((ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => ITransform | Promise<ITransform>);\r\n\r\n\r\n\r\n/**\r\n * output pipe\r\n * \r\n * @export\r\n * @interface IOutputPipe\r\n */\r\nexport interface IOutputPipe extends IOperate {\r\n    /**\r\n     * output pipes\r\n     * \r\n     * @param {ITransform} stream\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} [dist]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(ITransform | Promise<ITransform>)}\r\n     * \r\n     * @memberOf IOutputPipe\r\n     */\r\n    toTransform?(stream: ITransform, context: ITaskContext, dist?: IAssertDist, gulp?: Gulp): ITransform | Promise<ITransform>;\r\n}\r\n\r\nexport type OutputPipe = IOutputPipe | ((stream: ITransform, ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => ITransform | Promise<ITransform>);\r\n\r\n\r\n/**\r\n * assert dist.\r\n * \r\n * @export\r\n * @interface IAssertDist\r\n * @extends {IOperate}\r\n */\r\nexport interface IAssertDist {\r\n    /**\r\n     * assert name\r\n     * \r\n     * @type {TaskString}\r\n     * @memberOf IOperate\r\n     */\r\n    name?: TaskString;\r\n\r\n    /**\r\n     * the src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    src?: TaskSource;\r\n\r\n    /**\r\n     * the e2e src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    e2eSrc?: TaskSource;\r\n\r\n    /**\r\n     * the test src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    testSrc?: TaskSource\r\n\r\n    /**\r\n     * clean special source in 'dist'. if not setting, default clean 'dist' folder.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    cleanSrc?: TaskSource;\r\n\r\n    /**\r\n     * auto create task to watch this source.\r\n     * \r\n     * @type {(boolean | Array<string | WatchCallback>)}\r\n     * @memberOf IAssertDist\r\n     */\r\n    watch?: boolean | Array<string | WatchCallback>;\r\n\r\n    /**\r\n     * the watch src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    watchSrc?: TaskSource;\r\n    /**\r\n     * default output folder. if empty use parent setting, or ues 'dist'.\r\n     */\r\n    dist?: TaskString;\r\n    /**\r\n     * build output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    buildDist?: string;\r\n    /**\r\n     * test output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    testDist?: string;\r\n    /**\r\n     * e2e output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    e2eDist?: string;\r\n    /**\r\n     * release output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    releaseDist?: string;\r\n    /**\r\n     * deploy output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    deployDist?: string;\r\n}\r\n\r\n\r\n/**\r\n * custom pipe.\r\n * \r\n * @export\r\n * @interface ICustomPipe\r\n */\r\nexport interface ICustomPipe {\r\n    /**\r\n     * custom stream pipe.\r\n     * \r\n     * @param {ITransform} gulpsrc\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} [dist]\r\n     * @param {Gulp} [gulp]\r\n     * @param {TaskCallback} [callback]\r\n     * @returns {(ITransform | Promise<ITransform> | void)}\r\n     * \r\n     * @memberOf ICustomPipe\r\n    * */\r\n    pipe?(gulpsrc: ITransform, context: ITaskContext, dist?: IAssertDist, gulp?: Gulp, callback?: TaskCallback): ITransform | Promise<ITransform> | void;\r\n\r\n}\r\n\r\n/**\r\n * pipe works.\r\n * \r\n * @export\r\n * @interface IPipeOption\r\n * @extends {ICustomPipe}\r\n */\r\nexport interface IPipeOption extends ICustomPipe {\r\n    /**\r\n     * task source stream config.\r\n     * \r\n     * \r\n     * @memberOf IPipeOption\r\n     */\r\n    source?: TransformSource | ((ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => TransformSource)\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * \r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    pipes?: Pipe[] | ((ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => Pipe[]);\r\n\r\n    /**\r\n     * output pipe task\r\n     *\r\n     * \r\n     * @memberOf IPipeOption\r\n     */\r\n    output?: IOutputPipe[] | ((ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => IOutputPipe[]);\r\n}\r\n\r\n\r\n\r\n/**\r\n * dynamic gulp task.\r\n * \r\n * @export\r\n * @interface IDynamicTaskOption\r\n * @extends {IAssertDist}\r\n */\r\nexport interface IDynamicTaskOption extends IAssertDist, IPipeOption, ICustomPipe, ITaskInfo {\r\n    /**\r\n     * IAsserts extends name. for register dynamic task.\r\n     * \r\n     * @type {TaskName}\r\n     * @memberOf IAsserts\r\n     */\r\n    name: TaskString;\r\n    /**\r\n     * watch tasks\r\n     * \r\n     * \r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    watchTasks?: Array<string | WatchCallback> | ((ctx?: ITaskContext, dt?: IDynamicTaskOption) => Array<string | WatchCallback>);\r\n    /**\r\n     * watch changed.\r\n     * \r\n     * @param {WatchEvent} event\r\n     * @param {ITaskContext} context\r\n     * \r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    watchChanged?(event: WatchEvent, context: ITaskContext);\r\n\r\n    /**\r\n     * custom task.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IDynamicTaskOption} [dt]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(void | ITransform | Promise<any>)}\r\n     * \r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    task?(context: ITaskContext, dt?: IDynamicTaskOption, gulp?: Gulp): void | ITransform | Promise<any>;\r\n\r\n}\r\n\r\n/**\r\n * dynamic tasks\r\n * \r\n * @export\r\n * @interface ITasks\r\n */\r\nexport interface IDynamicTasks {\r\n    tasks(): IDynamicTaskOption[];\r\n}\r\n\r\n\r\n/**\r\n * IAsserts to be dealt with.\r\n * \r\n * @export\r\n * @interface IAsserts\r\n * @extends {IAssertDist}\r\n */\r\nexport interface IAsserts extends IAssertDist, IPipeOption, ICustomPipe {\r\n    /**\r\n     * tasks to deal with IAsserts.\r\n     * \r\n     * @type {IMap<Src | IAsserts | IDynamicTaskOption[]>}\r\n     * @memberOf IAsserts\r\n     */\r\n    asserts?: IMap<Src | IAsserts | IDynamicTaskOption[]>;\r\n\r\n    /**\r\n     * set IAsserts task order in this task sequence.\r\n     * \r\n     * @type {Order}\r\n     * @memberOf IAsserts\r\n     */\r\n    assertsOrder?: Order;\r\n}\r\n\r\n\r\n\r\n/**\r\n * custom modules task load define.\r\n * will be remove. use IContextDefine instead.\r\n * \r\n * @export\r\n * @interface ITaskDefine\r\n */\r\nexport interface ITaskDefine {\r\n    /**\r\n     * load config in modules\r\n     * \r\n     * @param {IAsserts} option\r\n     * @returns {ITaskContext}\r\n     * \r\n     * @memberOf ITaskDefine\r\n     */\r\n    loadConfig(option: IAsserts, env: IEnvOption): ITaskConfig\r\n\r\n    /**\r\n     * load task in modules.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {tasksInModule} findInModule\r\n     * @param {tasksInDir} findInDir\r\n     * @returns {Task[]}\r\n     * \r\n     * @memberOf ITaskDefine\r\n     */\r\n    loadTasks?(context: ITaskContext): Promise<ITask[]>;\r\n}\r\n\r\n/**\r\n * task context define.\r\n * \r\n * @export\r\n * @interface IContextDefine\r\n */\r\nexport interface IContextDefine {\r\n    /**\r\n     * get context of tasks module.\r\n     * \r\n     * @param {ITaskConfig} config\r\n     * @returns {ITaskContext}\r\n     * \r\n     * @memberOf IContextDefine\r\n     */\r\n    getContext(config: ITaskConfig): ITaskContext;\r\n\r\n    /**\r\n     * get tasks in module.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @returns {Promise<ITask[]>}\r\n     * \r\n     * @memberOf IContextDefine\r\n     */\r\n    tasks?(context: ITaskContext): Promise<ITask[]>;\r\n\r\n}\r\n\r\n/**\r\n * task config. runtime task config for setup task.\r\n * \r\n * @export\r\n * @interface ITaskConfig\r\n */\r\nexport interface ITaskConfig {\r\n    /**\r\n     * custom global data cache.\r\n     */\r\n    globals?: any;\r\n    /**\r\n     * env\r\n     * \r\n     * @type {EnvOption}\r\n     * @memberOf ITaskConfig\r\n     */\r\n    env: IEnvOption;\r\n    /**\r\n     * task option setting.\r\n     * \r\n     * @type {IAsserts}\r\n     * @memberOf ITaskConfig\r\n     */\r\n    option: IAsserts;\r\n\r\n    /**\r\n     * add task result to task sequence. default implement in bindingConfig.\r\n     * \r\n     * @param {Src[]} sequence  task sequence.\r\n     * @param {ITaskInfo} task\r\n     * @returns {Src[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    addToSequence?(sequence: Src[], task: ITaskInfo): Src[];\r\n\r\n    /**\r\n     * custom config run tasks sequence in.\r\n     * \r\n     * @param {Src[]} [tasks]\r\n     * @param {ITaskInfo} [assertTasks]\r\n     * @param {ITaskInfo} [subGroupTask]\r\n     * @returns {Src[]}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    runTasks?(tasks?: Src[], assertTasks?: ITaskInfo, subGroupTask?: ITaskInfo, ): Src[];\r\n}\r\n\r\n\r\n/**\r\n * runtime task context.\r\n * \r\n * @export\r\n * @interface ITaskContext\r\n */\r\nexport interface ITaskContext extends ITaskConfig {\r\n    /**\r\n     * run operation\r\n     * \r\n     * @type {Operation}\r\n     * @memberOf ITaskContext\r\n     */\r\n    oper: Operation;\r\n\r\n    /**\r\n     * custom task match filter\r\n     * \r\n     * @param {ITaskInfo} task\r\n     * @param {ITaskInfo} match\r\n     * @returns {boolean}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    match?(task: ITaskInfo, match: ITaskInfo): boolean;\r\n\r\n    /**\r\n     * get Src of current state.   default implement in bindingConfig.\r\n     * \r\n     * @param {ITaskInfo} [task]\r\n     * @param {boolean} [relative] get relative path or absolute path. \r\n     * @returns {Src}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    getSrc(task?: ITaskInfo, relative?: boolean): Src;\r\n\r\n    /**\r\n     * get dist of current state.  default implement in bindingConfig.\r\n     * \r\n     * @param {ITaskInfo} [task]\r\n     * @param {boolean} [relative] get relative path or absolute path. \r\n     * @returns {string}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    getDist(task?: ITaskInfo, relative?: boolean): string;\r\n\r\n    /**\r\n     * generate sub task name. default implement in bindingConfig.\r\n     * \r\n     * @param {string | ITaskInfo} task\r\n     * @param {string} [ext] ext name.\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    subTaskName(task: string | ITaskInfo, ext?: string);\r\n\r\n    /**\r\n     * custom print help.\r\n     * \r\n     * @param {string} lang\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    printHelp?(lang: string): void;\r\n\r\n    /**\r\n     * find  task in module. default implement in bindingConfig.\r\n     * \r\n     * @param {(string | Object)} module\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {Promise<ITask[]>}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]>;\r\n\r\n    /**\r\n     * find  task in directories. default implement in bindingConfig.\r\n     * \r\n     * @param {Src} dirs\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {Promise<ITask[]>}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    findTasksInDir(dirs: Src, match?: ITaskInfo): Promise<ITask[]>;\r\n\r\n    /**\r\n     * find taskdefine in module. default implement in bindingConfig.\r\n     * \r\n     * @param {(string | Object)} module\r\n     * @returns {Promise<ITaskDefine>}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    findTaskDefine?(module: string | Object): Promise<ITaskDefine>;\r\n    /**\r\n     * find taskdefine in directories.  default implement in bindingConfig.\r\n     * \r\n     * @param {Src} dirs\r\n     * @returns {Promise<ITaskDefine>}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    findTaskDefineInDir(dirs: Src): Promise<ITaskDefine>\r\n\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     * \r\n     * @param {string} directory\r\n     * @param {((fileName: string) => boolean)} [express]\r\n     * @returns {string[]}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    fileFilter(directory: string, express?: ((fileName: string) => boolean)): string[];\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     * \r\n     * @param {Gulp} gulp\r\n     * @param {Src[]} tasks\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    runSequence(gulp: Gulp, tasks: Src[]): Promise<any>;\r\n\r\n    /**\r\n     * dynamic generate tasks.  default implement in bindingConfig.\r\n     * \r\n     * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {ITask[]}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[];\r\n\r\n    /**\r\n     * add task result to task sequence. default implement in bindingConfig.\r\n     * \r\n     * @param {Src[]} sequence  task sequence.\r\n     * @param {ITaskInfo} task\r\n     * @returns {Src[]}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[];\r\n\r\n    /**\r\n     * join src to absolute path src with root( env.root ). \r\n     * \r\n     * @param {Src} src\r\n     * @returns {Src}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    toRootSrc(src: Src): Src\r\n\r\n    /**\r\n     * join pathstr to absolute path src with root( env.root ). \r\n     * \r\n     * @param {string} pathstr\r\n     * @returns {string}\r\n     * \r\n     * @memberOf ITaskContext\r\n     */\r\n    toRootPath(pathstr: string): string;\r\n\r\n    // /**\r\n    //  * active work pipe option from context.\r\n    //  * \r\n    //  * @param {(op: IPipeOption) => void} express\r\n    //  * @param {boolean} [route]\r\n    //  * \r\n    //  * @memberOf ITaskContext\r\n    //  */\r\n    // pipeOption(express: (op: IPipeOption) => void, route?: boolean);\r\n}\r\n\r\n/**\r\n * event option\r\n * \r\n * @export\r\n * @interface IEnvOption\r\n */\r\nexport interface IEnvOption {\r\n    /**\r\n     * project root.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IEnvOption\r\n     */\r\n    root?: string;\r\n    /**\r\n     * help doc\r\n     * \r\n     * @type {(boolean | string)}\r\n     * @memberOf IEnvOption\r\n     */\r\n    help?: boolean | string;\r\n    test?: boolean | string;\r\n    serve?: boolean | string;\r\n    e2e?: boolean | string;\r\n    release?: boolean;\r\n    deploy?: boolean;\r\n    watch?: boolean | string;\r\n    /**\r\n     * run spruce task.\r\n     */\r\n    task?: string;\r\n\r\n    /**\r\n     * project config setting.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IEnvOption\r\n     */\r\n    config?: string;\r\n\r\n    // key?: number;\r\n    // value?: number;\r\n    // csv?: string;\r\n    // dist?: string;\r\n    // lang?: string;\r\n\r\n    publish?: boolean | string;\r\n\r\n    /**\r\n     * task group.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf IEnvOption\r\n     */\r\n    group?: Src;\r\n\r\n    /**\r\n     * group bundle.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf IEnvOption\r\n     */\r\n    gb?: Src;\r\n}\r\n"]}