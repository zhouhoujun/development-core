{"version":3,"sources":["TaskConfig.js","TaskConfig.ts"],"names":["Operation","exports"],"mappings":"AAAA,cCQA,SAAYA,GAIRA,EAAAA,EAAA,MAAA,GAAA,QAIAA,EAAAA,EAAA,KAAA,GAAA,OAIAA,EAAAA,EAAA,IAAA,GAAA,MAIAA,EAAAA,EAAA,QAAA,GAAA,UAIAA,EAAAA,EAAA,OAAA,IAAA,SAIAA,EAAAA,EAAA,MAAA,IAAA,QAIAA,EAAAA,EAAA,MAAA,IAAA,QAKAA,EAAAA,EAAA,MAAA,KAAA,QAKAA,EAAAA,EAAA,QAAA,IAAA,WAtCQC,QAAAD,YAAAC,QAAAD,cAAZ,IAAYA,WAAAC,QAAAD","file":"../TaskConfig.js","sourcesContent":["\"use strict\";\n/**\n * project development build operation.\n *\n * @export\n * @enum {number}\n */\n(function (Operation) {\n    /**\n     * build compile project.\n     */\n    Operation[Operation[\"build\"] = 1] = \"build\";\n    /**\n     * test project.\n     */\n    Operation[Operation[\"test\"] = 2] = \"test\";\n    /**\n     * e2e test project.\n     */\n    Operation[Operation[\"e2e\"] = 4] = \"e2e\";\n    /**\n     * release project.\n     */\n    Operation[Operation[\"release\"] = 8] = \"release\";\n    /**\n     * release and deploy project.\n     */\n    Operation[Operation[\"deploy\"] = 16] = \"deploy\";\n    /**\n     * clean task\n     */\n    Operation[Operation[\"clean\"] = 32] = \"clean\";\n    /**\n     * serve task\n     */\n    Operation[Operation[\"serve\"] = 64] = \"serve\";\n    /**\n     * watch task.\n     */\n    Operation[Operation[\"watch\"] = 128] = \"watch\";\n    /**\n     * default operation.\n     */\n    Operation[Operation[\"default\"] = 25] = \"default\";\n})(exports.Operation || (exports.Operation = {}));\nvar Operation = exports.Operation;\n","import { Gulp, WatchEvent, WatchCallback, TaskCallback } from 'gulp';\r\n\r\n/**\r\n * project development build operation.\r\n * \r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum Operation {\r\n    /**\r\n     * build compile project.\r\n     */\r\n    build = 1 << 0,\r\n    /**\r\n     * test project.\r\n     */\r\n    test = 1 << 1,\r\n    /**\r\n     * e2e test project.\r\n     */\r\n    e2e = 1 << 2,\r\n    /**\r\n     * release project.\r\n     */\r\n    release = 1 << 3,\r\n    /**\r\n     * release and deploy project.\r\n     */\r\n    deploy = 1 << 4,\r\n    /**\r\n     * clean task\r\n     */\r\n    clean = 1 << 5,\r\n    /**\r\n     * serve task\r\n     */\r\n    serve = 1 << 6,\r\n\r\n    /**\r\n     * watch task.\r\n     */\r\n    watch = 1 << 7,\r\n\r\n    /**\r\n     * default operation.\r\n     */\r\n    default = Operation.build | Operation.release | Operation.deploy\r\n}\r\n\r\n/**\r\n * object map.\r\n * \r\n * @export\r\n * @interface IMap\r\n * @template T\r\n */\r\nexport interface IMap<T> {\r\n    [K: string]: T;\r\n}\r\n\r\n/**\r\n * src\r\n */\r\nexport type Src = string | string[];\r\n\r\n/**\r\n * operate.\r\n * \r\n * @export\r\n * @interface IOperate\r\n */\r\nexport interface IOperate {\r\n    /**\r\n     * operation \r\n     * \r\n     * enmu flags. \r\n     * @type {Operation}\r\n     * @memberOf IOperate\r\n     */\r\n    oper?: Operation;\r\n    /**\r\n     * order index.\r\n     * \r\n     * @type {number}\r\n     * @memberOf IOperate\r\n     */\r\n    order?: number;\r\n}\r\n\r\n/**\r\n * task decorator data.\r\n * \r\n * @export\r\n * @interface ITaskInfo\r\n * @extends {IOperate}\r\n */\r\nexport interface ITaskInfo extends IOperate {\r\n\r\n    /**\r\n     * dynamic generate task name.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf ITaskInfo\r\n     */\r\n    taskName?: Src;\r\n\r\n    /**\r\n     * assert tasks. assert group name or extends name.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf ITaskInfo\r\n     */\r\n    group?: Src;\r\n\r\n    /**\r\n     * custom jduge info match to another.\r\n     * \r\n     * @param {ITaskInfo} another\r\n     * \r\n     * @memberOf ITaskInfo\r\n     */\r\n    match?(another: ITaskInfo);\r\n\r\n\r\n    /**\r\n     * well be remove, please use Operation.watch instead. is watch task or not. \r\n     * \r\n     * @type {boolean | string}\r\n     * @memberOf ITaskInfo\r\n     */\r\n    watch?: boolean | string;\r\n\r\n    /**\r\n     * well be remove, please use Operation.test instead. is test or not.\r\n     * \r\n     * @type {(boolean | string)}\r\n     * @memberOf ITaskInfo\r\n     */\r\n    test?: boolean | string;\r\n\r\n    /**\r\n     * well be remove, please use Operation.e2e instead. is e2e test or not.\r\n     * \r\n     * @type {(boolean | string)}\r\n     * @memberOf ITaskInfo\r\n     */\r\n    e2e?: boolean | string;\r\n}\r\n\r\nexport type TaskResult = Src | void;\r\n\r\nexport type TaskSource = Src | ((oper?: Operation) => Src);\r\nexport type TaskString = string | ((oper?: Operation) => string);\r\n\r\n\r\n/**\r\n * transform interface.\r\n * \r\n * @export\r\n * @interface ITransform\r\n * @extends {NodeJS.ReadWriteStream}\r\n */\r\nexport interface ITransform extends IOperate, NodeJS.ReadWriteStream {\r\n    /**\r\n     * custom set ITransform after pipe out.\r\n     * \r\n     * @param {ITransform} ouputStream\r\n     * @returns {ITransform}\r\n     * \r\n     * @memberOf ITransform\r\n     */\r\n    transformPipe?(ouputStream: ITransform): ITransform;\r\n\r\n    /**\r\n     * custom transform from source stream pipe in.\r\n     * \r\n     * @param {ITransform} sourceStream\r\n     * @returns {ITransform}\r\n     * \r\n     * @memberOf ITransform\r\n     */\r\n    transformSourcePipe?(sourceStream: ITransform): ITransform;\r\n    /**\r\n     * transform pipe\r\n     * \r\n     * @param {NodeJS.ReadWriteStream} stream\r\n     * @returns {ITransform}\r\n     * \r\n     * @memberOf ITransform\r\n     */\r\n    pipe(stream: NodeJS.ReadWriteStream): ITransform;\r\n}\r\n\r\n/**\r\n * output transform. support typescript output.\r\n * \r\n * @export\r\n * @interface IOutput\r\n * @extends {ITransform}\r\n */\r\nexport interface IOutput extends ITransform {\r\n    dts?: ITransform;\r\n    js?: ITransform\r\n}\r\n\r\n\r\n/**\r\n * pipe operate\r\n * \r\n * @export\r\n * @interface IPipeOperate\r\n * @extends {IOperate}\r\n */\r\nexport interface IPipeOperate extends IOperate {\r\n    /**\r\n     * pipe work group name.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IPipe\r\n     */\r\n    name?: string;\r\n}\r\n\r\n/**\r\n * pipe work\r\n * \r\n * @export\r\n * @interface IPipe\r\n */\r\nexport interface IPipe extends IPipeOperate {\r\n    /**\r\n     * transform to pipe work\r\n     * \r\n     * @param {ITaskConfig} config\r\n     * @param {IAssertDist} [dist]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(ITransform | Promise<ITransform>)}\r\n     * \r\n     * @memberOf IPipe\r\n     */\r\n    toTransform?(config: ITaskConfig, dist?: IAssertDist, gulp?: Gulp): ITransform | Promise<ITransform>;\r\n}\r\n\r\nexport type Pipe = IPipe | ((config?: ITaskConfig, dist?: IAssertDist, gulp?: Gulp) => ITransform | Promise<ITransform>);\r\n\r\n\r\n\r\n/**\r\n * output pipe\r\n * \r\n * @export\r\n * @interface IOutputPipe\r\n */\r\nexport interface IOutputPipe extends IPipeOperate {\r\n    /**\r\n     * output pipes\r\n     * \r\n     * @param {IOutput} stream\r\n     * @param {ITaskConfig} config\r\n     * @param {IAssertDist} [dist]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(ITransform | Promise<ITransform>)}\r\n     * \r\n     * @memberOf IOutputPipe\r\n     */\r\n    toTransform?(stream: IOutput, config: ITaskConfig, dist?: IAssertDist, gulp?: Gulp): ITransform | Promise<ITransform>;\r\n}\r\n\r\nexport type OutputPipe = IOutputPipe | ((stream: IOutput, config?: ITaskConfig, dist?: IAssertDist, gulp?: Gulp) => ITransform | Promise<ITransform>);\r\n\r\n\r\n/**\r\n * assert dist.\r\n * \r\n * @export\r\n * @interface IAssertDist\r\n */\r\nexport interface IAssertDist {\r\n    /**\r\n     * IAsserts extends name. for register dynamic task.\r\n     * \r\n     * @type {TaskName}\r\n     * @memberOf IAsserts\r\n     */\r\n    name?: TaskString;\r\n\r\n    /**\r\n     * the src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    src?: TaskSource;\r\n\r\n    /**\r\n     * the e2e src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    e2eSrc?: TaskSource;\r\n\r\n    /**\r\n     * the test src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    testSrc?: TaskSource\r\n\r\n    /**\r\n     * clean special source in 'dist'. if not setting, default clean 'dist' folder.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    cleanSrc?: TaskSource;\r\n\r\n\r\n    /**\r\n     * the watch src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IAssertDist\r\n     */\r\n    watchSrc?: TaskSource;\r\n    /**\r\n     * default output folder. if empty use parent setting, or ues 'dist'.\r\n     */\r\n    dist?: TaskString;\r\n    /**\r\n     * build output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    buildDist?: string;\r\n    /**\r\n     * test output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    testDist?: string;\r\n    /**\r\n     * e2e output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    e2eDist?: string;\r\n    /**\r\n     * release output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    releaseDist?: string;\r\n    /**\r\n     * deploy output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    deployDist?: string;\r\n}\r\n\r\n\r\n\r\n// function not support deforator.\r\n// export type Task = (gulp: Gulp, config: ITaskConfig) => TaskSequence;\r\n\r\n/**\r\n * task interface.\r\n * \r\n * @export\r\n * @interface ITask\r\n */\r\nexport interface ITask {\r\n    /**\r\n     * decorator of task.\r\n     * \r\n     * @type {ITaskInfo}\r\n     * @memberOf ITask\r\n     */\r\n    decorator: ITaskInfo\r\n    /**\r\n     * setup task.\r\n     * \r\n     * @param {ITaskConfig} config\r\n     * @param {Gulp} [gulp]\r\n     * @returns {TaskResult}\r\n     * \r\n     * @memberOf ITask\r\n     */\r\n    setup(config: ITaskConfig, gulp?: Gulp): TaskResult;\r\n}\r\n\r\n\r\n/**\r\n * pipe works.\r\n * \r\n * @export\r\n * @interface IPipeOption\r\n */\r\nexport interface IPipeOption {\r\n    /**\r\n     * custom stream pipe.\r\n     * \r\n     * @param {ITransform} gulpsrc\r\n     * @param {ITaskConfig} config\r\n     * @param {IAssertDist} [dist]\r\n     * @param {TaskCallback} [callback]\r\n     * @returns {(ITransform | Promise<ITransform> | void)}\r\n     * \r\n     * @memberOf IPipeOption\r\n     */\r\n    pipe?(gulpsrc: ITransform, config: ITaskConfig, dist?: IAssertDist, callback?: TaskCallback): ITransform | Promise<ITransform> | void;\r\n\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * \r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    pipes?: Pipe[] | ((config?: ITaskConfig, dist?: IAssertDist, gulp?: Gulp) => Pipe[]);\r\n\r\n    /**\r\n     * output pipe task\r\n     *\r\n     * \r\n     * @memberOf IPipeOption\r\n     */\r\n    output?: IOutputPipe[] | ((config?: ITaskConfig, dist?: IAssertDist, gulp?: Gulp) => IOutputPipe[]);\r\n}\r\n\r\n\r\n/**\r\n * dynamic gulp task.\r\n * \r\n * @export\r\n * @interface IDynamicTaskOption\r\n * @extends {IAssertDist}\r\n */\r\nexport interface IDynamicTaskOption extends IAssertDist, IPipeOption, ITaskInfo {\r\n    /**\r\n     * task name\r\n     * \r\n     * @type {TaskName}\r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    name: TaskString;\r\n\r\n    /**\r\n     * watch tasks\r\n     * \r\n     * \r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    watchTasks?: Array<string | WatchCallback> | ((config?: ITaskConfig, dt?: IDynamicTaskOption) => Array<string | WatchCallback>);\r\n    /**\r\n     * watch changed.\r\n     * \r\n     * @param {WatchEvent} event\r\n     * @param {ITaskConfig} config\r\n     * \r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    watchChanged?(event: WatchEvent, config: ITaskConfig);\r\n\r\n    /**\r\n     * custom task.\r\n     * \r\n     * @param {ITaskConfig} config\r\n     * @param {IDynamicTaskOption} [dt]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(void | ITransform | Promise<any>)}\r\n     * \r\n     * @memberOf IDynamicTaskOption\r\n     */\r\n    task?(config: ITaskConfig, dt?: IDynamicTaskOption, gulp?: Gulp): void | ITransform | Promise<any>;\r\n\r\n}\r\n\r\n/**\r\n * dynamic tasks\r\n * \r\n * @export\r\n * @interface ITasks\r\n */\r\nexport interface IDynamicTasks {\r\n    tasks(): IDynamicTaskOption[];\r\n}\r\n\r\n/**\r\n * task loader option.\r\n * \r\n * @export\r\n * @interface ILoaderOption\r\n * @extends {IPipeOption}\r\n */\r\nexport interface ILoaderOption extends IPipeOption {\r\n    /**\r\n     * loader type, default module.\r\n     * \r\n     * @type {string}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    type?: string;\r\n    /**\r\n     * module name or url\r\n     * \r\n     * @type {string | Object}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    module?: string | Object;\r\n\r\n    /**\r\n     * config module name or url.\r\n     * \r\n     * @type {string | Object}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    configModule?: string | Object;\r\n\r\n    /**\r\n     * config module name or url.\r\n     * \r\n     * @type {string | Object}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    taskModule?: string | Object;\r\n\r\n    /**\r\n     * task define.\r\n     * \r\n     * @type {ITaskDefine}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    taskDefine?: ITaskDefine;\r\n\r\n}\r\n\r\n/**\r\n * loader to load tasks from directory.\r\n * \r\n * @export\r\n * @interface DirLoaderOption\r\n * @extends {ILoaderOption}\r\n */\r\nexport interface IDirLoaderOption extends ILoaderOption {\r\n    /**\r\n     * loader dir\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    dir?: TaskSource\r\n    /**\r\n     * config in directory. \r\n     * \r\n     * @type {string}\r\n     * @memberOf DirLoaderOption\r\n     */\r\n    dirConfigFile?: string;\r\n}\r\n\r\n/**\r\n * the option for loader dynamic build task.\r\n * \r\n * @export\r\n * @interface IDynamicLoaderOption\r\n * @extends {ILoaderOption}\r\n */\r\nexport interface IDynamicLoaderOption extends ILoaderOption {\r\n    /**\r\n     * dynamic task\r\n     * \r\n     * @type {(IDynamicTaskOption | IDynamicTaskOption[])}\r\n     * @memberOf IDynamicLoaderOption\r\n     */\r\n    dynamicTasks?: IDynamicTaskOption | IDynamicTaskOption[];\r\n}\r\n\r\n\r\nexport type customLoader = (config: ITaskConfig) => ITask[] | Promise<ITask[]>;\r\n\r\n/**\r\n * task loader option.\r\n * \r\n * @export\r\n * @interface TaskLoaderOption\r\n */\r\nexport interface ITaskLoaderOption {\r\n    /**\r\n     * task loader\r\n     * \r\n     * @type {(string | customLoader | ILoaderOption | IDynamicTaskOption | IDynamicTaskOption[])}\r\n     * @memberOf ITaskLoaderOption\r\n     */\r\n    loader?: string | customLoader | ILoaderOption | IDynamicTaskOption | IDynamicTaskOption[];\r\n\r\n    // /**\r\n    //  * custom set run tasks sequence.\r\n    //  * \r\n    //  * @param {Src[]} tasks\r\n    //  * @param {ITaskInfo} [assertsTask]\r\n    //  * @param {ITaskInfo} [subGroupTask]\r\n    //  * @returns {Src[]}\r\n    //  * \r\n    //  * @memberOf ITaskLoaderOption\r\n    //  */\r\n    // runTasks?(tasks: Src[], assertsTask?: ITaskInfo, subGroupTask?: ITaskInfo): Src[];\r\n\r\n}\r\n\r\n\r\nexport interface ISubTaskOption {\r\n    /**\r\n     * sub tasks.\r\n     * \r\n     * @type {(ITaskOption | ITaskOption[])}\r\n     * @memberOf ISubTaskOption\r\n     */\r\n    tasks?: ITaskOption | ITaskOption[];\r\n\r\n    /**\r\n     * set sub task order in this task sequence.\r\n     * \r\n     * @type {number}\r\n     * @memberOf ISubTaskOption\r\n     */\r\n    subTaskOrder?: number;\r\n\r\n}\r\n\r\n\r\n/**\r\n * IAsserts to be dealt with.\r\n * \r\n * @export\r\n * @interface IAsserts\r\n * @extends {IAssertDist}\r\n */\r\nexport interface IAsserts extends IAssertDist, ITaskLoaderOption {\r\n\r\n    /**\r\n     * tasks to deal with IAsserts.\r\n     * \r\n     * @type {IMap<Src | IAsserts, IDynamicTaskOption[]>}\r\n     * @memberOf IAsserts\r\n     */\r\n    asserts?: IMap<Src | IAsserts | IDynamicTaskOption[]>;\r\n\r\n    /**\r\n     * set IAsserts task order in this task sequence.\r\n     * \r\n     * @type {number}\r\n     * @memberOf IAsserts\r\n     */\r\n    assertsOrder?: number;\r\n}\r\n\r\n\r\n/**\r\n * task option setting.\r\n * \r\n * @export\r\n * @interface ITaskOption\r\n * @extends {IAsserts}\r\n * @extends {ITaskLoaderOption}\r\n */\r\nexport interface ITaskOption extends IAsserts, ISubTaskOption {\r\n    /**\r\n     * task loader must setting.\r\n     * \r\n     * @type {(string | customLoader | ILoaderOption | IDynamicTaskOption | IDynamicTaskOption[])}\r\n     * @memberOf ITaskOption\r\n     */\r\n    loader: string | customLoader | ILoaderOption | IDynamicTaskOption | IDynamicTaskOption[];\r\n\r\n    /**\r\n     * the src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf ITaskOption\r\n     */\r\n    src: TaskSource;\r\n}\r\n\r\n/**\r\n * custom modules task load define\r\n * \r\n * @export\r\n * @interface ITaskDefine\r\n */\r\nexport interface ITaskDefine {\r\n    /**\r\n     * load config in modules\r\n     * \r\n     * @param {ITaskOption} option\r\n     * @returns {ITaskConfig}\r\n     * \r\n     * @memberOf ITaskDefine\r\n     */\r\n    loadConfig(option: ITaskOption, env: IEnvOption): ITaskConfig\r\n\r\n    /**\r\n     * load task in modules.\r\n     * \r\n     * @param {ITaskConfig} config\r\n     * @param {tasksInModule} findInModule\r\n     * @param {tasksInDir} findInDir\r\n     * @returns {Task[]}\r\n     * \r\n     * @memberOf ITaskDefine\r\n     */\r\n    loadTasks?(config: ITaskConfig): Promise<ITask[]>;\r\n}\r\n\r\n/**\r\n * run time task config for setup task.\r\n * \r\n * @export\r\n * @interface ITaskConfig\r\n */\r\nexport interface ITaskConfig {\r\n    /**\r\n     * custom global data cache.\r\n     */\r\n    globals?: any;\r\n    /**\r\n     * env\r\n     * \r\n     * @type {EnvOption}\r\n     * @memberOf ITaskConfig\r\n     */\r\n    env: IEnvOption;\r\n    /**\r\n     * run operation\r\n     * \r\n     * @type {Operation}\r\n     * @memberOf ITaskConfig\r\n     */\r\n    oper?: Operation;\r\n    /**\r\n     * task option setting.\r\n     * \r\n     * @type {IAsserts}\r\n     * @memberOf ITaskConfig\r\n     */\r\n    option: IAsserts | ITaskOption;\r\n\r\n    /**\r\n     * custom task match filter\r\n     * \r\n     * @param {ITaskInfo} task\r\n     * @param {ITaskInfo} match\r\n     * @returns {boolean}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    match?(task: ITaskInfo, match: ITaskInfo): boolean;\r\n\r\n    /**\r\n     * get Src of current state.   default implement in bindingConfig.\r\n     * \r\n     * @param {IAssertDist} [assert]\r\n     * @param {ITaskInfo} [taskinfo]\r\n     * @returns {Src}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    getSrc?(assert?: IAssertDist, taskinfo?: ITaskInfo): Src;\r\n\r\n    /**\r\n     * get dist of current state.  default implement in bindingConfig.\r\n     * \r\n     * @param {IAssertDist} dist\r\n     * @returns {string}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    getDist?(dist?: IAssertDist): string;\r\n\r\n    /**\r\n     * custom config run tasks sequence in.\r\n     * \r\n     * @param {Src[]} [tasks]\r\n     * @param {ITaskInfo} [assertTasks]\r\n     * @param {ITaskInfo} [subGroupTask]\r\n     * @returns {Src[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    runTasks?(tasks?: Src[], assertTasks?: ITaskInfo, subGroupTask?: ITaskInfo, ): Src[];\r\n    /**\r\n     * custom print help.\r\n     * \r\n     * @param {string} lang\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    printHelp?(lang: string): void;\r\n\r\n    /**\r\n     * find  task in module. default implement in bindingConfig.\r\n     * \r\n     * @param {(string | Object)} module\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {Promise<ITask[]>}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    findTasks?(module: string | Object, match?: ITaskInfo): Promise<ITask[]>;\r\n\r\n    /**\r\n     * find  task in directories. default implement in bindingConfig.\r\n     * \r\n     * @param {Src} dirs\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {Promise<ITask[]>}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    findTasksInDir?(dirs: Src, match?: ITaskInfo): Promise<ITask[]>;\r\n\r\n    /**\r\n     * find taskdefine in module. default implement in bindingConfig.\r\n     * \r\n     * @param {(string | Object)} module\r\n     * @returns {Promise<ITaskDefine>}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    findTaskDefine?(module: string | Object): Promise<ITaskDefine>;\r\n    /**\r\n     * find taskdefine in directories.  default implement in bindingConfig.\r\n     * \r\n     * @param {Src} dirs\r\n     * @returns {Promise<ITaskDefine>}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    findTaskDefineInDir?(dirs: Src): Promise<ITaskDefine>\r\n\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     * \r\n     * @param {string} directory\r\n     * @param {((fileName: string) => boolean)} [express]\r\n     * @returns {string[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    fileFilter?(directory: string, express?: ((fileName: string) => boolean)): string[];\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     * \r\n     * @param {Gulp} gulp\r\n     * @param {Src[]} tasks\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    runSequence?(gulp: Gulp, tasks: Src[]): Promise<any>;\r\n\r\n    /**\r\n     * dynamic generate tasks.  default implement in bindingConfig.\r\n     * \r\n     * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {ITask[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    generateTask?(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[];\r\n\r\n    /**\r\n     * add task result to task sequence. default implement in bindingConfig.\r\n     * \r\n     * @param {Src[]} sequence  task sequence.\r\n     * @param {ITaskInfo} task\r\n     * @returns {Src[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    addToSequence?(sequence: Src[], task: ITaskInfo): Src[];\r\n    /**\r\n     * generate sub task name. default implement in bindingConfig.\r\n     * \r\n     * @param {IAsserts | string} assert\r\n     * @param {string} [defaultName]\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    subTaskName?(assert: string | IAsserts, defaultName?: string);\r\n}\r\n\r\n/**\r\n * event option\r\n * \r\n * @export\r\n * @interface IEnvOption\r\n */\r\nexport interface IEnvOption {\r\n    /**\r\n     * project root.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IEnvOption\r\n     */\r\n    root?: string;\r\n    /**\r\n     * help doc\r\n     * \r\n     * @type {(boolean | string)}\r\n     * @memberOf IEnvOption\r\n     */\r\n    help?: boolean | string;\r\n    test?: boolean | string;\r\n    serve?: boolean | string;\r\n    e2e?: boolean | string;\r\n    release?: boolean;\r\n    deploy?: boolean;\r\n    watch?: boolean | string;\r\n    /**\r\n     * run spruce task.\r\n     */\r\n    task?: string;\r\n\r\n    /**\r\n     * project config setting.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IEnvOption\r\n     */\r\n    config?: string;\r\n\r\n    // key?: number;\r\n    // value?: number;\r\n    // csv?: string;\r\n    // dist?: string;\r\n    // lang?: string;\r\n\r\n    publish?: boolean | string;\r\n\r\n    /**\r\n     * task group.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf IEnvOption\r\n     */\r\n    group?: Src;\r\n\r\n    /**\r\n     * group bundle.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf IEnvOption\r\n     */\r\n    gb?: Src;\r\n}\r\n"]}