{"version":3,"sources":["TaskConfig.ts"],"names":["RunWay","exports","NodeSequence","Mode","Operation"],"mappings":"mEASA,IAAYA,SAAZ,SAAYA,GAIRA,EAAAA,EAAA,SAAA,GAAA,WAIAA,EAAAA,EAAA,SAAA,GAAA,YARQA,OAAAC,QAAAD,SAAAC,QAAAD,WAiBZ,IAAYE,eAAZ,SAAYA,GAIRA,EAAAA,EAAA,OAAA,GAAA,SAIAA,EAAAA,EAAA,MAAA,GAAA,SARQA,aAAAD,QAAAC,eAAAD,QAAAC,iBAYZ,IAAYC,OAAZ,SAAYA,GACRA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,SAAA,GAAA,YAHQA,KAAAF,QAAAE,OAAAF,QAAAE,SAYZ,IAAYC,YAAZ,SAAYA,GAIRA,EAAAA,EAAA,MAAA,GAAA,QAIAA,EAAAA,EAAA,KAAA,GAAA,OAIAA,EAAAA,EAAA,IAAA,GAAA,MAIAA,EAAAA,EAAA,QAAA,GAAA,UAIAA,EAAAA,EAAA,OAAA,IAAA,SAIAA,EAAAA,EAAA,MAAA,IAAA,QAIAA,EAAAA,EAAA,MAAA,IAAA,QAKAA,EAAAA,EAAA,MAAA,KAAA,QAKAA,EAAAA,EAAA,UAAA,KAAA,YAKAA,EAAAA,EAAA,QAAA,IAAA,UAKAA,EAAAA,EAAA,aAAA,KAAA,gBAhDQA,UAAAH,QAAAG,YAAAH,QAAAG","file":"../TaskConfig.js","sourcesContent":["import { Gulp, WatchEvent, WatchCallback, TaskCallback } from 'gulp';\r\n\r\n\r\n/**\r\n * mutil source stream pipe task run way, task runway, or same level context run way.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum RunWay {\r\n    /**\r\n     * run mutil source stream by sequence.\r\n     */\r\n    sequence = 1,\r\n    /**\r\n     * run mutil source stream by parallel.\r\n     */\r\n    parallel = 2\r\n}\r\n\r\n/**\r\n * current context run sequence with children context node.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum NodeSequence {\r\n    /**\r\n     * current context node run tasks before childe node run.\r\n     */\r\n    before = 1,\r\n    /**\r\n     * current context node run tasks after childe node run.\r\n     */\r\n    after = 2\r\n}\r\n\r\n\r\nexport enum Mode {\r\n    route = 1,\r\n    children,\r\n    traverse\r\n}\r\n\r\n/**\r\n * project development build operation.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum Operation {\r\n    /**\r\n     * build compile project.\r\n     */\r\n    build = 1 << 0,\r\n    /**\r\n     * test project.\r\n     */\r\n    test = 1 << 1,\r\n    /**\r\n     * e2e test project.\r\n     */\r\n    e2e = 1 << 2,\r\n    /**\r\n     * release project.\r\n     */\r\n    release = 1 << 3,\r\n    /**\r\n     * release and deploy project.\r\n     */\r\n    deploy = 1 << 4,\r\n    /**\r\n     * clean task\r\n     */\r\n    clean = 1 << 5,\r\n    /**\r\n     * serve task\r\n     */\r\n    serve = 1 << 6,\r\n\r\n    /**\r\n     * watch task.\r\n     */\r\n    watch = 1 << 7,\r\n\r\n    /**\r\n     * auto create watch\r\n     */\r\n    autoWatch = 1 << 8,\r\n\r\n    /**\r\n     * default operation.\r\n     */\r\n    default = Operation.build | Operation.release | Operation.deploy,\r\n\r\n    /**\r\n     * define watch Operation (Operation.build | Operation.test | Operation.e2e | Operation.watch)\r\n     */\r\n    defaultWatch = Operation.build | Operation.test | Operation.e2e | Operation.watch\r\n}\r\n\r\n/**\r\n * object map.\r\n *\r\n * @export\r\n * @interface IMap\r\n * @template T\r\n */\r\nexport interface IMap<T> {\r\n    [K: string]: T;\r\n}\r\n\r\nexport interface IOrder {\r\n    /**\r\n     * the value to sort sequence.\r\n     *\r\n     * @type {number}\r\n     * @memberof IOrder\r\n     */\r\n    value?: number;\r\n    /**\r\n     * before the task to run.\r\n     *\r\n     * @type {string}\r\n     * @memberof IOrder\r\n     */\r\n    before?: string;\r\n    /**\r\n     * afater the task to run.\r\n     *\r\n     * @type {string}\r\n     * @memberof IOrder\r\n     */\r\n    after?: string;\r\n    /**\r\n     * run Way type.\r\n     *\r\n     * @type {RunWay}\r\n     * @memberof IOrder\r\n     */\r\n    runWay?: RunWay;\r\n}\r\n\r\n/**\r\n * zip task name.\r\n */\r\nexport type ZipTaskName = (name: string, runWay?: RunWay, ctx?: ITaskContext) => string\r\n\r\n/**\r\n * Order type.\r\n */\r\nexport type Order = number | IOrder | ((total: number, ctx?: ITaskContext) => number | IOrder);\r\n\r\n/**\r\n * src\r\n */\r\nexport type Src = string | string[];\r\n\r\n/**\r\n * async source.\r\n */\r\nexport type AsyncSrc = Src | Promise<Src>;\r\n\r\n/**\r\n * operate.\r\n *\r\n * @export\r\n * @interface IOperate\r\n */\r\nexport interface IOperate {\r\n    /**\r\n     * operate name\r\n     *\r\n     * @type {TaskString}\r\n     * @memberof IOperate\r\n     */\r\n    name?: TaskString;\r\n    /**\r\n     * operation\r\n     *\r\n     * enmu flags.\r\n     * @type {Operation}\r\n     * @memberof IOperate\r\n     */\r\n    oper?: Operation;\r\n    /**\r\n     * order index.\r\n     *\r\n     * @type {Order}\r\n     * @memberof IOperate\r\n     */\r\n    order?: Order;\r\n\r\n    /**\r\n     * none pipe addation.\r\n     *\r\n     * @type {boolean}\r\n     * @memberof IOperate\r\n     */\r\n    nonePipe?: boolean;\r\n\r\n    /**\r\n     * none output.\r\n     *\r\n     * @type {boolean}\r\n     * @memberof IOperate\r\n     */\r\n    noneOutput?: boolean;\r\n}\r\n\r\n/**\r\n * task decorator info.\r\n *\r\n * @export\r\n * @interface ITaskDecorator\r\n * @extends {IOperate}\r\n */\r\nexport interface ITaskDecorator extends IOperate {\r\n    /**\r\n     * assert tasks. assert group name or extends name.\r\n     *\r\n     * @type {Src}\r\n     * @memberof ITaskInfo\r\n     */\r\n    group?: Src;\r\n\r\n    /**\r\n     * custom jduge info match to another.\r\n     *\r\n     * @param {ITaskDecorator} another\r\n     *\r\n     * @memberof ITaskInfo\r\n     */\r\n    match?(another: ITaskDecorator);\r\n}\r\n\r\n/**\r\n * task decorator data.\r\n *\r\n * @export\r\n * @interface ITaskInfo\r\n * @extends {ITaskDecorator}\r\n */\r\nexport interface ITaskInfo extends ITaskDecorator {\r\n    /**\r\n     * finally task name.\r\n     *\r\n     * @type {Src}\r\n     * @memberof ITaskInfo\r\n     */\r\n    taskName?: Src;\r\n\r\n    /**\r\n     * assert dist info.\r\n     *\r\n     * @type {IAssertDist}\r\n     * @memberof ITaskInfo\r\n     */\r\n    assert?: IAssertDist\r\n}\r\n\r\n/**\r\n * task interface.\r\n *\r\n * @export\r\n * @interface ITask\r\n */\r\nexport interface ITask {\r\n    /**\r\n     * old filed.\r\n     *\r\n     * @type {ITaskInfo}\r\n     * @memberof ITask\r\n     */\r\n    getInfo(): ITaskInfo;\r\n\r\n    /**\r\n     * set task info.\r\n     *\r\n     * @param {ITaskInfo} info\r\n     *\r\n     * @memberof ITask\r\n     */\r\n    setInfo?(info: ITaskInfo);\r\n    /**\r\n     * setup task.\r\n     *\r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} [gulp]\r\n     * @returns {TaskResult}\r\n     *\r\n     * @memberof ITask\r\n     */\r\n    setup(context: ITaskContext, gulp?: Gulp): TaskResult;\r\n}\r\n\r\n\r\nexport type TaskResult = Src | void;\r\n\r\n/**\r\n * task source\r\n */\r\nexport type TaskSource = Src | ((ctx?: ITaskContext) => Src);\r\n\r\n/**\r\n * task string\r\n */\r\nexport type TaskString = string | ((ctx?: ITaskContext) => string);\r\n\r\n/**\r\n * async task source.\r\n */\r\nexport type AsyncTaskSource = TaskSource | ((ctx?: ITaskContext) => Promise<Src>);\r\n\r\n/**\r\n * transform interface.\r\n *\r\n * @export\r\n * @interface ITransform\r\n * @extends {NodeJS.ReadWriteStream}\r\n */\r\nexport interface ITransform extends IOperate, NodeJS.ReadWriteStream {\r\n    /**\r\n     * custom set ITransform after pipe out.\r\n     *\r\n     * @param {ITransform} ouputStream\r\n     * @returns {ITransform}\r\n     *\r\n     * @memberof ITransform\r\n     */\r\n    transformPipe?(ouputStream: ITransform): ITransform;\r\n\r\n    /**\r\n     * custom transform from source stream pipe in.\r\n     *\r\n     * @param {ITransform} sourceStream\r\n     * @returns {ITransform}\r\n     *\r\n     * @memberof ITransform\r\n     */\r\n    transformSourcePipe?(sourceStream: ITransform): ITransform;\r\n\r\n    // /**\r\n    //  * transform pipe\r\n    //  *\r\n    //  * @param {NodeJS.ReadWriteStream} stream\r\n    //  * @returns {ITransform}\r\n    //  *\r\n    //  * @memberof ITransform\r\n    //  */\r\n    // pipe(stream: NodeJS.ReadWriteStream): ITransform;\r\n}\r\n\r\n/**\r\n * transform source.\r\n */\r\nexport type TransformSource = ITransform | ITransform[];\r\n/**\r\n * output transform.\r\n *\r\n * @export\r\n * @interface IOutput\r\n * @extends {ITransform}\r\n */\r\nexport interface IOutput extends ITransform {\r\n    // dts?: ITransform;\r\n    // js?: ITransform\r\n}\r\n\r\n\r\n/**\r\n * pipe work\r\n *\r\n * @export\r\n * @interface IPipe\r\n */\r\nexport interface IPipe extends IOperate {\r\n    /**\r\n     * transform to pipe work\r\n     *\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} [dist]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(ITransform | Promise<ITransform>)}\r\n     *\r\n     * @memberof IPipe\r\n     */\r\n    toTransform?(context: ITaskContext, dist?: IAssertDist, gulp?: Gulp): ITransform | Promise<ITransform>;\r\n}\r\n\r\nexport type Pipe = IPipe | ((ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => ITransform | Promise<ITransform>);\r\n\r\n\r\n\r\n/**\r\n * output pipe\r\n *\r\n * @export\r\n * @interface IOutputPipe\r\n */\r\nexport interface IOutputPipe extends IOperate {\r\n    /**\r\n     * output pipes\r\n     *\r\n     * @param {ITransform} stream\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} [dist]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(ITransform | Promise<ITransform>)}\r\n     *\r\n     * @memberof IOutputPipe\r\n     */\r\n    toTransform?(stream: ITransform, context: ITaskContext, dist?: IAssertDist, gulp?: Gulp): ITransform | Promise<ITransform>;\r\n}\r\n\r\nexport type OutputPipe = IOutputPipe | ((stream: ITransform, ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => ITransform | Promise<ITransform>);\r\n\r\n\r\n/**\r\n * assert dist.\r\n *\r\n * @export\r\n * @interface IAssertDist\r\n * @extends {IOperate}\r\n */\r\nexport interface IAssertDist {\r\n    /**\r\n     * assert name\r\n     *\r\n     * @type {TaskString}\r\n     * @memberof IOperate\r\n     */\r\n    name?: TaskString;\r\n\r\n    /**\r\n     * the src file filter string. default 'src'.\r\n     *\r\n     * @type {TaskSource}\r\n     * @memberof IAssertDist\r\n     */\r\n    src?: TaskSource;\r\n\r\n    /**\r\n     * the e2e src file filter string. default 'src'.\r\n     *\r\n     * @type {TaskSource}\r\n     * @memberof IAssertDist\r\n     */\r\n    e2eSrc?: TaskSource;\r\n\r\n    /**\r\n     * the test src file filter string. default 'src'.\r\n     *\r\n     * @type {TaskSource}\r\n     * @memberof IAssertDist\r\n     */\r\n    testSrc?: TaskSource\r\n\r\n    /**\r\n     * clean special source in 'dist'. if not setting, default clean 'dist' folder.\r\n     *\r\n     * @type {TaskSource}\r\n     * @memberof IAssertDist\r\n     */\r\n    cleanSrc?: TaskSource;\r\n\r\n    /**\r\n     * auto create task to watch this source.\r\n     *\r\n     * @type {(boolean | Array<string | WatchCallback>)}\r\n     * @memberof IAssertDist\r\n     */\r\n    watch?: boolean | Array<string | WatchCallback>;\r\n\r\n    /**\r\n     * the watch src file filter string. default 'src'.\r\n     *\r\n     * @type {TaskSource}\r\n     * @memberof IAssertDist\r\n     */\r\n    watchSrc?: TaskSource;\r\n    /**\r\n     * default output folder. if empty use parent setting, or ues 'dist'.\r\n     */\r\n    dist?: TaskString;\r\n    /**\r\n     * build output folder. if empty use parent setting, or ues 'dist'.\r\n     *\r\n     * @type {string}\r\n     * @memberof Dist\r\n     */\r\n    buildDist?: TaskString;\r\n    /**\r\n     * test output folder. if empty use parent setting, or ues 'dist'.\r\n     *\r\n     * @type {string}\r\n     * @memberof Dist\r\n     */\r\n    testDist?: TaskString;\r\n    /**\r\n     * e2e output folder. if empty use parent setting, or ues 'dist'.\r\n     *\r\n     * @type {string}\r\n     * @memberof Dist\r\n     */\r\n    e2eDist?: TaskString;\r\n    /**\r\n     * release output folder. if empty use parent setting, or ues 'dist'.\r\n     *\r\n     * @type {string}\r\n     * @memberof Dist\r\n     */\r\n    releaseDist?: TaskString;\r\n    /**\r\n     * deploy output folder. if empty use parent setting, or ues 'dist'.\r\n     *\r\n     * @type {string}\r\n     * @memberof Dist\r\n     */\r\n    deployDist?: TaskString;\r\n}\r\n\r\n\r\n/**\r\n * custom pipe.\r\n *\r\n * @export\r\n * @interface ICustomPipe\r\n */\r\nexport interface ICustomPipe {\r\n    /**\r\n     * custom stream pipe.\r\n     *\r\n     * @param {ITransform} gulpsrc\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} [dist]\r\n     * @param {Gulp} [gulp]\r\n     * @param {TaskCallback} [callback]\r\n     * @returns {(ITransform | Promise<ITransform> | void)}\r\n     *\r\n     * @memberof ICustomPipe\r\n    * */\r\n    pipe?(gulpsrc: ITransform, context: ITaskContext, dist?: IAssertDist, gulp?: Gulp, callback?: TaskCallback): ITransform | Promise<ITransform> | void;\r\n\r\n}\r\n\r\n/**\r\n * pipe works.\r\n *\r\n * @export\r\n * @interface IPipeOption\r\n * @extends {ICustomPipe}\r\n */\r\nexport interface IPipeOption extends ICustomPipe {\r\n    /**\r\n     * task source stream config.\r\n     *\r\n     * @memberof IPipeOption\r\n     */\r\n    source?: TransformSource | ((ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => TransformSource)\r\n    /**\r\n     * task pipe works.\r\n     *\r\n     * @memberof IDynamicTaskOption\r\n     */\r\n    pipes?: Pipe[] | ((ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => Pipe[]);\r\n\r\n    /**\r\n     * output pipe task\r\n     *\r\n     * @memberof IPipeOption\r\n     */\r\n    output?: IOutputPipe[] | ((ctx?: ITaskContext, dist?: IAssertDist, gulp?: Gulp) => IOutputPipe[]);\r\n}\r\n\r\n\r\n\r\n/**\r\n * dynamic gulp task.\r\n *\r\n * @export\r\n * @interface IDynamicTaskOption\r\n * @extends {IAssertDist}\r\n */\r\nexport interface IDynamicTaskOption extends IAssertDist, IPipeOption, ICustomPipe, ITaskInfo, IOperate {\r\n    /**\r\n     * IAsserts extends name. for register dynamic task.\r\n     *\r\n     * @type {TaskName}\r\n     * @memberof IAsserts\r\n     */\r\n    name: TaskString;\r\n    /**\r\n     * watch tasks\r\n     *\r\n     * @memberof IDynamicTaskOption\r\n     */\r\n    watchTasks?: Array<string | WatchCallback> | ((ctx?: ITaskContext, dt?: IDynamicTaskOption) => Array<string | WatchCallback>);\r\n    /**\r\n     * watch changed.\r\n     *\r\n     * @param {WatchEvent} event\r\n     * @param {ITaskContext} context\r\n     *\r\n     * @memberof IDynamicTaskOption\r\n     */\r\n    watchChanged?(event: WatchEvent, context: ITaskContext);\r\n\r\n    /**\r\n     * custom task.\r\n     *\r\n     * @param {ITaskContext} context\r\n     * @param {IDynamicTaskOption} [dt]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(void | ITransform | Promise<any>)}\r\n     *\r\n     * @memberof IDynamicTaskOption\r\n     */\r\n    task?(context: ITaskContext, dt?: IDynamicTaskOption, gulp?: Gulp): void | ITransform | Promise<any>;\r\n\r\n    /**\r\n     *  shell command task.\r\n     *\r\n     * @type {AsyncTaskSource}\r\n     * @memberof IDynamicTaskOption\r\n     */\r\n    shell?: AsyncTaskSource\r\n}\r\n\r\n/**\r\n * dynamic tasks\r\n *\r\n * @export\r\n * @interface ITasks\r\n */\r\nexport interface IDynamicTasks {\r\n    tasks(): IDynamicTaskOption[];\r\n}\r\n\r\n\r\n/**\r\n * IAsserts to be dealt with.\r\n *\r\n * @export\r\n * @interface IAsserts\r\n * @extends {IAssertDist}\r\n */\r\nexport interface IAsserts extends IAssertDist, IPipeOption, ICustomPipe {\r\n\r\n    /**\r\n     * asser operation.\r\n     *\r\n     * @type {Operation}@memberof IAsserts\r\n     */\r\n    oper?: Operation;\r\n\r\n    /**\r\n     * current assert order.\r\n     */\r\n    order?: Order;\r\n\r\n    /**\r\n     * curr node run sequence with children context. default before children run.\r\n     *\r\n     * @type {NodeSequence}@memberof IAsserts\r\n     */\r\n    nodeSequence?: NodeSequence;\r\n\r\n    /**\r\n     * the shell command run way. default parallel.\r\n     *\r\n     * @type {RunWay}\r\n     * @memberof IAsserts\r\n     */\r\n    shellRunWay?: RunWay;\r\n\r\n    /**\r\n     * task runway  in this context.\r\n     *\r\n     * @type {RunWay}@memberof IAsserts\r\n     */\r\n    runWay?: RunWay;\r\n    /**\r\n     * custom control how to match tasks.\r\n     *\r\n     * @param {ITaskInfo} task\r\n     * @param {ITaskInfo} match\r\n     * @returns {boolean}\r\n     *\r\n     * @memberof IAsserts\r\n     */\r\n    match?(task: ITaskInfo, match: ITaskInfo): boolean;\r\n}\r\n\r\nexport type folderCallback = (folder: string, folderName?: string, ctx?: ITaskContext) => string;\r\n\r\n/**\r\n * custom modules task load define.\r\n *\r\n * @export\r\n * @interface ITaskDefine\r\n */\r\nexport interface ITaskDefine {\r\n    /**\r\n     * load config in modules\r\n     *\r\n     * @param {IAssertOption} option\r\n     * @returns {ITaskContext}\r\n     *\r\n     * @memberof ITaskDefine\r\n     */\r\n    loadConfig?(option: IAssertOption, env: IEnvOption): ITaskConfig\r\n\r\n    /**\r\n     * load task in modules.\r\n     *\r\n     * @param {ITaskContext} context\r\n     * @param {tasksInModule} findInModule\r\n     * @param {tasksInDir} findInDir\r\n     * @returns {Task[]}\r\n     *\r\n     * @memberof ITaskDefine\r\n     */\r\n    loadTasks?(context: ITaskContext): Promise<ITask[]>;\r\n\r\n\r\n    /**\r\n     * get tasks in module.\r\n     *\r\n     * @param {ITaskContext} context\r\n     * @returns {Promise<ITask[]>}\r\n     *\r\n     * @memberof IContextDefine\r\n     */\r\n    tasks?(context: ITaskContext): Promise<ITask[]>;\r\n}\r\n\r\n/**\r\n * task context define.\r\n *\r\n * @export\r\n * @interface IContextDefine\r\n */\r\nexport interface IContextDefine extends ITaskDefine {\r\n    /**\r\n     * get context of tasks module.\r\n     *\r\n     * @param {ITaskConfig} config\r\n     * @returns {ITaskContext}\r\n     *\r\n     * @memberof IContextDefine\r\n     */\r\n    getContext?(config: ITaskConfig): ITaskContext;\r\n\r\n\r\n    /**\r\n     * set context.\r\n     *\r\n     * @param {ITaskContext} config;\r\n     * @memberof IContextDefine\r\n     */\r\n    setContext?(config: ITaskContext): void;\r\n\r\n}\r\n\r\n\r\n/**\r\n * assert option\r\n *\r\n * @export\r\n * @interface IAssertOption\r\n * @extends {IAsserts}\r\n */\r\nexport interface IAssertOption extends IAsserts {\r\n\r\n    /**\r\n     * asserts tasks run way. default RunWay.parallel\r\n     *\r\n     * @type {RunWay}\r\n     * @memberOf IAssertOption\r\n     */\r\n    assertsRunWay?: RunWay;\r\n\r\n    /**\r\n     * tasks to deal with IAsserts.\r\n     *\r\n     * @type {IMap<Operation | Src | IAsserts | IDynamicTaskOption[]>}\r\n     * @memberOf IAsserts\r\n     */\r\n    asserts?: IMap<Operation | Src | IAsserts | IDynamicTaskOption[]>;\r\n\r\n    /**\r\n     * set sub asserts task order in this task sequence.\r\n     *\r\n     * @type {Order}\r\n     * @memberOf IAsserts\r\n     */\r\n    assertsOrder?: Order;\r\n}\r\n/**\r\n * task config. runtime task config for setup task.\r\n *\r\n * @export\r\n * @interface ITaskConfig\r\n */\r\nexport interface ITaskConfig {\r\n    /**\r\n     * custom global data cache.\r\n     */\r\n    globals?: any;\r\n    /**\r\n     * env\r\n     *\r\n     * @type {EnvOption}\r\n     * @memberof ITaskConfig\r\n     */\r\n    env?: IEnvOption;\r\n\r\n    /**\r\n     * Operation\r\n     *\r\n     * @type {Operation}\r\n     * @memberof ITaskConfig\r\n     */\r\n    oper?: Operation;\r\n    /**\r\n     * task option setting.\r\n     *\r\n     * @type {IAsserts}\r\n     * @memberof ITaskConfig\r\n     */\r\n    option?: IAssertOption;\r\n\r\n    /**\r\n     * add task result to task sequence. default implement in bindingConfig.\r\n     *\r\n     * @param {Src[]} sequence  task sequence.\r\n     * @param {ITaskInfo} task\r\n     * @returns {Src[]}\r\n     *\r\n     * @memberof ITaskConfig\r\n     */\r\n    addToSequence?(sequence: Src[], task: ITaskInfo): Src[];\r\n\r\n    /**\r\n     * custom config run tasks sequence in.\r\n     *\r\n     * @param {Src[]} [tasks]\r\n     * @param {ITaskInfo} [assertTasks]\r\n     * @param {ITaskInfo} [subGroupTask]\r\n     * @returns {Src[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    runTasks?(tasks?: Src[], assertTasks?: ITaskInfo, subGroupTask?: ITaskInfo): Src[];\r\n\r\n    /**\r\n     * custom print help.\r\n     *\r\n     * @param {string} lang\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    printHelp?(lang: string): void;\r\n\r\n    /**\r\n     * package filename.\r\n     *\r\n     * @type {string}\r\n     * @memberof ITaskConfig\r\n     */\r\n    packageFile?: string;\r\n    /**\r\n     * custom context factory.\r\n     *\r\n     * @param {ITaskConfig} cfg\r\n     * @param {ITaskContext} [parent]\r\n     * @returns {ITaskContext}\r\n     *\r\n     * @memberof ITaskConfig\r\n     */\r\n    createContext?(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext;\r\n\r\n}\r\n\r\n/**\r\n * express.\r\n *\r\n * @export\r\n * @interface Express\r\n * @template T\r\n * @template TResult\r\n */\r\nexport interface Express<T, TResult> {\r\n    (item: T): TResult\r\n}\r\n\r\n\r\n/**\r\n * runtime task context.\r\n *\r\n * @export\r\n * @interface ITaskContext\r\n */\r\nexport interface ITaskContext {\r\n\r\n    /**\r\n     * env.\r\n     *\r\n     * @type {IEnvOption}@memberof ITaskContext\r\n     */\r\n    env: IEnvOption;\r\n\r\n    /**\r\n     * task option setting.\r\n     *\r\n     * @type {IAsserts}@memberof ITaskContext\r\n     */\r\n    option: IAsserts;\r\n\r\n    /**\r\n     * parent context.\r\n     *\r\n     * @type {ITaskContext}\r\n     * @memberof ITaskContext\r\n     */\r\n    parent?: ITaskContext;\r\n\r\n    /**\r\n     * run operation\r\n     *\r\n     * @type {Operation}\r\n     * @memberof ITaskContext\r\n     */\r\n    oper: Operation;\r\n\r\n    /**\r\n     * the gulp instance.\r\n     *\r\n     * @type {Gulp}\r\n     * @memberof ITaskContext\r\n     */\r\n    gulp: Gulp;\r\n\r\n    /**\r\n     * globals data.\r\n     *\r\n     * @type {*}@memberof ITaskContext\r\n     */\r\n    globals: any;\r\n\r\n\r\n    /**\r\n     * add sub ITaskContext\r\n     *\r\n     * @param {(ITaskContext | ITaskConfig)} context\r\n     * @memberof ITaskContext\r\n     */\r\n    add(context: ITaskContext | ITaskConfig): void;\r\n    /**\r\n     * remove sub ITaskContext.\r\n     *\r\n     * @param {ITaskContext} [context]\r\n     * @returns {ITaskContext[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    remove(context?: ITaskContext): ITaskContext[];\r\n\r\n    /**\r\n     * create new context;\r\n     *\r\n     * @param {ITaskConfig} cfg\r\n     * @param {ITaskContext} [parent] default current context.\r\n     * @returns {ITaskContext}\r\n     * @memberof ITaskContext\r\n     */\r\n    createContext(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext;\r\n    /**\r\n     * set task config.\r\n     *\r\n     * @param {ITaskConfig} config;\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    setConfig(config: ITaskConfig);\r\n\r\n    /**\r\n     * get the task config.\r\n     *\r\n     * @returns {ITaskConfig}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    getConfig(): ITaskConfig;\r\n\r\n\r\n    /**\r\n     * is task class.\r\n     *\r\n     * @param {*} obj\r\n     * @returns {boolean}\r\n     * @memberof ITaskContext\r\n     */\r\n    isTask(obj: any): boolean;\r\n\r\n    /**\r\n     * find sub context via express.\r\n     *\r\n     * @template T\r\n     * @param {(T | Express<T, boolean>)} express\r\n     * @param {Mode} [mode]\r\n     * @returns {T}\r\n     * @memberof ITaskContext\r\n     */\r\n    find<T extends ITaskContext>(express: T | Express<T, boolean>, mode?: Mode): T\r\n\r\n    /**\r\n     * filter<T extends ITaskContext>(express: Express<ITaskContext, void | boolean>, mode?: Mode): T[]\r\n     *\r\n     * @template T\r\n     * @param {(Express<T, void | boolean>)} express\r\n     * @param {Mode} [mode]\r\n     * @returns {T[]}\r\n     * @memberof ITaskContext\r\n     */\r\n    filter<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode): T[]\r\n\r\n    /**\r\n     * iteration context with express.\r\n     *\r\n     * @template T\r\n     * @param {(Express<T, void | boolean>)} express\r\n     * @param {Mode} [mode]\r\n     * @memberof ITaskContext\r\n     */\r\n    each<T extends ITaskContext>(express: Express<T, void | boolean>, mode?: Mode);\r\n\r\n    /**\r\n     * map context.\r\n     *\r\n     * @template T\r\n     * @param {Express<ITaskContext, T>} express\r\n     * @param {Mode} [mode]\r\n     * @param {Express<ITaskContext, boolean>} [filter]\r\n     * @returns {T[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    map<T>(express: Express<ITaskContext, T>, mode?: Mode, filter?: Express<ITaskContext, boolean>): T[]\r\n\r\n\r\n    /**\r\n     * do express work in routing.\r\n     *\r\n     * @param {(Express<ITaskContext, void | boolean>)} express\r\n     * @memberof ITaskContext\r\n     */\r\n    route(express: Express<ITaskContext, void | boolean>);\r\n\r\n\r\n    /**\r\n     * translate all sub context to do express work.\r\n     *\r\n     * @param {(Express<ITaskContext, void | boolean>)} express\r\n     * @memberof ITaskContext\r\n     */\r\n    trans(express: Express<ITaskContext, void | boolean>);\r\n\r\n    /**\r\n     * custom task match filter\r\n     *\r\n     * @param {ITaskInfo} task\r\n     * @param {ITaskInfo} match\r\n     * @returns {boolean}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean;\r\n\r\n    /**\r\n     * get Src of current state.   default implement in bindingConfig.\r\n     *\r\n     * @param {ITaskInfo} [task]\r\n     * @param {boolean} [relative] get relative path or absolute path.\r\n     * @returns {Src}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    getSrc(task?: ITaskInfo, relative?: boolean): Src;\r\n\r\n    /**\r\n     * get dist of current state.  default implement in bindingConfig.\r\n     *\r\n     * @param {ITaskInfo} [task]\r\n     * @param {boolean} [relative] get relative path or absolute path.\r\n     * @returns {string}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    getDist(task?: ITaskInfo, relative?: boolean): string;\r\n\r\n    /**\r\n     * generate sub task name. default implement in bindingConfig.\r\n     *\r\n     * @param {string | ITaskInfo} task\r\n     * @param {string} [ext] ext name.\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    subTaskName(task: string | ITaskInfo, ext?: string);\r\n\r\n    /**\r\n     * get run sequence, after setup.\r\n     *\r\n     * @returns {Src[]}\r\n     * @memberof ITaskContext\r\n     */\r\n    getRunSequence(): Src[];\r\n    /**\r\n     * load tasks.\r\n     *\r\n     * @returns {Promise<Src[]>}\r\n     *\r\n     * @memberof IContext\r\n     */\r\n    setup(): Promise<Src[]>;\r\n\r\n    /**\r\n     * setup tasks of current context.\r\n     *\r\n     * @returns {(Src[] | Promise<Src[]>)}\r\n     * @memberof ITaskContext\r\n     */\r\n    setupTasks(): Src[] | Promise<Src[]>;\r\n\r\n    /**\r\n     * add task for this context.\r\n     *\r\n     * @param {...ITask[]} task\r\n     * @memberof ITaskContext\r\n     */\r\n    addTask(...task: ITask[]): void;\r\n\r\n    /**\r\n     * remove task\r\n     *\r\n     * @param {ITask} task\r\n     * @returns {(ITask[] | Promise<ITask[]>)}\r\n     * @memberof ITaskContext\r\n     */\r\n    removeTask(task: ITask): ITask[] | Promise<ITask[]>;\r\n\r\n    /**\r\n     * run task in this context.\r\n     *\r\n     * @returns {Promise<any>}\r\n     *\r\n     * @memberof IContext\r\n     */\r\n    run(): Promise<any>;\r\n\r\n\r\n    /**\r\n     * help tipe.\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    help();\r\n\r\n    /**\r\n     * find  task in module. default implement in bindingConfig.\r\n     *\r\n     * @param {(string | Object)} module\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {Promise<ITask[]>}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]>;\r\n\r\n    /**\r\n     * find  task in directories. default implement in bindingConfig.\r\n     *\r\n     * @param {TaskSource} dirs\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {Promise<ITask[]>}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    findTasksInDir(dirs: TaskSource, match?: ITaskInfo): Promise<ITask[]>;\r\n\r\n    /**\r\n     * find taskdefine in module. default implement in bindingConfig.\r\n     *\r\n     * @param {(string | Object)} module\r\n     * @returns {Promise<ITaskDefine>}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine>;\r\n    /**\r\n     * find taskdefine in directories.  default implement in bindingConfig.\r\n     *\r\n     * @param {TaskSource} dirs\r\n     * @returns {Promise<ITaskDefine>}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    findTaskDefineInDir(dirs: TaskSource): Promise<ITaskDefine>\r\n\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     *\r\n     * @param {Src} express\r\n     * @param {(fileName: string) => boolean} [filter]\r\n     * @param {(filename: string) => string} [mapping]\r\n     * @returns {Promise<string[]>}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]>;\r\n\r\n    /**\r\n     * to task sequence.\r\n     *\r\n     * @param {ITask[]} tasks\r\n     * @param {ZipTaskName} [zipName]\r\n     * @returns {Src[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    toSequence(tasks: ITask[], zipName?: ZipTaskName): Src[];\r\n\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     *\r\n     * @param {Src[]} tasks\r\n     * @returns {Promise<any>}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    runSequence(tasks: Src[]): Promise<any>;\r\n\r\n    /**\r\n     * run task sequence.\r\n     *\r\n     * @param {(ITask[] | Promise<ITask[]>)} tasks\r\n     * @param {ZipTaskName} [zipName]\r\n     * @returns {Promise<any>}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    runTaskSequence(tasks: ITask[] | Promise<ITask[]>, zipName?: ZipTaskName): Promise<any>;\r\n\r\n    /**\r\n     * dynamic generate tasks.  default implement in bindingConfig.\r\n     *\r\n     * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n     * @param {ITaskInfo} [match]\r\n     * @returns {ITask[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[];\r\n\r\n    /**\r\n     * zip task sequence.\r\n     *\r\n     * @param {Src[]} tasks\r\n     * @param {ZipTaskName} [zipName]\r\n     * @returns {string}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    zipSequence(tasks: Src[], zipName?: ZipTaskName): string;\r\n\r\n    /**\r\n     * flattenSequence in this context.\r\n     *\r\n     * @param {Src[]} tasks\r\n     * @param {ZipTaskName} [zipName]\r\n     * @returns {string[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    flattenSequence(tasks: Src[], zipName?: ZipTaskName): string[];\r\n    /**\r\n     * add task result to task sequence. default implement in bindingConfig.\r\n     *\r\n     * @param {Src[]} sequence  task sequence.\r\n     * @param {ITaskInfo} task\r\n     * @returns {Src[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[];\r\n\r\n    /**\r\n     * get development root.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    getRootPath(): string;\r\n    /**\r\n     * get root folders.\r\n     *\r\n     * @param {folderCallback} [express]\r\n     * @returns {string[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    getRootFolders(express?: folderCallback): string[];\r\n    /**\r\n     * get folders in path.\r\n     *\r\n     * @param {string} pathstr\r\n     * @param {folderCallback} [express]\r\n     * @returns {string[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    getFolders(pathstr: string, express?: folderCallback): string[];\r\n    /**\r\n     * get context dist folders\r\n     *\r\n     * @param {folderCallback} [express]\r\n     * @param {ITaskInfo} [task]\r\n     * @returns {string[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    getDistFolders(express?: folderCallback, task?: ITaskInfo): string[];\r\n    /**\r\n     * join src to absolute path src with root( env.root ).\r\n     *\r\n     * @param {Src} src\r\n     * @returns {Src}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    toRootSrc(src: Src): Src\r\n\r\n    /**\r\n     * join pathstr to absolute path src with root( env.root ).\r\n     *\r\n     * @param {string} pathstr\r\n     * @returns {string}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    toRootPath(pathstr: string): string;\r\n\r\n    /**\r\n     * join src to absolute path src with context dist root.\r\n     *\r\n     * @param {Src} src\r\n     * @param {ITaskInfo} [task]\r\n     * @returns {Src}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    toDistSrc(src: Src, task?: ITaskInfo): Src;\r\n\r\n    /**\r\n     * join pathstr to absolute path src with dist root.\r\n     *\r\n     * @param {string} pathstr\r\n     * @param {ITaskInfo} [task]\r\n     * @returns {string}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    toDistPath(pathstr: string, task?: ITaskInfo): string;\r\n\r\n    /**\r\n     * parse to T type;\r\n     *\r\n     * @template T\r\n     * @param {(T | ((ctx: ITaskContext) => T))} setting\r\n     * @returns {T}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    to<T>(setting: T | ((ctx: ITaskContext) => T)): T;\r\n    /**\r\n     * to src\r\n     *\r\n     * @param {any} TaskSource\r\n     * @returns {Src}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    toSrc(source: TaskSource): Src;\r\n\r\n    /**\r\n     * to string.\r\n     *\r\n     * @param {TaskString} name\r\n     * @returns {string}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    toStr(name: TaskString): string;\r\n\r\n    /**\r\n     * to relative url.\r\n     *\r\n     * @param {string} basePath\r\n     * @param {string} [toPath]\r\n     * @returns {string}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    toUrl(basePath: string, toPath?: string): string\r\n\r\n    /**\r\n     * get package config. default root path file 'package.json'\r\n     *\r\n     * @param {TaskString} [filename]\r\n     * @returns {*}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    getPackage(filename?: TaskString): any;\r\n\r\n\r\n    /**\r\n     * find and filter tasks in this context.\r\n     *\r\n     * @param {(item: ITask) => boolean} [express]\r\n     * @returns {ITask[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    tasks(express?: (item: ITask) => boolean): ITask[];\r\n\r\n    /**\r\n     * filter registered tasks in this context and sub context.\r\n     *\r\n     * @param {(item: ITask) => boolean} [express]\r\n     * @returns {ITask[]}\r\n     */\r\n    registerTasks?(express?: (item: ITask) => boolean): ITask[];\r\n\r\n    /**\r\n     * get all global tasks registered in gulp.\r\n     *\r\n     * @returns {string[]}\r\n     *\r\n     * @memberof ITaskContext\r\n     */\r\n    globalTasks(): string[];\r\n}\r\n\r\n/**\r\n * event option\r\n *\r\n * @export\r\n * @interface IEnvOption\r\n */\r\nexport interface IEnvOption {\r\n    /**\r\n     * project root.\r\n     *\r\n     * @type {string}\r\n     * @memberof IEnvOption\r\n     */\r\n    root?: string;\r\n    /**\r\n     * help doc\r\n     *\r\n     * @type {(boolean | string)}\r\n     * @memberof IEnvOption\r\n     */\r\n    help?: boolean | string;\r\n    test?: boolean | string;\r\n    serve?: boolean | string;\r\n    e2e?: boolean | string;\r\n    release?: boolean;\r\n    deploy?: boolean;\r\n    watch?: boolean | string;\r\n    /**\r\n     * run spruce task.\r\n     */\r\n    task?: string;\r\n\r\n    /**\r\n     * project config setting.\r\n     *\r\n     * @type {string}\r\n     * @memberof IEnvOption\r\n     */\r\n    config?: string;\r\n\r\n    // key?: number;\r\n    // value?: number;\r\n    // csv?: string;\r\n    // dist?: string;\r\n    // lang?: string;\r\n\r\n    publish?: boolean | string;\r\n\r\n    /**\r\n     * task group.\r\n     *\r\n     * @type {Src}\r\n     * @memberof IEnvOption\r\n     */\r\n    group?: Src;\r\n\r\n    /**\r\n     * group bundle.\r\n     *\r\n     * @type {Src}\r\n     * @memberof IEnvOption\r\n     */\r\n    gb?: Src;\r\n}\r\n"]}