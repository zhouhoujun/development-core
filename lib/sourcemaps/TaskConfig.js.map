{"version":3,"sources":["TaskConfig.js","TaskConfig.ts"],"names":["Operation","exports"],"mappings":"AAAA,cCQA,SAAYA,GAIRA,EAAAA,EAAA,MAAA,GAAA,QAIAA,EAAAA,EAAA,KAAA,GAAA,OAIAA,EAAAA,EAAA,IAAA,GAAA,MAIAA,EAAAA,EAAA,QAAA,GAAA,UAIAA,EAAAA,EAAA,OAAA,IAAA,UApBQC,QAAAD,YAAAC,QAAAD,cAAZ,IAAYA,WAAAC,QAAAD","file":"../TaskConfig.js","sourcesContent":["\"use strict\";\n(function (Operation) {\n    Operation[Operation[\"build\"] = 1] = \"build\";\n    Operation[Operation[\"test\"] = 2] = \"test\";\n    Operation[Operation[\"e2e\"] = 4] = \"e2e\";\n    Operation[Operation[\"release\"] = 8] = \"release\";\n    Operation[Operation[\"deploy\"] = 16] = \"deploy\";\n})(exports.Operation || (exports.Operation = {}));\nvar Operation = exports.Operation;\n","import { Gulp, WatchEvent, WatchCallback } from 'gulp';\r\n\r\n/**\r\n * project development build operation.\r\n * \r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum Operation {\r\n    /**\r\n     * build compile project.\r\n     */\r\n    build = 1 << 0,\r\n    /**\r\n     * test project.\r\n     */\r\n    test = 1 << 1,\r\n    /**\r\n     * e2e test project.\r\n     */\r\n    e2e = 1 << 2,\r\n    /**\r\n     * release project.\r\n     */\r\n    release = 1 << 3,\r\n    /**\r\n     * release and deploy project.\r\n     */\r\n    deploy = 1 << 4\r\n}\r\n\r\n/**\r\n * object map.\r\n * \r\n * @export\r\n * @interface IMap\r\n * @template T\r\n */\r\nexport interface IMap<T> {\r\n    [K: string]: T;\r\n}\r\n\r\n/**\r\n * src\r\n */\r\nexport type Src = string | string[];\r\n\r\n/**\r\n * Task return type.\r\n * \r\n * @export\r\n * @interface ITaskResult\r\n */\r\nexport interface ITaskResult {\r\n    /**\r\n     * task name for task sequence.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf ITaskResult\r\n     */\r\n    name?: Src;\r\n    /**\r\n     * task Operation type. default all pperation.\r\n     * \r\n     * @type {Operation}\r\n     * @memberOf ITaskResult\r\n     */\r\n    oper?: Operation;\r\n    /**\r\n     * task sequence order.\r\n     * \r\n     * @type {number}\r\n     * @memberOf ITaskResult\r\n     */\r\n    order?: number;\r\n}\r\n\r\nexport type TaskResult = Src | ITaskResult | void;\r\nexport type TaskSequence = TaskResult[];\r\nexport type Task = (gulp: Gulp, config: ITaskConfig) => TaskSequence;\r\n\r\nexport type TaskSource = Src | ((oper?: Operation) => Src);\r\nexport type TaskString = string | ((oper?: Operation) => string);\r\n\r\n/**\r\n * task loader option.\r\n * \r\n * @export\r\n * @interface ILoaderOption\r\n */\r\nexport interface ILoaderOption {\r\n    /**\r\n     * loader type, default module.\r\n     * \r\n     * @type {string}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    type?: string;\r\n    /**\r\n     * module name or url\r\n     * \r\n     * @type {string | Object}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    module?: string | Object;\r\n\r\n    /**\r\n     * config module name or url.\r\n     * \r\n     * @type {string | Object}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    configModule?: string | Object;\r\n\r\n    /**\r\n     * config module name or url.\r\n     * \r\n     * @type {string | Object}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    taskModule?: string | Object;\r\n\r\n    /**\r\n     * task define.\r\n     * \r\n     * @type {ITaskDefine}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    taskDefine?: ITaskDefine;\r\n\r\n    /**\r\n     * custom external judage the object is right task func.\r\n     * \r\n     * @param {*} mdl\r\n     * @param {string} name\r\n     * @returns {boolean}\r\n     * \r\n     * @memberOf ILoaderOption\r\n     */\r\n    isTaskFunc?(mdl: any): boolean;\r\n    /**\r\n     * custom external judage the object is right task define.\r\n     * \r\n     * @param {*} mdl\r\n     * @returns {boolean}\r\n     * \r\n     * @memberOf ILoaderOption\r\n     */\r\n    isTaskDefine?(mdl: any): boolean;\r\n}\r\n\r\n/**\r\n * loader to load tasks from directory.\r\n * \r\n * @export\r\n * @interface DirLoaderOption\r\n * @extends {ILoaderOption}\r\n */\r\nexport interface IDirLoaderOption extends ILoaderOption {\r\n    /**\r\n     * loader dir\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf ILoaderOption\r\n     */\r\n    dir?: TaskSource\r\n    /**\r\n     * config in directory. \r\n     * \r\n     * @type {string}\r\n     * @memberOf DirLoaderOption\r\n     */\r\n    dirConfigFile?: string;\r\n}\r\n\r\n\r\n/**\r\n * transform interface.\r\n * \r\n * @export\r\n * @interface ITransform\r\n * @extends {NodeJS.ReadWriteStream}\r\n */\r\nexport interface ITransform extends NodeJS.ReadWriteStream {\r\n    /**\r\n     * transform pipe\r\n     * \r\n     * @param {NodeJS.ReadWriteStream} stream\r\n     * @returns {ITransform}\r\n     * \r\n     * @memberOf ITransform\r\n     */\r\n    pipe(stream: NodeJS.ReadWriteStream): ITransform;\r\n}\r\n\r\n/**\r\n * output transform. support typescript output.\r\n * \r\n * @export\r\n * @interface IOutput\r\n * @extends {ITransform}\r\n */\r\nexport interface IOutput extends ITransform {\r\n    dts?: ITransform;\r\n    js?: ITransform\r\n}\r\n\r\nexport type Pipe = (config?: ITaskConfig, dt?: IDynamicTask, gulp?: Gulp) => ITransform | Promise<ITransform>;\r\n\r\nexport type OutputPipe = (map: IOutput, config?: ITaskConfig, dt?: IDynamicTask, gulp?: Gulp) => ITransform | Promise<ITransform>;\r\n\r\nexport interface IOutputDist {\r\n    /**\r\n     * the src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf IOutputDist\r\n     */\r\n    src?: TaskSource\r\n\r\n    /**\r\n     * default output folder. if empty use parent setting, or ues 'dist'.\r\n     */\r\n    dist?: TaskString;\r\n    /**\r\n     * build output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    build?: string;\r\n    /**\r\n     * test output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    test?: string;\r\n    /**\r\n     * e2e output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    e2e?: string;\r\n    /**\r\n     * release output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    release?: string;\r\n    /**\r\n     * deploy output folder. if empty use parent setting, or ues 'dist'.\r\n     * \r\n     * @type {string}\r\n     * @memberOf Dist\r\n     */\r\n    deploy?: string;\r\n}\r\n\r\n\r\n/**\r\n * dynamic gulp task.\r\n * \r\n * @export\r\n * @interface IDynamicTask\r\n * @extends {IOutputDist}\r\n */\r\nexport interface IDynamicTask extends IOutputDist {\r\n    /**\r\n     * task name\r\n     * \r\n     * @type {TaskName}\r\n     * @memberOf IDynamicTask\r\n     */\r\n    name: TaskString;\r\n    /**\r\n     * task order.\r\n     * \r\n     * @type {number}\r\n     * @memberOf IDynamicTask\r\n     */\r\n    order?: number;\r\n    /**\r\n     * task type. default for all Operation.\r\n     * \r\n     * @type {Operation}\r\n     * @memberOf IDynamicTask\r\n     */\r\n    oper?: Operation;\r\n\r\n    /**\r\n     * watch tasks\r\n     * \r\n     * \r\n     * @memberOf IDynamicTask\r\n     */\r\n    watch?: Array<string | WatchCallback> | ((config?: ITaskConfig, dt?: IDynamicTask) => Array<string | WatchCallback>);\r\n    /**\r\n     * watch changed.\r\n     * \r\n     * @param {WatchEvent} event\r\n     * @param {ITaskConfig} config\r\n     * \r\n     * @memberOf IDynamicTask\r\n     */\r\n    watchChanged?(event: WatchEvent, config: ITaskConfig);\r\n    /**\r\n     * stream pipe.\r\n     * \r\n     * @param {ITransform} gulpsrc\r\n     * @param {ITaskConfig} config\r\n     * @returns {(ITransform | Promise<ITransform>)}\r\n     * \r\n     * @memberOf IDynamicTask\r\n     */\r\n    pipe?(gulpsrc: ITransform, config: ITaskConfig, dt?: IDynamicTask): ITransform | Promise<ITransform>;\r\n\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * \r\n     * @memberOf IDynamicTask\r\n     */\r\n    pipes?: Pipe[] | ((config?: ITaskConfig, dt?: IDynamicTask) => Pipe[]);\r\n\r\n    /**\r\n     * output pipe task\r\n     *\r\n     * \r\n     * @memberOf IDynamicTask\r\n     */\r\n    output?: OutputPipe[] | ((config?: ITaskConfig, dt?: IDynamicTask) => OutputPipe[]);\r\n\r\n    /**\r\n     * custom task.\r\n     * \r\n     * @param {ITaskConfig} config\r\n     * @param {IDynamicTask} [dt]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {(void | ITransform | Promise<any>)}\r\n     * \r\n     * @memberOf IDynamicTask\r\n     */\r\n    task?(config: ITaskConfig, dt?: IDynamicTask, gulp?: Gulp): void | ITransform | Promise<any>;\r\n\r\n}\r\n\r\n/**\r\n * the option for loader dynamic build task.\r\n * \r\n * @export\r\n * @interface IDynamicLoaderOption\r\n * @extends {ILoaderOption}\r\n */\r\nexport interface IDynamicLoaderOption extends ILoaderOption {\r\n    /**\r\n     * dynamic task\r\n     * \r\n     * @type {(IDynamicTask | IDynamicTask[])}\r\n     * @memberOf IDynamicLoaderOption\r\n     */\r\n    dynamicTasks?: IDynamicTask | IDynamicTask[];\r\n}\r\n\r\n\r\n/**\r\n * task loader option.\r\n * \r\n * @export\r\n * @interface TaskLoaderOption\r\n */\r\nexport interface ITaskLoaderOption {\r\n    /**\r\n     * task loader\r\n     * \r\n     * @type {(string | ILoaderOption | IDynamicTask | IDynamicTask[])}\r\n     * @memberOf ITaskOption\r\n     */\r\n    loader: string | ILoaderOption | IDynamicTask | IDynamicTask[];\r\n\r\n    /**\r\n     * external task for \r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    externalTask?: Task;\r\n    /**\r\n     * custom set run tasks sequence.\r\n     * \r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    runTasks?: Src[] | ((oper: Operation, tasks: Src[], subGroupTask?: TaskResult, assertsTask?: TaskResult) => Src[]);\r\n\r\n    /**\r\n     * sub tasks.\r\n     * \r\n     * @type {(ITaskOption | ITaskOption[])}\r\n     * @memberOf ITaskOption\r\n     */\r\n    tasks?: ITaskOption | ITaskOption[];\r\n\r\n    /**\r\n     * set sub task order in this task sequence.\r\n     * \r\n     * @type {number}\r\n     * @memberOf TaskLoaderOption\r\n     */\r\n    subTaskOrder?: number;\r\n}\r\n\r\n\r\n/**\r\n * IAsserts to be dealt with.\r\n * \r\n * @export\r\n * @interface IAsserts\r\n * @extends {IOutputDist}\r\n */\r\nexport interface IAsserts extends IOutputDist {\r\n    /**\r\n     * IAsserts extends name. for register dynamic task.\r\n     * \r\n     * @type {TaskName}\r\n     * @memberOf IAsserts\r\n     */\r\n    name?: TaskString;\r\n\r\n    /**\r\n     * tasks to deal with IAsserts.\r\n     * \r\n     * @type {IMap<Src | IAsserts, IDynamicTask[]>}\r\n     * @memberOf IAsserts\r\n     */\r\n    IAsserts?: IMap<Src | IAsserts | IDynamicTask[]>;\r\n\r\n    /**\r\n     * set IAsserts task order in this task sequence.\r\n     * \r\n     * @type {number}\r\n     * @memberOf IAsserts\r\n     */\r\n    assertsOrder?: number;\r\n}\r\n\r\n\r\n/**\r\n * task option setting.\r\n * \r\n * @export\r\n * @interface ITaskOption\r\n * @extends {IAsserts}\r\n * @extends {ITaskLoaderOption}\r\n */\r\nexport interface ITaskOption extends IAsserts, ITaskLoaderOption {\r\n    /**\r\n     * the src file filter string. default 'src'.\r\n     * \r\n     * @type {TaskSource}\r\n     * @memberOf ITaskOption\r\n     */\r\n    src: TaskSource;\r\n}\r\n\r\n/**\r\n * modules task define\r\n * \r\n * @export\r\n * @interface ITaskDefine\r\n */\r\nexport interface ITaskDefine {\r\n    /**\r\n     * load config in modules\r\n     * \r\n     * @param {Operation} oper\r\n     * @param {ITaskOption} option\r\n     * @returns {ITaskConfig}\r\n     * \r\n     * @memberOf ITaskDefine\r\n     */\r\n    moduleTaskConfig(oper: Operation, option: ITaskOption, env: IEnvOption): ITaskConfig\r\n\r\n    /**\r\n     * load task in modules.\r\n     * \r\n     * @param {ITaskConfig} config\r\n     * @param {tasksInModule} findInModule\r\n     * @param {tasksInDir} findInDir\r\n     * @returns {Task[]}\r\n     * \r\n     * @memberOf ITaskDefine\r\n     */\r\n    moduleTaskLoader?(config: ITaskConfig): Promise<Task[]>;\r\n}\r\n\r\n/**\r\n * run time task config for setup task.\r\n * \r\n * @export\r\n * @interface ITaskConfig\r\n */\r\nexport interface ITaskConfig {\r\n    /**\r\n     * custom global data cache.\r\n     */\r\n    globals?: any;\r\n    /**\r\n     * env\r\n     * \r\n     * @type {EnvOption}\r\n     * @memberOf ITaskConfig\r\n     */\r\n    env: IEnvOption;\r\n    /**\r\n     * run operation\r\n     * \r\n     * @type {Operation}\r\n     * @memberOf ITaskConfig\r\n     */\r\n    oper: Operation;\r\n    /**\r\n     * task option setting.\r\n     * \r\n     * @type {IAsserts}\r\n     * @memberOf ITaskConfig\r\n     */\r\n    option: IAsserts | ITaskOption;\r\n\r\n    /**\r\n     * custom config run tasks sequence in.\r\n     * \r\n     * @param {TaskResult} [subGroupTask]\r\n     * @param {Src[]} [tasks]\r\n     * @param {TaskResult} [assertTasks]\r\n     * @returns {Src[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    runTasks?(subGroupTask?: TaskResult, tasks?: Src[], assertTasks?: TaskResult): Src[];\r\n    /**\r\n     * custom print help.\r\n     * \r\n     * @param {string} lang\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    printHelp?(lang: string): void;\r\n\r\n    /**\r\n     * find  task in module. default implement by loader.\r\n     * \r\n     * @param {string} module\r\n     * @returns {Promise<Task[]>}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    findTasksInModule?(module: string): Promise<Task[]>;\r\n    /**\r\n     * find  task in directories. default implement by loader.\r\n     * \r\n     * @param {Src} dirs\r\n     * @returns {Promise<Task[]>}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    findTasksInDir?(dirs: Src): Promise<Task[]>;\r\n\r\n    /**\r\n     * get dist of current state.  default implement in bindingConfig.\r\n     * \r\n     * @param {IOutputDist} dist\r\n     * @returns {string}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    getDist?(dist?: IOutputDist): string;\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     * \r\n     * @param {string} directory\r\n     * @param {((fileName: string) => boolean)} [express]\r\n     * @returns {string[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    fileFilter?(directory: string, express?: ((fileName: string) => boolean)): string[];\r\n    /**\r\n     * filter file in directory.  default implement in bindingConfig.\r\n     * \r\n     * @param {Gulp} gulp\r\n     * @param {Src[]} tasks\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    runSequence?(gulp: Gulp, tasks: Src[]): Promise<any>;\r\n\r\n    /**\r\n     * dynamic generate tasks.  default implement in bindingConfig.\r\n     * \r\n     * @param {(IDynamicTask | IDynamicTask[])} tasks\r\n     * @returns {Task[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    generateTask?(tasks: IDynamicTask | IDynamicTask[]): Task[];\r\n\r\n    /**\r\n     * add task result to task sequence.\r\n     * \r\n     * @param {Src[]} sequence  task sequence.\r\n     * @param {TaskResult} taskResult\r\n     * @returns {Src[]}\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    addTask?(sequence: Src[], taskResult: TaskResult): Src[];\r\n    /**\r\n     * generate sub task name\r\n     * \r\n     * @param {string} name\r\n     * @param {string} [defaultName]\r\n     * \r\n     * @memberOf ITaskConfig\r\n     */\r\n    subTaskName?(name: string, defaultName?: string);\r\n}\r\n\r\n/**\r\n * event option\r\n * \r\n * @export\r\n * @interface IEnvOption\r\n */\r\nexport interface IEnvOption {\r\n    /**\r\n     * project root.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IEnvOption\r\n     */\r\n    root?: string;\r\n    /**\r\n     * help doc\r\n     * \r\n     * @type {(boolean | string)}\r\n     * @memberOf IEnvOption\r\n     */\r\n    help?: boolean | string;\r\n    test?: boolean | string;\r\n    serve?: boolean | string;\r\n    e2e?: boolean | string;\r\n    release?: boolean;\r\n    deploy?: boolean;\r\n    watch?: boolean | string;\r\n    /**\r\n     * run spruce task.\r\n     */\r\n    task?: string;\r\n\r\n    /**\r\n     * project config setting.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IEnvOption\r\n     */\r\n    config?: string;\r\n\r\n    // key?: number;\r\n    // value?: number;\r\n    // csv?: string;\r\n    // dist?: string;\r\n    // lang?: string;\r\n\r\n    publish?: boolean | string;\r\n\r\n    /**\r\n     * group bundle.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf IEnvOption\r\n     */\r\n    grp?: Src;\r\n}\r\n"]}