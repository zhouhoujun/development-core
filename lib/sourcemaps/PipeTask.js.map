{"version":3,"sources":["PipeTask.js","PipeTask.ts"],"names":["TaskConfig_1","require","utils_1","coregulp","chalk","_","PipeTask","info","runWay","RunWay","parallel","name","ctx","dist","gulp","option","source","isFunction","loader","src","getSrc","getInfo","pipes","filter","p","opps","length","concat","isString","isArray","output","stream","pipe","dest","getDist","cfgopt","prsrc","cpipe2Promise","then","context","endsWith","taskStringVal","oper","opt","Promise","resolve","reject","ps","err","subTaskName","all","map","match","toTransform","trs","order","tans","sortOrder","tanseq","it","each","transformSourcePipe","transformPipe","outputs","once","customPipe","psrc","pipes2Promise","output2Promise","catch","console","log","red","process","exit","getOption","working","st","sequence","pthen","tk","cyan","task","execute","taskName","exports"],"mappings":"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","file":"../PipeTask.js","sourcesContent":["\"use strict\";\nconst TaskConfig_1 = require('./TaskConfig');\nconst utils_1 = require('./utils');\nconst coregulp = require('gulp');\nconst chalk = require('chalk');\nconst _ = require('lodash');\n/**\n * Task base class.\n *\n * @export\n * @class Task\n * @implements {ITask}\n */\nclass PipeTask {\n    constructor(info) {\n        /**\n         * run mutil source stream way. default parallel.\n         *\n         *\n         * @memberOf PipeTask\n         */\n        this.runWay = TaskConfig_1.RunWay.parallel;\n        this.info = info || {};\n        this.info.name = this.info.name || this.name;\n    }\n    /**\n     * get task info.\n     *\n     * @type {ITaskInfo}\n     * @memberOf PipeTask\n     */\n    getInfo() {\n        if (!this.info.name) {\n            this.info.name = this.name;\n        }\n        return this.info;\n    }\n    /**\n     * source streams.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} option\n     * @param {Gulp} gulp\n     * @returns {(TransformSource | Promise<TransformSource>)}\n     *\n     * @memberOf PipeTask\n     */\n    source(ctx, dist, gulp) {\n        // let source: TransformSource | Promise<TransformSource> = null;\n        // ctx.pipeOption((op) => {\n        //     if (!source && op.source) {\n        //         source = _.isFunction(op.source) ? op.source(ctx, dist, gulp) : op.source;\n        //     }\n        // });\n        // if (source) {\n        //     return source;\n        // }\n        // return gulp.src(ctx.getSrc(this.getInfo()));\n        let option = ctx.option;\n        if (option.source) {\n            return _.isFunction(option.source) ? option.source(ctx, dist, gulp) : option.source;\n        }\n        let loader = option['loader'];\n        if (loader && option.source) {\n            return _.isFunction(loader.source) ? loader.source(ctx, dist, gulp) : loader.source;\n        }\n        return gulp.src(ctx.getSrc(this.getInfo()));\n    }\n    /**\n     * task pipe works.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} [gulp]\n     * @returns {Pipe[]}\n     *\n     * @memberOf PipeTask\n     */\n    pipes(ctx, dist, gulp) {\n        // let pipes: Pipe[] = [];\n        // ctx.pipeOption((op) => {\n        //     let opps = _.isFunction(op.pipes) ? op.pipes(ctx, dist, gulp) : _.filter(<Pipe[]>op.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n        //     if (opps && opps.length > 0) {\n        //         pipes = pipes.concat(opps)\n        //     }\n        // });\n        // return pipes;\n        let option = ctx.option;\n        let pipes = null;\n        let loader = option['loader'];\n        if (loader && _.isFunction(loader.pipes)) {\n            pipes = _.isFunction(loader.pipes) ? loader.pipes(ctx, option, gulp) : _.filter(loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n        }\n        if (option.pipes) {\n            let opps = _.isFunction(option.pipes) ? option.pipes(ctx, option, gulp) : _.filter(option.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            if (opps && opps.length > 0) {\n                pipes = pipes ? pipes.concat(opps) : opps;\n            }\n        }\n        return pipes || [];\n    }\n    /**\n     * output pipes.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} [gulp]\n     * @returns {OutputPipe[]}\n     *\n     * @memberOf PipeTask\n     */\n    output(ctx, dist, gulp) {\n        // let pipes: OutputPipe[] = [];\n        // ctx.pipeOption((op) => {\n        //     if (pipes === null) {\n        //         return;\n        //     }\n        //     if (op.output === null) {\n        //         pipes = null;\n        //     } else {\n        //         let outs = _.isFunction(op.output) ? op.output(ctx, dist, gulp) : _.filter(<OutputPipe[]>op.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n        //         if (outs && outs.length > 0) {\n        //             pipes = pipes.concat(outs);\n        //         }\n        //     }\n        // });\n        // if (pipes === null) {\n        //     return [(stream) => stream];\n        // }\n        // if (pipes.length > 0) {\n        //     return pipes;\n        // }\n        // return [(stream) => stream.pipe(gulp.dest(ctx.getDist(dist)))]\n        let option = ctx.option;\n        let pipes = null;\n        let loader = option['loader'];\n        if (loader && !_.isString(loader) && !_.isArray(loader)) {\n            if (loader.output) {\n                pipes = _.isFunction(loader.output) ? loader.output(ctx, option, gulp) : _.filter(loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            }\n            else if (loader.output === null) {\n                return [(stream) => stream];\n            }\n        }\n        if (option.output) {\n            let opps = _.isFunction(option.output) ? option.output(ctx, option, gulp) : _.filter(option.output, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            if (opps && opps.length > 0) {\n                pipes = pipes ? pipes.concat(opps) : opps;\n            }\n        }\n        else if (option.output === null) {\n            return [(stream) => stream];\n        }\n        return pipes || [(stream) => stream.pipe(gulp.dest(ctx.getDist(dist)))];\n    }\n    /**\n     *  custom pipe Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} ctx\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    customPipe(source, ctx, dist, gulp) {\n        // let prsrc: Promise<ITransform> = null;\n        // ctx.pipeOption((op) => {\n        //     if (op.pipe) {\n        //         prsrc = prsrc ? prsrc.then(stream => this.cpipe2Promise(stream, op, ctx, dist, gulp))\n        //             : this.cpipe2Promise(source, op, ctx, dist, gulp);\n        //     }\n        // }, false);\n        // return prsrc || source;\n        let cfgopt = ctx.option;\n        let loader = cfgopt['loader'];\n        let prsrc;\n        if (cfgopt.pipe) {\n            prsrc = this.cpipe2Promise(source, cfgopt, ctx, dist, gulp);\n        }\n        if (loader && !_.isString(loader) && !_.isArray(loader) && loader.pipe) {\n            prsrc = prsrc ?\n                prsrc.then(stream => this.cpipe2Promise(stream, loader, ctx, dist, gulp))\n                : this.cpipe2Promise(source, loader, ctx, dist, gulp);\n        }\n        return prsrc || source;\n    }\n    /**\n     * get option.\n     *\n     * @protected\n     * @param {ITaskContext} context\n     * @returns {IAssertDist}\n     *\n     * @memberOf PipeTask\n     */\n    getOption(context) {\n        return context.option;\n    }\n    /**\n     * match pipe Operate\n     *\n     * @param {IPipeOperate} p\n     * @param {string} name\n     * @param {ITaskContext} context\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    match(p, name, context) {\n        if (!p) {\n            return false;\n        }\n        if (p.name && !name.endsWith(utils_1.taskStringVal(p.name, context))) {\n            return false;\n        }\n        if (p.oper && (p.oper & context.oper) <= 0) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * convert custom pipe result to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ICustomPipe} opt\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    cpipe2Promise(source, opt, context, dist, gulp) {\n        return new Promise((resolve, reject) => {\n            let ps = opt.pipe(source, context, dist, gulp, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n            if (ps) {\n                Promise.resolve(ps).then(resolve, reject);\n            }\n        });\n    }\n    /**\n     * covert pipes transform to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @param {Pipe[]} [pipes]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    pipes2Promise(source, ctx, dist, gulp, pipes) {\n        let name = ctx.subTaskName(dist, this.name);\n        return Promise.all(_.map(pipes || this.pipes(ctx, dist, gulp), (p) => {\n            if (_.isFunction(p)) {\n                return p(ctx, dist, gulp);\n            }\n            else {\n                if (!this.match(p, name, ctx)) {\n                    return null;\n                }\n                else {\n                    return Promise.resolve(p.toTransform(ctx, dist, gulp))\n                        .then(trs => {\n                        trs.order = p.order;\n                        return trs;\n                    });\n                }\n            }\n        }))\n            .then(tanseq => {\n            let tans = utils_1.sortOrder(tanseq, it => it.order);\n            _.each(tans, stream => {\n                if (!this.match(stream, name, ctx)) {\n                    return;\n                }\n                if (_.isFunction(stream.transformSourcePipe)) {\n                    source = stream.transformSourcePipe(source);\n                }\n                else if (_.isFunction(source.transformPipe)) {\n                    source = source.transformPipe(stream);\n                }\n                else {\n                    source = source.pipe(stream);\n                }\n            });\n            return source;\n        });\n    }\n    /**\n     * output pipes transform to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @param {OutputPipe[]} [output]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    output2Promise(source, context, dist, gulp, output) {\n        let name = context.subTaskName(dist, this.name);\n        let outputs = output || this.output(context, dist, gulp);\n        return Promise.all(_.map(outputs, output => {\n            if (_.isFunction(output)) {\n                return output(source, context, dist, gulp);\n            }\n            else {\n                if (!this.match(output, name, context)) {\n                    return null;\n                }\n                else {\n                    return output.toTransform(source, context, dist, gulp);\n                }\n            }\n        }))\n            .then(outputs => {\n            return Promise.all(_.map(outputs, output => {\n                return new Promise((resolve, reject) => {\n                    if (output) {\n                        output\n                            .once('end', () => {\n                            resolve(output);\n                        })\n                            .once('error', reject);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            }));\n        });\n    }\n    /**\n     * each one source stream works.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} ctx\n     * @param {IAssertDist} option\n     * @param {Gulp} gulp\n     * @param {Pipe[]} [pipes]\n     * @param {OutputPipe[]} [output]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    working(source, ctx, option, gulp, pipes, output) {\n        return Promise.resolve(source)\n            .then(psrc => this.customPipe(psrc, ctx, option, gulp))\n            .then(psrc => this.pipes2Promise(psrc, ctx, option, gulp, pipes))\n            .then(psrc => this.output2Promise(psrc, ctx, option, gulp, output))\n            .catch(err => {\n            console.log(chalk.red(err));\n            process.exit(0);\n        });\n    }\n    /**\n     * execute task working\n     *\n     * @param {ITaskContext} context\n     * @param {Gulp} gulp\n     * @returns {Promise<any>}\n     *\n     * @memberOf PipeTask\n     */\n    execute(context, gulp) {\n        let option = this.getOption(context);\n        return Promise.resolve(this.source(context, option, gulp))\n            .then(stream => {\n            if (_.isArray(stream)) {\n                if (this.runWay === TaskConfig_1.RunWay.parallel) {\n                    return Promise.all(_.map(stream, st => this.working(st, context, option, gulp)));\n                }\n                else if (this.runWay === TaskConfig_1.RunWay.sequence) {\n                    let pthen;\n                    _.each(stream, st => {\n                        if (!pthen) {\n                            pthen = this.working(st, context, option, gulp);\n                        }\n                        else {\n                            pthen = pthen.then(() => {\n                                return this.working(st, context, option, gulp);\n                            });\n                        }\n                    });\n                    return pthen;\n                }\n                else {\n                    return Promise.reject('runWay setting error.');\n                }\n            }\n            else {\n                return this.working(stream, context, option, gulp);\n            }\n        });\n    }\n    /**\n     * setup task works.\n     *\n     * @param {ITaskContext} context\n     * @param {Gulp} [gulp]\n     * @returns {TaskResult}\n     *\n     * @memberOf PipeTask\n     */\n    setup(context, gulp) {\n        gulp = gulp || coregulp;\n        // let option = this.getOption(context);\n        let tk = context.subTaskName(this.getInfo());\n        console.log(`register ${this.name || ''} task:`, chalk.cyan(tk));\n        gulp.task(tk, () => {\n            return this.execute(context, gulp);\n        });\n        this.info.taskName = tk;\n        return tk;\n    }\n}\nexports.PipeTask = PipeTask;\n","import { Gulp } from 'gulp';\r\nimport { TransformSource, RunWay, IAssertDist, ITaskInfo, TaskResult, ITaskContext, IOperate, ICustomPipe, Pipe, OutputPipe, ITask, ITransform, IPipeOption } from './TaskConfig';\r\nimport { taskStringVal, sortOrder } from './utils';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport * as _ from 'lodash';\r\n\r\n/**\r\n * pipe task.\r\n * \r\n * @export\r\n * @interface IPipeWork\r\n */\r\nexport interface IPipeTask extends ITask {\r\n    /**\r\n     * task default name.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IPipeTask\r\n     */\r\n    name: string;\r\n    /**\r\n     * gulp src stream.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns {(TransformSource | Promise<TransformSource>)}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    source(context: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource>;\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {Pipe[]}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    pipes(context: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[];\r\n\r\n    /**\r\n     * output pipes.\r\n     * \r\n     * @param {ITaskContext} [context]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {OutputPipe[]}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    output(context: ITaskContext, dist: IAssertDist, gulp?: Gulp): OutputPipe[];\r\n    /**\r\n     * execute task works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} gulp\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    execute(context: ITaskContext, gulp: Gulp): Promise<any>;\r\n}\r\n\r\n/**\r\n * Task base class.\r\n * \r\n * @export\r\n * @class Task\r\n * @implements {ITask}\r\n */\r\nexport abstract class PipeTask implements IPipeTask {\r\n    /**\r\n     * run mutil source stream way. default parallel.\r\n     * \r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    public runWay = RunWay.parallel;\r\n    /**\r\n     * task default name.\r\n     * \r\n     * @type {string}\r\n     * @memberOf PipeTask\r\n     */\r\n    name: string;\r\n\r\n\r\n    constructor(info?: ITaskInfo) {\r\n        this.info = info || {};\r\n        this.info.name = this.info.name || this.name;\r\n    }\r\n\r\n    protected info: ITaskInfo;\r\n\r\n    /**\r\n     * get task info.\r\n     * \r\n     * @type {ITaskInfo}\r\n     * @memberOf PipeTask\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        if (!this.info.name) {\r\n            this.info.name = this.name;\r\n        }\r\n        return this.info;\r\n    }\r\n\r\n    /**\r\n     * source streams.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} option\r\n     * @param {Gulp} gulp\r\n     * @returns {(TransformSource | Promise<TransformSource>)}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        // let source: TransformSource | Promise<TransformSource> = null;\r\n        // ctx.pipeOption((op) => {\r\n        //     if (!source && op.source) {\r\n        //         source = _.isFunction(op.source) ? op.source(ctx, dist, gulp) : op.source;\r\n        //     }\r\n        // });\r\n\r\n        // if (source) {\r\n        //     return source;\r\n        // }\r\n        // return gulp.src(ctx.getSrc(this.getInfo()));\r\n\r\n        let option = ctx.option;\r\n        if (option.source) {\r\n            return _.isFunction(option.source) ? option.source(ctx, dist, gulp) : option.source;\r\n        }\r\n        let loader = <IPipeOption>option['loader'];\r\n        if (loader && option.source) {\r\n            return _.isFunction(loader.source) ? loader.source(ctx, dist, gulp) : loader.source;\r\n        }\r\n        return gulp.src(ctx.getSrc(this.getInfo()));\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {Pipe[]}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        // let pipes: Pipe[] = [];\r\n        // ctx.pipeOption((op) => {\r\n        //     let opps = _.isFunction(op.pipes) ? op.pipes(ctx, dist, gulp) : _.filter(<Pipe[]>op.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n        //     if (opps && opps.length > 0) {\r\n        //         pipes = pipes.concat(opps)\r\n        //     }\r\n        // });\r\n        // return pipes;\r\n\r\n        let option = ctx.option;\r\n        let pipes: Pipe[] = null;\r\n        let loader = <IPipeOption>option['loader'];\r\n        if (loader && _.isFunction(loader.pipes)) {\r\n            pipes = _.isFunction(loader.pipes) ? loader.pipes(ctx, option, gulp) : _.filter(<Pipe[]>loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n        }\r\n\r\n        if (option.pipes) {\r\n            let opps = _.isFunction(option.pipes) ? option.pipes(ctx, option, gulp) : _.filter(<Pipe[]>option.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            if (opps && opps.length > 0) {\r\n                pipes = pipes ? pipes.concat(opps) : opps;\r\n            }\r\n        }\r\n        return pipes || [];\r\n    }\r\n\r\n    /**\r\n     * output pipes.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {OutputPipe[]}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    output(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): OutputPipe[] {\r\n        // let pipes: OutputPipe[] = [];\r\n        // ctx.pipeOption((op) => {\r\n        //     if (pipes === null) {\r\n        //         return;\r\n        //     }\r\n        //     if (op.output === null) {\r\n        //         pipes = null;\r\n        //     } else {\r\n        //         let outs = _.isFunction(op.output) ? op.output(ctx, dist, gulp) : _.filter(<OutputPipe[]>op.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n        //         if (outs && outs.length > 0) {\r\n        //             pipes = pipes.concat(outs);\r\n        //         }\r\n        //     }\r\n        // });\r\n\r\n        // if (pipes === null) {\r\n        //     return [(stream) => stream];\r\n        // }\r\n\r\n        // if (pipes.length > 0) {\r\n        //     return pipes;\r\n        // }\r\n\r\n        // return [(stream) => stream.pipe(gulp.dest(ctx.getDist(dist)))]\r\n\r\n\r\n        let option = ctx.option;\r\n        let pipes: OutputPipe[] = null;\r\n        let loader = <IPipeOption>option['loader'];\r\n        if (loader && !_.isString(loader) && !_.isArray(loader)) {\r\n            if (loader.output) {\r\n                pipes = _.isFunction(loader.output) ? loader.output(ctx, option, gulp) : _.filter(<OutputPipe[]>loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            } else if (loader.output === null) {\r\n                return [(stream) => stream];\r\n            }\r\n        }\r\n        if (option.output) {\r\n            let opps = _.isFunction(option.output) ? option.output(ctx, option, gulp) : _.filter(<OutputPipe[]>option.output, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            if (opps && opps.length > 0) {\r\n                pipes = pipes ? pipes.concat(opps) : opps;\r\n            }\r\n        } else if (option.output === null) {\r\n            return [(stream) => stream];\r\n        }\r\n\r\n        return pipes || [(stream) => stream.pipe(gulp.dest(ctx.getDist(dist)))]\r\n    }\r\n\r\n    /**\r\n     *  custom pipe Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} ctx\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected customPipe(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        // let prsrc: Promise<ITransform> = null;\r\n        // ctx.pipeOption((op) => {\r\n        //     if (op.pipe) {\r\n        //         prsrc = prsrc ? prsrc.then(stream => this.cpipe2Promise(stream, op, ctx, dist, gulp))\r\n        //             : this.cpipe2Promise(source, op, ctx, dist, gulp);\r\n        //     }\r\n        // }, false);\r\n\r\n        // return prsrc || source;\r\n\r\n        let cfgopt = ctx.option;\r\n        let loader = <IPipeOption>cfgopt['loader'];\r\n        let prsrc: Promise<ITransform>;\r\n        if (cfgopt.pipe) {\r\n            prsrc = this.cpipe2Promise(source, cfgopt, ctx, dist, gulp);\r\n        }\r\n        if (loader && !_.isString(loader) && !_.isArray(loader) && loader.pipe) {\r\n            prsrc = prsrc ?\r\n                prsrc.then(stream => this.cpipe2Promise(stream, loader, ctx, dist, gulp))\r\n                : this.cpipe2Promise(source, loader, ctx, dist, gulp);\r\n        }\r\n\r\n        return prsrc || source;\r\n    }\r\n\r\n    /**\r\n     * get option.\r\n     * \r\n     * @protected\r\n     * @param {ITaskContext} context\r\n     * @returns {IAssertDist}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected getOption(context: ITaskContext): IAssertDist {\r\n        return context.option;\r\n    }\r\n\r\n    /**\r\n     * match pipe Operate\r\n     * \r\n     * @param {IPipeOperate} p\r\n     * @param {string} name\r\n     * @param {ITaskContext} context\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected match(p: IOperate, name: string, context: ITaskContext) {\r\n        if (!p) {\r\n            return false;\r\n        }\r\n        if (p.name && !name.endsWith(taskStringVal(p.name, context))) {\r\n            return false;\r\n        }\r\n\r\n        if (p.oper && (p.oper & context.oper) <= 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * convert custom pipe result to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ICustomPipe} opt\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected cpipe2Promise(source: ITransform, opt: ICustomPipe, context: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        return new Promise<ITransform>((resolve, reject) => {\r\n            let ps = opt.pipe(source, context, dist, gulp, (err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n            if (ps) {\r\n                Promise.resolve(ps).then(resolve, reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * covert pipes transform to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @param {Pipe[]} [pipes]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected pipes2Promise(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp, pipes?: Pipe[]) {\r\n        let name = ctx.subTaskName(dist, this.name);\r\n        return Promise.all(_.map(pipes || this.pipes(ctx, dist, gulp), (p: Pipe) => {\r\n            if (_.isFunction(p)) {\r\n                return p(ctx, dist, gulp);\r\n            } else {\r\n                if (!this.match(p, name, ctx)) {\r\n                    return null;\r\n                } else {\r\n                    return Promise.resolve(p.toTransform(ctx, dist, gulp))\r\n                        .then(trs => {\r\n                            trs.order = p.order;\r\n                            return trs;\r\n                        });\r\n                }\r\n            }\r\n        }))\r\n            .then(tanseq => {\r\n\r\n                let tans = sortOrder<ITransform>(tanseq, it => it.order);\r\n\r\n                _.each(tans, stream => {\r\n                    if (!this.match(stream, name, ctx)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (_.isFunction(stream.transformSourcePipe)) {\r\n                        source = stream.transformSourcePipe(source);\r\n                    } else if (_.isFunction(source.transformPipe)) {\r\n                        source = source.transformPipe(stream);\r\n                    } else {\r\n                        source = source.pipe(stream);\r\n                    }\r\n                });\r\n                return source;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * output pipes transform to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @param {OutputPipe[]} [output]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected output2Promise(source: ITransform, context: ITaskContext, dist: IAssertDist, gulp: Gulp, output?: OutputPipe[]) {\r\n        let name = context.subTaskName(dist, this.name);\r\n        let outputs = output || this.output(context, dist, gulp);\r\n        return Promise.all(_.map(outputs, output => {\r\n            if (_.isFunction(output)) {\r\n                return output(source, context, dist, gulp);\r\n            } else {\r\n                if (!this.match(output, name, context)) {\r\n                    return null;\r\n                } else {\r\n                    return output.toTransform(source, context, dist, gulp);\r\n                }\r\n            }\r\n        }))\r\n            .then(outputs => {\r\n                return Promise.all(_.map(outputs, output => {\r\n                    return new Promise((resolve, reject) => {\r\n                        if (output) {\r\n                            output\r\n                                .once('end', () => {\r\n                                    resolve(output);\r\n                                })\r\n                                .once('error', reject);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    });\r\n                }));\r\n            })\r\n    }\r\n\r\n    /**\r\n     * each one source stream works.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} ctx\r\n     * @param {IAssertDist} option\r\n     * @param {Gulp} gulp\r\n     * @param {Pipe[]} [pipes]\r\n     * @param {OutputPipe[]} [output]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected working(source: ITransform, ctx: ITaskContext, option: IAssertDist, gulp: Gulp, pipes?: Pipe[], output?: OutputPipe[]) {\r\n        return Promise.resolve(source)\r\n            .then(psrc => this.customPipe(psrc, ctx, option, gulp))\r\n            .then(psrc => this.pipes2Promise(psrc, ctx, option, gulp, pipes))\r\n            .then(psrc => this.output2Promise(psrc, ctx, option, gulp, output))\r\n            .catch(err => {\r\n                console.log(chalk.red(err));\r\n                process.exit(0);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * execute task working\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} gulp\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    execute(context: ITaskContext, gulp: Gulp): Promise<any> {\r\n        let option = this.getOption(context);\r\n        return Promise.resolve(this.source(context, option, gulp))\r\n            .then(stream => {\r\n                if (_.isArray(stream)) {\r\n                    if (this.runWay === RunWay.parallel) {\r\n                        return Promise.all(_.map(stream, st => this.working(st, context, option, gulp)));\r\n                    } else if (this.runWay === RunWay.sequence) {\r\n                        let pthen: Promise<any>;\r\n                        _.each(stream, st => {\r\n                            if (!pthen) {\r\n                                pthen = this.working(st, context, option, gulp);\r\n                            } else {\r\n                                pthen = pthen.then(() => {\r\n                                    return this.working(st, context, option, gulp);\r\n                                });\r\n                            }\r\n                        });\r\n                        return pthen;\r\n                    } else {\r\n                        return Promise.reject('runWay setting error.');\r\n                    }\r\n                } else {\r\n                    return this.working(stream, context, option, gulp);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * setup task works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} [gulp]\r\n     * @returns {TaskResult}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    setup(context: ITaskContext, gulp?: Gulp): TaskResult {\r\n        gulp = gulp || coregulp;\r\n        // let option = this.getOption(context);\r\n        let tk = context.subTaskName(this.getInfo());\r\n        console.log(`register ${this.name || ''} task:`, chalk.cyan(tk));\r\n\r\n        gulp.task(tk, () => {\r\n            return this.execute(context, gulp);\r\n        });\r\n\r\n        this.info.taskName = tk;\r\n\r\n        return tk;\r\n    }\r\n}\r\n"]}