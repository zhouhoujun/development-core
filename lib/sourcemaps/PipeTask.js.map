{"version":3,"sources":["PipeTask.js","PipeTask.ts"],"names":["TaskConfig_1","require","utils_1","coregulp","chalk","_","PipeTask","info","_classCallCheck","this","runWay","RunWay","parallel","operateFileds","name","ctx","dist","gulp","option","source","isFunction","loader","src","getSrc","getInfo","pipes","filter","p","opps","length","concat","isString","isArray","output","stream","pipe","dest","getDist","_this","cfgopt","prsrc","oper","getTransformOperate","cpipe2Promise","then","setTransformOperate","context","trsOperate","isOutput","arguments","undefined","endsWith","toStr","noneOutput","nonePipe","opt","Promise","resolve","reject","ps","err","pick","operate","each","n","isUndefined","_this2","subTaskName","all","map","match","toTransform","trs","order","tanseq","tans","sortOrder","it","transformSourcePipe","transformPipe","_this3","outputs","once","result","removeAllListeners","_this4","psrc","customPipe","pipes2Promise","output2Promise","catch","console","log","red","process","exit","_this5","getOption","working","st","sequence","_ret","pthen","v","_typeof","_this6","tk","cyan","task","execute","taskName","exports"],"mappings":"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","file":"../PipeTask.js","sourcesContent":["\"use strict\";\nconst TaskConfig_1 = require('./TaskConfig');\nconst utils_1 = require('./utils');\nconst coregulp = require('gulp');\nconst chalk = require('chalk');\nconst _ = require('lodash');\n/**\n * Task base class.\n *\n * @export\n * @class Task\n * @implements {ITask}\n */\nclass PipeTask {\n    constructor(info) {\n        /**\n         * run mutil source stream way. default parallel.\n         *\n         *\n         * @memberOf PipeTask\n         */\n        this.runWay = TaskConfig_1.RunWay.parallel;\n        this.operateFileds = ['name', 'oper', 'order', 'nonePipe', 'noneOutput'];\n        this.info = info || {};\n        this.info.name = this.info.name || this.name;\n    }\n    /**\n     * get task info.\n     *\n     * @type {ITaskInfo}\n     * @memberOf PipeTask\n     */\n    getInfo() {\n        if (!this.info.name) {\n            this.info.name = this.name;\n        }\n        return this.info;\n    }\n    /**\n     * source streams.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} option\n     * @param {Gulp} gulp\n     * @returns {(TransformSource | Promise<TransformSource>)}\n     *\n     * @memberOf PipeTask\n     */\n    source(ctx, dist, gulp) {\n        let option = ctx.option;\n        if (option.source) {\n            return _.isFunction(option.source) ? option.source(ctx, dist, gulp) : option.source;\n        }\n        let loader = option['loader'];\n        if (loader && option.source) {\n            return _.isFunction(loader.source) ? loader.source(ctx, dist, gulp) : loader.source;\n        }\n        return gulp.src(ctx.getSrc(this.getInfo()));\n    }\n    /**\n     * task pipe works.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} [gulp]\n     * @returns {Pipe[]}\n     *\n     * @memberOf PipeTask\n     */\n    pipes(ctx, dist, gulp) {\n        let option = ctx.option;\n        let pipes = null;\n        let loader = option['loader'];\n        if (loader && _.isFunction(loader.pipes)) {\n            pipes = _.isFunction(loader.pipes) ? loader.pipes(ctx, option, gulp) : _.filter(loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n        }\n        if (option.pipes) {\n            let opps = _.isFunction(option.pipes) ? option.pipes(ctx, option, gulp) : _.filter(option.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            if (opps && opps.length > 0) {\n                pipes = pipes ? pipes.concat(opps) : opps;\n            }\n        }\n        return pipes || [];\n    }\n    /**\n     * output pipes.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} [gulp]\n     * @returns {OutputPipe[]}\n     *\n     * @memberOf PipeTask\n     */\n    output(ctx, dist, gulp) {\n        let option = ctx.option;\n        let pipes = null;\n        let loader = option['loader'];\n        if (loader && !_.isString(loader) && !_.isArray(loader)) {\n            if (loader.output) {\n                pipes = _.isFunction(loader.output) ? loader.output(ctx, option, gulp) : _.filter(loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            }\n            else if (loader.output === null) {\n                return [(stream) => stream];\n            }\n        }\n        if (option.output) {\n            let opps = _.isFunction(option.output) ? option.output(ctx, option, gulp) : _.filter(option.output, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            if (opps && opps.length > 0) {\n                pipes = pipes ? pipes.concat(opps) : opps;\n            }\n        }\n        else if (option.output === null) {\n            return [(stream) => stream];\n        }\n        return pipes || [(stream) => stream.pipe(gulp.dest(ctx.getDist(dist)))];\n    }\n    /**\n     *  custom pipe Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} ctx\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    customPipe(source, ctx, dist, gulp) {\n        let cfgopt = ctx.option;\n        let loader = cfgopt['loader'];\n        let prsrc;\n        let oper = this.getTransformOperate(source);\n        if (cfgopt.pipe) {\n            prsrc = this.cpipe2Promise(source, cfgopt, ctx, dist, gulp);\n        }\n        if (loader && !_.isString(loader) && !_.isArray(loader) && loader.pipe) {\n            prsrc = prsrc ?\n                prsrc.then(stream => {\n                    this.setTransformOperate(stream, oper);\n                    return this.cpipe2Promise(stream, loader, ctx, dist, gulp);\n                })\n                : this.cpipe2Promise(source, loader, ctx, dist, gulp);\n        }\n        if (prsrc) {\n            return prsrc.then(stream => {\n                this.setTransformOperate(stream, oper);\n                return stream;\n            });\n        }\n        return source;\n    }\n    /**\n     * get option.\n     *\n     * @protected\n     * @param {ITaskContext} context\n     * @returns {IAssertDist}\n     *\n     * @memberOf PipeTask\n     */\n    getOption(context) {\n        return context.option;\n    }\n    /**\n     * match pipe Operate\n     *\n     * @protected\n     * @param {IOperate} p\n     * @param {string} name\n     * @param {ITaskContext} ctx\n     * @param {IOperate} [trsOperate]\n     * @param {boolean} [isOutput=false]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    match(p, name, ctx, trsOperate, isOutput = false) {\n        if (!p) {\n            return false;\n        }\n        if (p.name && !name.endsWith(ctx.toStr(p.name))) {\n            return false;\n        }\n        if (p.oper && (p.oper & ctx.oper) <= 0) {\n            return false;\n        }\n        if (isOutput && p.noneOutput) {\n            return false;\n        }\n        else if (!isOutput && p.nonePipe) {\n            return false;\n        }\n        if (trsOperate) {\n            if (trsOperate.name && !name.endsWith(ctx.toStr(trsOperate.name))) {\n                return false;\n            }\n            if (trsOperate.oper && (trsOperate.oper & ctx.oper) <= 0) {\n                return false;\n            }\n            if (isOutput && trsOperate.noneOutput) {\n                return false;\n            }\n            else if (!isOutput && trsOperate.nonePipe) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * convert custom pipe result to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ICustomPipe} opt\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    cpipe2Promise(source, opt, context, dist, gulp) {\n        return new Promise((resolve, reject) => {\n            let ps = opt.pipe(source, context, dist, gulp, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n            if (ps) {\n                Promise.resolve(ps).then(resolve, reject);\n            }\n        });\n    }\n    /**\n     * get transform Operate.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @returns {IOperate}\n     *\n     * @memberOf PipeTask\n     */\n    getTransformOperate(source) {\n        return _.pick(source, this.operateFileds);\n    }\n    /**\n     * set transform Operate.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {IOperate} operate\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    setTransformOperate(source, operate) {\n        if (!source) {\n            return;\n        }\n        _.each(this.operateFileds, n => {\n            if (!_.isUndefined(operate[n])) {\n                source[n] = operate[n];\n            }\n        });\n    }\n    /**\n     * covert pipes transform to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @param {Pipe[]} [pipes]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    pipes2Promise(source, ctx, dist, gulp, pipes) {\n        let name = ctx.subTaskName(dist, this.name);\n        let oper = this.getTransformOperate(source);\n        return Promise.all(_.map(pipes || this.pipes(ctx, dist, gulp), (p) => {\n            if (_.isFunction(p)) {\n                return p(ctx, dist, gulp);\n            }\n            else {\n                if (!this.match(p, name, ctx, oper)) {\n                    return null;\n                }\n                else {\n                    return Promise.resolve(p.toTransform(ctx, dist, gulp))\n                        .then(trs => {\n                        trs.order = p.order;\n                        return trs;\n                    });\n                }\n            }\n        }))\n            .then(tanseq => {\n            let tans = utils_1.sortOrder(tanseq, it => it.order, ctx, true);\n            _.each(tans, (stream) => {\n                if (!this.match(stream, name, ctx, oper)) {\n                    return;\n                }\n                if (_.isFunction(stream.transformSourcePipe)) {\n                    source = stream.transformSourcePipe(source);\n                }\n                else if (_.isFunction(source.transformPipe)) {\n                    source = source.transformPipe(stream);\n                }\n                else {\n                    source = source.pipe(stream);\n                }\n            });\n            this.setTransformOperate(source, oper);\n            return source;\n        });\n    }\n    /**\n     * output pipes transform to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @param {OutputPipe[]} [output]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    output2Promise(source, context, dist, gulp, output) {\n        let name = context.subTaskName(dist, this.name);\n        let oper = this.getTransformOperate(source);\n        let outputs = output || this.output(context, dist, gulp);\n        return Promise.all(_.map(outputs, output => {\n            if (_.isFunction(output)) {\n                return output(source, context, dist, gulp);\n            }\n            else {\n                if (!this.match(output, name, context, oper, true)) {\n                    return null;\n                }\n                else {\n                    return output.toTransform(source, context, dist, gulp);\n                }\n            }\n        }))\n            .then(outputs => {\n            return Promise.all(_.map(outputs, output => {\n                return new Promise((resolve, reject) => {\n                    if (output) {\n                        output\n                            .once('end', () => {\n                            resolve(output);\n                        })\n                            .once('error', reject);\n                    }\n                    else {\n                        resolve();\n                    }\n                }).then(result => {\n                    output.removeAllListeners('error');\n                    output.removeAllListeners('end');\n                    return result;\n                });\n            }));\n        });\n    }\n    /**\n     * each one source stream works.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} ctx\n     * @param {IAssertDist} option\n     * @param {Gulp} gulp\n     * @param {Pipe[]} [pipes]\n     * @param {OutputPipe[]} [output]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    working(source, ctx, option, gulp, pipes, output) {\n        return Promise.resolve(source)\n            .then(psrc => this.customPipe(psrc, ctx, option, gulp))\n            .then(psrc => this.pipes2Promise(psrc, ctx, option, gulp, pipes))\n            .then(psrc => this.output2Promise(psrc, ctx, option, gulp, output))\n            .catch(err => {\n            console.log(chalk.red(err));\n            process.exit(0);\n        });\n    }\n    /**\n     * execute task working\n     *\n     * @param {ITaskContext} context\n     * @param {Gulp} gulp\n     * @returns {Promise<any>}\n     *\n     * @memberOf PipeTask\n     */\n    execute(context, gulp) {\n        let option = this.getOption(context);\n        return Promise.resolve(this.source(context, option, gulp))\n            .then(stream => {\n            if (_.isArray(stream)) {\n                if (this.runWay === TaskConfig_1.RunWay.parallel) {\n                    return Promise.all(_.map(stream, st => this.working(st, context, option, gulp)));\n                }\n                else if (this.runWay === TaskConfig_1.RunWay.sequence) {\n                    let pthen;\n                    _.each(stream, st => {\n                        if (!pthen) {\n                            pthen = this.working(st, context, option, gulp);\n                        }\n                        else {\n                            pthen = pthen.then(() => {\n                                return this.working(st, context, option, gulp);\n                            });\n                        }\n                    });\n                    return pthen;\n                }\n                else {\n                    return Promise.reject('runWay setting error.');\n                }\n            }\n            else {\n                return this.working(stream, context, option, gulp);\n            }\n        });\n    }\n    /**\n     * setup task works.\n     *\n     * @param {ITaskContext} context\n     * @param {Gulp} [gulp]\n     * @returns {TaskResult}\n     *\n     * @memberOf PipeTask\n     */\n    setup(context, gulp) {\n        gulp = gulp || coregulp;\n        // let option = this.getOption(context);\n        let tk = context.subTaskName(this.getInfo());\n        console.log(`register ${this.name || ''} task:`, chalk.cyan(tk));\n        gulp.task(tk, () => {\n            return this.execute(context, gulp);\n        });\n        this.info.taskName = tk;\n        return tk;\n    }\n}\nexports.PipeTask = PipeTask;\n","import { Gulp } from 'gulp';\r\nimport { TransformSource, RunWay, IAssertDist, ITaskInfo, TaskResult, ITaskContext, IOperate, ICustomPipe, Pipe, OutputPipe, ITask, ITransform, IPipeOption } from './TaskConfig';\r\nimport { sortOrder } from './utils';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport * as _ from 'lodash';\r\n\r\n/**\r\n * pipe task.\r\n * \r\n * @export\r\n * @interface IPipeWork\r\n */\r\nexport interface IPipeTask extends ITask {\r\n    /**\r\n     * task default name.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IPipeTask\r\n     */\r\n    name: string;\r\n    /**\r\n     * gulp src stream.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns {(TransformSource | Promise<TransformSource>)}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    source(context: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource>;\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {Pipe[]}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    pipes(context: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[];\r\n\r\n    /**\r\n     * output pipes.\r\n     * \r\n     * @param {ITaskContext} [context]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {OutputPipe[]}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    output(context: ITaskContext, dist: IAssertDist, gulp?: Gulp): OutputPipe[];\r\n    /**\r\n     * execute task works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} gulp\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    execute(context: ITaskContext, gulp: Gulp): Promise<any>;\r\n}\r\n\r\n/**\r\n * Task base class.\r\n * \r\n * @export\r\n * @class Task\r\n * @implements {ITask}\r\n */\r\nexport abstract class PipeTask implements IPipeTask {\r\n    /**\r\n     * run mutil source stream way. default parallel.\r\n     * \r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    public runWay = RunWay.parallel;\r\n    /**\r\n     * task default name.\r\n     * \r\n     * @type {string}\r\n     * @memberOf PipeTask\r\n     */\r\n    name: string;\r\n\r\n\r\n    constructor(info?: ITaskInfo) {\r\n        this.info = info || {};\r\n        this.info.name = this.info.name || this.name;\r\n    }\r\n\r\n    protected info: ITaskInfo;\r\n\r\n    /**\r\n     * get task info.\r\n     * \r\n     * @type {ITaskInfo}\r\n     * @memberOf PipeTask\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        if (!this.info.name) {\r\n            this.info.name = this.name;\r\n        }\r\n        return this.info;\r\n    }\r\n\r\n    /**\r\n     * source streams.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} option\r\n     * @param {Gulp} gulp\r\n     * @returns {(TransformSource | Promise<TransformSource>)}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        let option = ctx.option;\r\n        if (option.source) {\r\n            return _.isFunction(option.source) ? option.source(ctx, dist, gulp) : option.source;\r\n        }\r\n        let loader = <IPipeOption>option['loader'];\r\n        if (loader && option.source) {\r\n            return _.isFunction(loader.source) ? loader.source(ctx, dist, gulp) : loader.source;\r\n        }\r\n        return gulp.src(ctx.getSrc(this.getInfo()));\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {Pipe[]}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = ctx.option;\r\n        let pipes: Pipe[] = null;\r\n        let loader = <IPipeOption>option['loader'];\r\n        if (loader && _.isFunction(loader.pipes)) {\r\n            pipes = _.isFunction(loader.pipes) ? loader.pipes(ctx, option, gulp) : _.filter(<Pipe[]>loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n        }\r\n\r\n        if (option.pipes) {\r\n            let opps = _.isFunction(option.pipes) ? option.pipes(ctx, option, gulp) : _.filter(<Pipe[]>option.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            if (opps && opps.length > 0) {\r\n                pipes = pipes ? pipes.concat(opps) : opps;\r\n            }\r\n        }\r\n        return pipes || [];\r\n    }\r\n\r\n    /**\r\n     * output pipes.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {OutputPipe[]}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    output(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): OutputPipe[] {\r\n        let option = ctx.option;\r\n        let pipes: OutputPipe[] = null;\r\n        let loader = <IPipeOption>option['loader'];\r\n        if (loader && !_.isString(loader) && !_.isArray(loader)) {\r\n            if (loader.output) {\r\n                pipes = _.isFunction(loader.output) ? loader.output(ctx, option, gulp) : _.filter(<OutputPipe[]>loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            } else if (loader.output === null) {\r\n                return [(stream) => stream];\r\n            }\r\n        }\r\n        if (option.output) {\r\n            let opps = _.isFunction(option.output) ? option.output(ctx, option, gulp) : _.filter(<OutputPipe[]>option.output, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            if (opps && opps.length > 0) {\r\n                pipes = pipes ? pipes.concat(opps) : opps;\r\n            }\r\n        } else if (option.output === null) {\r\n            return [(stream) => stream];\r\n        }\r\n\r\n        return pipes || [(stream) => stream.pipe(gulp.dest(ctx.getDist(dist)))]\r\n    }\r\n\r\n    /**\r\n     *  custom pipe Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} ctx\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected customPipe(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp): ITransform | Promise<ITransform> {\r\n        let cfgopt = ctx.option;\r\n        let loader = <IPipeOption>cfgopt['loader'];\r\n        let prsrc: Promise<ITransform>;\r\n        let oper = this.getTransformOperate(source);\r\n        if (cfgopt.pipe) {\r\n            prsrc = this.cpipe2Promise(source, cfgopt, ctx, dist, gulp);\r\n        }\r\n        if (loader && !_.isString(loader) && !_.isArray(loader) && loader.pipe) {\r\n            prsrc = prsrc ?\r\n                prsrc.then(stream => {\r\n                    this.setTransformOperate(stream, oper);\r\n                    return this.cpipe2Promise(stream, loader, ctx, dist, gulp)\r\n                })\r\n                : this.cpipe2Promise(source, loader, ctx, dist, gulp);\r\n        }\r\n\r\n        if (prsrc) {\r\n            return prsrc.then(stream => {\r\n                this.setTransformOperate(stream, oper);\r\n                return stream;\r\n            });\r\n        }\r\n\r\n        return source;\r\n    }\r\n\r\n    /**\r\n     * get option.\r\n     * \r\n     * @protected\r\n     * @param {ITaskContext} context\r\n     * @returns {IAssertDist}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected getOption(context: ITaskContext): IAssertDist {\r\n        return context.option;\r\n    }\r\n\r\n    /**\r\n     * match pipe Operate\r\n     * \r\n     * @protected\r\n     * @param {IOperate} p\r\n     * @param {string} name\r\n     * @param {ITaskContext} ctx\r\n     * @param {IOperate} [trsOperate]\r\n     * @param {boolean} [isOutput=false]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected match(p: IOperate, name: string, ctx: ITaskContext, trsOperate?: IOperate, isOutput = false) {\r\n        if (!p) {\r\n            return false;\r\n        }\r\n        if (p.name && !name.endsWith(ctx.toStr(p.name))) {\r\n            return false;\r\n        }\r\n\r\n        if (p.oper && (p.oper & ctx.oper) <= 0) {\r\n            return false;\r\n        }\r\n\r\n        if (isOutput && p.noneOutput) {\r\n            return false;\r\n        } else if (!isOutput && p.nonePipe) {\r\n            return false;\r\n        }\r\n\r\n        if (trsOperate) {\r\n            if (trsOperate.name && !name.endsWith(ctx.toStr(trsOperate.name))) {\r\n                return false;\r\n            }\r\n            if (trsOperate.oper && (trsOperate.oper & ctx.oper) <= 0) {\r\n                return false;\r\n            }\r\n\r\n            if (isOutput && trsOperate.noneOutput) {\r\n                return false;\r\n            } else if (!isOutput && trsOperate.nonePipe) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * convert custom pipe result to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ICustomPipe} opt\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected cpipe2Promise(source: ITransform, opt: ICustomPipe, context: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        return new Promise<ITransform>((resolve, reject) => {\r\n            let ps = opt.pipe(source, context, dist, gulp, (err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n            if (ps) {\r\n                Promise.resolve(ps).then(resolve, reject);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    protected operateFileds = ['name', 'oper', 'order', 'nonePipe', 'noneOutput'];\r\n    /**\r\n     * get transform Operate.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @returns {IOperate}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected getTransformOperate(source: ITransform): IOperate {\r\n        return _.pick(source, this.operateFileds);\r\n    }\r\n\r\n    /**\r\n     * set transform Operate.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {IOperate} operate\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected setTransformOperate(source: ITransform, operate: IOperate) {\r\n        if (!source) {\r\n            return;\r\n        }\r\n        _.each(this.operateFileds, n => {\r\n            if (!_.isUndefined(operate[n])) {\r\n                source[n] = operate[n];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * covert pipes transform to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @param {Pipe[]} [pipes]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected pipes2Promise(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp, pipes?: Pipe[]) {\r\n        let name = ctx.subTaskName(dist, this.name);\r\n        let oper = this.getTransformOperate(source);\r\n        return Promise.all(_.map(pipes || this.pipes(ctx, dist, gulp), (p: Pipe) => {\r\n            if (_.isFunction(p)) {\r\n                return p(ctx, dist, gulp);\r\n            } else {\r\n                if (!this.match(p, name, ctx, oper)) {\r\n                    return null;\r\n                } else {\r\n                    return Promise.resolve(p.toTransform(ctx, dist, gulp))\r\n                        .then(trs => {\r\n                            trs.order = p.order;\r\n                            return trs;\r\n                        });\r\n                }\r\n            }\r\n        }))\r\n            .then(tanseq => {\r\n\r\n                let tans = sortOrder<ITransform>(tanseq, it => it.order, ctx, true);\r\n\r\n                _.each(tans, (stream: ITransform) => {\r\n                    if (!this.match(stream, name, ctx, oper)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (_.isFunction(stream.transformSourcePipe)) {\r\n                        source = stream.transformSourcePipe(source);\r\n                    } else if (_.isFunction(source.transformPipe)) {\r\n                        source = source.transformPipe(stream);\r\n                    } else {\r\n                        source = source.pipe(stream);\r\n                    }\r\n                });\r\n                this.setTransformOperate(source, oper);\r\n                return source;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * output pipes transform to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @param {OutputPipe[]} [output]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected output2Promise(source: ITransform, context: ITaskContext, dist: IAssertDist, gulp: Gulp, output?: OutputPipe[]) {\r\n        let name = context.subTaskName(dist, this.name);\r\n        let oper = this.getTransformOperate(source);\r\n        let outputs = output || this.output(context, dist, gulp);\r\n        return Promise.all(_.map(outputs, output => {\r\n            if (_.isFunction(output)) {\r\n                return output(source, context, dist, gulp);\r\n            } else {\r\n                if (!this.match(output, name, context, oper, true)) {\r\n                    return null;\r\n                } else {\r\n                    return output.toTransform(source, context, dist, gulp);\r\n                }\r\n            }\r\n        }))\r\n            .then(outputs => {\r\n                return Promise.all(_.map(outputs, output => {\r\n                    return new Promise((resolve, reject) => {\r\n                        if (output) {\r\n                            output\r\n                                .once('end', () => {\r\n                                    resolve(output);\r\n                                })\r\n                                .once('error', reject);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    }).then(result => {\r\n                        output.removeAllListeners('error');\r\n                        output.removeAllListeners('end');\r\n                        return result;\r\n                    });\r\n                }));\r\n            })\r\n    }\r\n\r\n    /**\r\n     * each one source stream works.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} ctx\r\n     * @param {IAssertDist} option\r\n     * @param {Gulp} gulp\r\n     * @param {Pipe[]} [pipes]\r\n     * @param {OutputPipe[]} [output]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected working(source: ITransform, ctx: ITaskContext, option: IAssertDist, gulp: Gulp, pipes?: Pipe[], output?: OutputPipe[]) {\r\n        return Promise.resolve(source)\r\n            .then(psrc => this.customPipe(psrc, ctx, option, gulp))\r\n            .then(psrc => this.pipes2Promise(psrc, ctx, option, gulp, pipes))\r\n            .then(psrc => this.output2Promise(psrc, ctx, option, gulp, output))\r\n            .catch(err => {\r\n                console.log(chalk.red(err));\r\n                process.exit(0);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * execute task working\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} gulp\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    execute(context: ITaskContext, gulp: Gulp): Promise<any> {\r\n        let option = this.getOption(context);\r\n        return Promise.resolve(this.source(context, option, gulp))\r\n            .then(stream => {\r\n                if (_.isArray(stream)) {\r\n                    if (this.runWay === RunWay.parallel) {\r\n                        return Promise.all(_.map(stream, st => this.working(st, context, option, gulp)));\r\n                    } else if (this.runWay === RunWay.sequence) {\r\n                        let pthen: Promise<any>;\r\n                        _.each(stream, st => {\r\n                            if (!pthen) {\r\n                                pthen = this.working(st, context, option, gulp);\r\n                            } else {\r\n                                pthen = pthen.then(() => {\r\n                                    return this.working(st, context, option, gulp);\r\n                                });\r\n                            }\r\n                        });\r\n                        return pthen;\r\n                    } else {\r\n                        return Promise.reject('runWay setting error.');\r\n                    }\r\n                } else {\r\n                    return this.working(stream, context, option, gulp);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * setup task works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} [gulp]\r\n     * @returns {TaskResult}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    setup(context: ITaskContext, gulp?: Gulp): TaskResult {\r\n        gulp = gulp || coregulp;\r\n        // let option = this.getOption(context);\r\n        let tk = context.subTaskName(this.getInfo());\r\n        console.log(`register ${this.name || ''} task:`, chalk.cyan(tk));\r\n\r\n        gulp.task(tk, () => {\r\n            return this.execute(context, gulp);\r\n        });\r\n\r\n        this.info.taskName = tk;\r\n\r\n        return tk;\r\n    }\r\n}\r\n"]}