{"version":3,"sources":["PipeTask.js","PipeTask.ts"],"names":["utils_1","require","coregulp","chalk","_","RunWay","exports","PipeTask","info","runWay","parallel","name","context","dist","gulp","option","pipes","source","isFunction","loader","filter","p","src","getSrc","getInfo","opps","length","concat","ctx","isString","isArray","output","stream","pipe","dest","getDist","endsWith","taskStringVal","oper","env","opt","Promise","resolve","reject","ps","err","then","subTaskName","all","map","match","toTransform","trs","order","len","tans","orderBy","t","isNumber","each","transformSourcePipe","transformPipe","outputs","once","cfgopt","prsrc","cpipe2Promise","customPipe","psrc","pipes2Promise","output2Promise","catch","console","log","red","process","exit","getOption","working","st","sequence","pthen","tk","cyan","task","execute","taskName"],"mappings":"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","file":"../PipeTask.js","sourcesContent":["\"use strict\";\nconst utils_1 = require('./utils');\nconst coregulp = require('gulp');\nconst chalk = require('chalk');\nconst _ = require('lodash');\n/**\n * mutil source stream pipe task run way.\n *\n * @export\n * @enum {number}\n */\n(function (RunWay) {\n    /**\n     * run mutil source stream by sequence.\n     */\n    RunWay[RunWay[\"sequence\"] = 1] = \"sequence\";\n    /**\n     * run mutil source stream by parallel.\n     */\n    RunWay[RunWay[\"parallel\"] = 2] = \"parallel\";\n})(exports.RunWay || (exports.RunWay = {}));\nvar RunWay = exports.RunWay;\n/**\n * Task base class.\n *\n * @export\n * @class Task\n * @implements {ITask}\n */\nclass PipeTask {\n    constructor(info) {\n        /**\n         * run mutil source stream way. default parallel.\n         *\n         *\n         * @memberOf PipeTask\n         */\n        this.runWay = RunWay.parallel;\n        this.info = info || {};\n        this.info.name = this.info.name || this.name;\n    }\n    /**\n     * get task info.\n     *\n     * @type {ITaskInfo}\n     * @memberOf PipeTask\n     */\n    getInfo() {\n        if (!this.info.name) {\n            this.info.name = this.name;\n        }\n        return this.info;\n    }\n    /**\n     * source streams.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} option\n     * @param {Gulp} gulp\n     * @returns {(TransformSource | Promise<TransformSource>)}\n     *\n     * @memberOf PipeTask\n     */\n    source(context, dist, gulp) {\n        let option = context.option;\n        let pipes = null;\n        if (option.source) {\n            return _.isFunction(option.source) ? option.source(context, dist, gulp) : option.source;\n        }\n        let loader = option.loader;\n        if (loader && _.isFunction(loader.pipes)) {\n            pipes = _.isFunction(loader.pipes) ? loader.pipes(context, option, gulp) : _.filter(loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n        }\n        return gulp.src(context.getSrc(this.getInfo()));\n    }\n    /**\n     * task pipe works.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} [gulp]\n     * @returns {Pipe[]}\n     *\n     * @memberOf PipeTask\n     */\n    pipes(context, dist, gulp) {\n        let option = context.option;\n        let pipes = null;\n        let loader = option.loader;\n        if (loader && _.isFunction(loader.pipes)) {\n            pipes = _.isFunction(loader.pipes) ? loader.pipes(context, option, gulp) : _.filter(loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n        }\n        if (option.pipes) {\n            let opps = _.isFunction(option.pipes) ? option.pipes(context, option, gulp) : _.filter(option.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            if (opps && opps.length > 0) {\n                pipes = pipes ? pipes.concat(opps) : opps;\n            }\n        }\n        return pipes || [];\n    }\n    /**\n     * output pipes.\n     *\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} [gulp]\n     * @returns {OutputPipe[]}\n     *\n     * @memberOf PipeTask\n     */\n    output(ctx, dist, gulp) {\n        let option = ctx.option;\n        let pipes = null;\n        let loader = option.loader;\n        if (loader && !_.isString(loader) && !_.isArray(loader)) {\n            if (loader.output) {\n                pipes = _.isFunction(loader.output) ? loader.output(ctx, option, gulp) : _.filter(loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            }\n            else if (loader.output === null) {\n                return [(stream) => stream];\n            }\n        }\n        if (option.output) {\n            let opps = _.isFunction(option.output) ? option.output(ctx, option, gulp) : _.filter(option.output, p => _.isFunction(p) || (p.name && p.name === dist.name));\n            if (opps && opps.length > 0) {\n                pipes = pipes ? pipes.concat(opps) : opps;\n            }\n        }\n        else if (option.output === null) {\n            return [(stream) => stream];\n        }\n        return pipes || [(stream) => stream.pipe(gulp.dest(ctx.getDist(dist)))];\n    }\n    /**\n     * get option.\n     *\n     * @protected\n     * @param {ITaskContext} context\n     * @returns {IAssertDist}\n     *\n     * @memberOf PipeTask\n     */\n    getOption(context) {\n        return context.option;\n    }\n    /**\n     * match pipe Operate\n     *\n     * @param {IPipeOperate} p\n     * @param {string} name\n     * @param {ITaskContext} context\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    match(p, name, context) {\n        if (!p) {\n            return false;\n        }\n        if (p.name && !name.endsWith(utils_1.taskStringVal(p.name, context.oper, context.env))) {\n            return false;\n        }\n        if (p.oper && (p.oper & context.oper) <= 0) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * convert custom pipe result to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ICustomPipe} opt\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    cpipe2Promise(source, opt, context, dist, gulp) {\n        return new Promise((resolve, reject) => {\n            let ps = opt.pipe(source, context, dist, gulp, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n            if (ps) {\n                Promise.resolve(ps).then(resolve, reject);\n            }\n        });\n    }\n    /**\n     * covert pipes transform to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @param {Pipe[]} [pipes]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    pipes2Promise(source, ctx, dist, gulp, pipes) {\n        let name = ctx.subTaskName(dist, this.name);\n        return Promise.all(_.map(pipes || this.pipes(ctx, dist, gulp), (p) => {\n            if (_.isFunction(p)) {\n                return p(ctx, dist, gulp);\n            }\n            else {\n                if (!this.match(p, name, ctx)) {\n                    return null;\n                }\n                else {\n                    return Promise.resolve(p.toTransform(ctx, dist, gulp))\n                        .then(trs => {\n                        trs.order = p.order;\n                        // trs.oper = p.order;\n                        return trs;\n                    });\n                }\n            }\n        }))\n            .then(tans => {\n            let len = tans.length;\n            tans = _.orderBy(_.filter(tans, t => t), t => {\n                if (_.isArray(t)) {\n                    return len;\n                }\n                else {\n                    if (_.isNumber(t.order)) {\n                        return t.order;\n                    }\n                    return len;\n                }\n            });\n            _.each(tans, stream => {\n                if (!this.match(stream, name, ctx)) {\n                    return;\n                }\n                if (_.isFunction(stream.transformSourcePipe)) {\n                    source = stream.transformSourcePipe(source);\n                }\n                else if (_.isFunction(source.transformPipe)) {\n                    source = source.transformPipe(stream);\n                }\n                else {\n                    source = source.pipe(stream);\n                }\n            });\n            return source;\n        });\n    }\n    /**\n     * output pipes transform to Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @param {OutputPipe[]} [output]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    output2Promise(source, context, dist, gulp, output) {\n        let name = context.subTaskName(dist, this.name);\n        let outputs = output || this.output(context, dist, gulp);\n        return Promise.all(_.map(outputs, output => {\n            if (_.isFunction(output)) {\n                return output(source, context, dist, gulp);\n            }\n            else {\n                if (!this.match(output, name, context)) {\n                    return null;\n                }\n                else {\n                    return output.toTransform(source, context, dist, gulp);\n                }\n            }\n        }))\n            .then(outputs => {\n            return Promise.all(_.map(outputs, output => {\n                return new Promise((resolve, reject) => {\n                    if (output) {\n                        output\n                            .once('end', () => {\n                            resolve(output);\n                        })\n                            .once('error', reject);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            }));\n        });\n    }\n    /**\n     *  custom pipe Promise.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} context\n     * @param {IAssertDist} dist\n     * @param {Gulp} gulp\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    customPipe(source, context, dist, gulp) {\n        let cfgopt = context.option;\n        let loader = cfgopt.loader;\n        let prsrc;\n        if (cfgopt.pipe) {\n            prsrc = this.cpipe2Promise(source, cfgopt, context, dist, gulp);\n        }\n        if (loader && !_.isString(loader) && !_.isArray(loader) && loader.pipe) {\n            prsrc = prsrc ?\n                prsrc.then(stream => this.cpipe2Promise(stream, loader, context, dist, gulp))\n                : this.cpipe2Promise(source, loader, context, dist, gulp);\n        }\n        return prsrc || source;\n    }\n    /**\n     * each one source stream works.\n     *\n     * @protected\n     * @param {ITransform} source\n     * @param {ITaskContext} context\n     * @param {IAssertDist} option\n     * @param {Gulp} gulp\n     * @param {Pipe[]} [pipes]\n     * @param {OutputPipe[]} [output]\n     * @returns\n     *\n     * @memberOf PipeTask\n     */\n    working(source, context, option, gulp, pipes, output) {\n        return Promise.resolve(source)\n            .then(psrc => this.customPipe(psrc, context, option, gulp))\n            .then(psrc => this.pipes2Promise(psrc, context, option, gulp, pipes))\n            .then(psrc => this.output2Promise(psrc, context, option, gulp, output))\n            .catch(err => {\n            console.log(chalk.red(err));\n            process.exit(0);\n        });\n    }\n    /**\n     * execute task working\n     *\n     * @param {ITaskContext} context\n     * @param {Gulp} gulp\n     * @returns {Promise<any>}\n     *\n     * @memberOf PipeTask\n     */\n    execute(context, gulp) {\n        let option = this.getOption(context);\n        return Promise.resolve(this.source(context, option, gulp))\n            .then(stream => {\n            if (_.isArray(stream)) {\n                if (this.runWay === RunWay.parallel) {\n                    return Promise.all(_.map(stream, st => this.working(st, context, option, gulp)));\n                }\n                else if (this.runWay === RunWay.sequence) {\n                    let pthen;\n                    _.each(stream, st => {\n                        if (!pthen) {\n                            pthen = this.working(st, context, option, gulp);\n                        }\n                        else {\n                            pthen = pthen.then(() => {\n                                return this.working(st, context, option, gulp);\n                            });\n                        }\n                    });\n                    return pthen;\n                }\n                else {\n                    return Promise.reject('runWay setting error.');\n                }\n            }\n            else {\n                return this.working(stream, context, option, gulp);\n            }\n        });\n    }\n    /**\n     * setup task works.\n     *\n     * @param {ITaskContext} context\n     * @param {Gulp} [gulp]\n     * @returns {TaskResult}\n     *\n     * @memberOf PipeTask\n     */\n    setup(context, gulp) {\n        gulp = gulp || coregulp;\n        // let option = this.getOption(context);\n        let tk = context.subTaskName(this.getInfo());\n        console.log(`register ${this.name || ''} task:`, chalk.cyan(tk));\n        gulp.task(tk, () => {\n            return this.execute(context, gulp);\n        });\n        this.info.taskName = tk;\n        return tk;\n    }\n}\nexports.PipeTask = PipeTask;\n","import { Gulp } from 'gulp';\r\nimport { TransformSource, IAssertDist, ITaskInfo, TaskResult, ITaskContext, IOperate, ICustomPipe, Pipe, OutputPipe, ITask, ITransform, ILoaderOption } from './TaskConfig';\r\nimport { taskStringVal } from './utils';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport * as _ from 'lodash';\r\n\r\n/**\r\n * pipe task.\r\n * \r\n * @export\r\n * @interface IPipeWork\r\n */\r\nexport interface IPipeTask extends ITask {\r\n    /**\r\n     * task default name.\r\n     * \r\n     * @type {string}\r\n     * @memberOf IPipeTask\r\n     */\r\n    name: string;\r\n    /**\r\n     * gulp src stream.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns {(TransformSource | Promise<TransformSource>)}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    source(context: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource>;\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {Pipe[]}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    pipes(context: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[];\r\n\r\n    /**\r\n     * output pipes.\r\n     * \r\n     * @param {ITaskContext} [context]\r\n     * @param {Gulp} [gulp]\r\n     * @returns {OutputPipe[]}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    output(context: ITaskContext, dist: IAssertDist, gulp?: Gulp): OutputPipe[];\r\n    /**\r\n     * execute task works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} gulp\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf IPipeTask\r\n     */\r\n    execute(context: ITaskContext, gulp: Gulp): Promise<any>;\r\n}\r\n\r\n/**\r\n * mutil source stream pipe task run way.\r\n * \r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum RunWay {\r\n    /**\r\n     * run mutil source stream by sequence.\r\n     */\r\n    sequence = 1,\r\n    /**\r\n     * run mutil source stream by parallel.\r\n     */\r\n    parallel = 2\r\n}\r\n\r\n/**\r\n * Task base class.\r\n * \r\n * @export\r\n * @class Task\r\n * @implements {ITask}\r\n */\r\nexport abstract class PipeTask implements IPipeTask {\r\n    /**\r\n     * run mutil source stream way. default parallel.\r\n     * \r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    public runWay = RunWay.parallel;\r\n    /**\r\n     * task default name.\r\n     * \r\n     * @type {string}\r\n     * @memberOf PipeTask\r\n     */\r\n    name: string;\r\n\r\n\r\n    constructor(info?: ITaskInfo) {\r\n        this.info = info || {};\r\n        this.info.name = this.info.name || this.name;\r\n    }\r\n\r\n    protected info: ITaskInfo;\r\n\r\n    /**\r\n     * get task info.\r\n     * \r\n     * @type {ITaskInfo}\r\n     * @memberOf PipeTask\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        if (!this.info.name) {\r\n            this.info.name = this.name;\r\n        }\r\n        return this.info;\r\n    }\r\n\r\n    /**\r\n     * source streams.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} option\r\n     * @param {Gulp} gulp\r\n     * @returns {(TransformSource | Promise<TransformSource>)}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    source(context: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        let option = context.option;\r\n        let pipes: Pipe[] = null;\r\n        if (option.source) {\r\n            return _.isFunction(option.source) ? option.source(context, dist, gulp) : option.source;\r\n        }\r\n        let loader = <ILoaderOption>option.loader;\r\n        if (loader && _.isFunction(loader.pipes)) {\r\n            pipes = _.isFunction(loader.pipes) ? loader.pipes(context, option, gulp) : _.filter(<Pipe[]>loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n        }\r\n        return gulp.src(context.getSrc(this.getInfo()));\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * task pipe works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {Pipe[]}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    pipes(context: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = context.option;\r\n        let pipes: Pipe[] = null;\r\n        let loader = <ILoaderOption>option.loader;\r\n        if (loader && _.isFunction(loader.pipes)) {\r\n            pipes = _.isFunction(loader.pipes) ? loader.pipes(context, option, gulp) : _.filter(<Pipe[]>loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n        }\r\n\r\n        if (option.pipes) {\r\n            let opps = _.isFunction(option.pipes) ? option.pipes(context, option, gulp) : _.filter(<Pipe[]>option.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            if (opps && opps.length > 0) {\r\n                pipes = pipes ? pipes.concat(opps) : opps;\r\n            }\r\n        }\r\n        return pipes || [];\r\n    }\r\n\r\n    /**\r\n     * output pipes.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} [gulp]\r\n     * @returns {OutputPipe[]}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    output(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): OutputPipe[] {\r\n        let option = ctx.option;\r\n        let pipes: OutputPipe[] = null;\r\n        let loader = <ILoaderOption>option.loader;\r\n        if (loader && !_.isString(loader) && !_.isArray(loader)) {\r\n            if (loader.output) {\r\n                pipes = _.isFunction(loader.output) ? loader.output(ctx, option, gulp) : _.filter(<OutputPipe[]>loader.pipes, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            } else if (loader.output === null) {\r\n                return [(stream) => stream];\r\n            }\r\n        }\r\n        if (option.output) {\r\n            let opps = _.isFunction(option.output) ? option.output(ctx, option, gulp) : _.filter(<OutputPipe[]>option.output, p => _.isFunction(p) || (p.name && p.name === dist.name));\r\n            if (opps && opps.length > 0) {\r\n                pipes = pipes ? pipes.concat(opps) : opps;\r\n            }\r\n        } else if (option.output === null) {\r\n            return [(stream) => stream];\r\n        }\r\n\r\n        return pipes || [(stream) => stream.pipe(gulp.dest(ctx.getDist(dist)))]\r\n    }\r\n\r\n    /**\r\n     * get option.\r\n     * \r\n     * @protected\r\n     * @param {ITaskContext} context\r\n     * @returns {IAssertDist}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected getOption(context: ITaskContext): IAssertDist {\r\n        return context.option;\r\n    }\r\n\r\n    /**\r\n     * match pipe Operate\r\n     * \r\n     * @param {IPipeOperate} p\r\n     * @param {string} name\r\n     * @param {ITaskContext} context\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected match(p: IOperate, name: string, context: ITaskContext) {\r\n        if (!p) {\r\n            return false;\r\n        }\r\n        if (p.name && !name.endsWith(taskStringVal(p.name, context.oper, context.env))) {\r\n            return false;\r\n        }\r\n\r\n        if (p.oper && (p.oper & context.oper) <= 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * convert custom pipe result to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ICustomPipe} opt\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected cpipe2Promise(source: ITransform, opt: ICustomPipe, context: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        return new Promise<ITransform>((resolve, reject) => {\r\n            let ps = opt.pipe(source, context, dist, gulp, (err) => {\r\n                if (err) {\r\n                    reject(err);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n            if (ps) {\r\n                Promise.resolve(ps).then(resolve, reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * covert pipes transform to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @param {Pipe[]} [pipes]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected pipes2Promise(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp, pipes?: Pipe[]) {\r\n        let name = ctx.subTaskName(dist, this.name);\r\n        return Promise.all(_.map(pipes || this.pipes(ctx, dist, gulp), (p: Pipe) => {\r\n            if (_.isFunction(p)) {\r\n                return p(ctx, dist, gulp);\r\n            } else {\r\n                if (!this.match(p, name, ctx)) {\r\n                    return null;\r\n                } else {\r\n                    return Promise.resolve(p.toTransform(ctx, dist, gulp))\r\n                        .then(trs => {\r\n                            trs.order = p.order;\r\n                            // trs.oper = p.order;\r\n                            return trs;\r\n                        });\r\n                }\r\n            }\r\n        }))\r\n            .then(tans => {\r\n                let len = tans.length;\r\n                tans = _.orderBy(_.filter(tans, t => t), t => {\r\n                    if (_.isArray(t)) {\r\n                        return len;\r\n                    } else {\r\n                        if (_.isNumber(t.order)) {\r\n                            return t.order;\r\n                        }\r\n                        return len;\r\n                    }\r\n                });\r\n\r\n                _.each(tans, stream => {\r\n                    if (!this.match(stream, name, ctx)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (_.isFunction(stream.transformSourcePipe)) {\r\n                        source = stream.transformSourcePipe(source);\r\n                    } else if (_.isFunction(source.transformPipe)) {\r\n                        source = source.transformPipe(stream);\r\n                    } else {\r\n                        source = source.pipe(stream);\r\n                    }\r\n                });\r\n                return source;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * output pipes transform to Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @param {OutputPipe[]} [output]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected output2Promise(source: ITransform, context: ITaskContext, dist: IAssertDist, gulp: Gulp, output?: OutputPipe[]) {\r\n        let name = context.subTaskName(dist, this.name);\r\n        let outputs = output || this.output(context, dist, gulp);\r\n        return Promise.all(_.map(outputs, output => {\r\n            if (_.isFunction(output)) {\r\n                return output(source, context, dist, gulp);\r\n            } else {\r\n                if (!this.match(output, name, context)) {\r\n                    return null;\r\n                } else {\r\n                    return output.toTransform(source, context, dist, gulp);\r\n                }\r\n            }\r\n        }))\r\n            .then(outputs => {\r\n                return Promise.all(_.map(outputs, output => {\r\n                    return new Promise((resolve, reject) => {\r\n                        if (output) {\r\n                            output\r\n                                .once('end', () => {\r\n                                    resolve(output);\r\n                                })\r\n                                .once('error', reject);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    });\r\n                }));\r\n            })\r\n    }\r\n\r\n\r\n    /**\r\n     *  custom pipe Promise.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} dist\r\n     * @param {Gulp} gulp\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected customPipe(source: ITransform, context: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        let cfgopt = context.option;\r\n        let loader = <ILoaderOption>cfgopt.loader;\r\n        let prsrc: Promise<ITransform>;\r\n        if (cfgopt.pipe) {\r\n            prsrc = this.cpipe2Promise(source, cfgopt, context, dist, gulp);\r\n        }\r\n        if (loader && !_.isString(loader) && !_.isArray(loader) && loader.pipe) {\r\n            prsrc = prsrc ?\r\n                prsrc.then(stream => this.cpipe2Promise(stream, loader, context, dist, gulp))\r\n                : this.cpipe2Promise(source, loader, context, dist, gulp);\r\n        }\r\n\r\n        return prsrc || source;\r\n    }\r\n\r\n    /**\r\n     * each one source stream works.\r\n     * \r\n     * @protected\r\n     * @param {ITransform} source\r\n     * @param {ITaskContext} context\r\n     * @param {IAssertDist} option\r\n     * @param {Gulp} gulp\r\n     * @param {Pipe[]} [pipes]\r\n     * @param {OutputPipe[]} [output]\r\n     * @returns\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    protected working(source: ITransform, context: ITaskContext, option: IAssertDist, gulp: Gulp, pipes?: Pipe[], output?: OutputPipe[]) {\r\n        return Promise.resolve(source)\r\n            .then(psrc => this.customPipe(psrc, context, option, gulp))\r\n            .then(psrc => this.pipes2Promise(psrc, context, option, gulp, pipes))\r\n            .then(psrc => this.output2Promise(psrc, context, option, gulp, output))\r\n            .catch(err => {\r\n                console.log(chalk.red(err));\r\n                process.exit(0);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * execute task working\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} gulp\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    execute(context: ITaskContext, gulp: Gulp): Promise<any> {\r\n        let option = this.getOption(context);\r\n        return Promise.resolve(this.source(context, option, gulp))\r\n            .then(stream => {\r\n                if (_.isArray(stream)) {\r\n                    if (this.runWay === RunWay.parallel) {\r\n                        return Promise.all(_.map(stream, st => this.working(st, context, option, gulp)));\r\n                    } else if (this.runWay === RunWay.sequence) {\r\n                        let pthen: Promise<any>;\r\n                        _.each(stream, st => {\r\n                            if (!pthen) {\r\n                                pthen = this.working(st, context, option, gulp);\r\n                            } else {\r\n                                pthen = pthen.then(() => {\r\n                                    return this.working(st, context, option, gulp);\r\n                                });\r\n                            }\r\n                        });\r\n                        return pthen;\r\n                    } else {\r\n                        return Promise.reject('runWay setting error.');\r\n                    }\r\n                } else {\r\n                    return this.working(stream, context, option, gulp);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * setup task works.\r\n     * \r\n     * @param {ITaskContext} context\r\n     * @param {Gulp} [gulp]\r\n     * @returns {TaskResult}\r\n     * \r\n     * @memberOf PipeTask\r\n     */\r\n    setup(context: ITaskContext, gulp?: Gulp): TaskResult {\r\n        gulp = gulp || coregulp;\r\n        // let option = this.getOption(context);\r\n        let tk = context.subTaskName(this.getInfo());\r\n        console.log(`register ${this.name || ''} task:`, chalk.cyan(tk));\r\n\r\n        gulp.task(tk, () => {\r\n            return this.execute(context, gulp);\r\n        });\r\n\r\n        this.info.taskName = tk;\r\n\r\n        return tk;\r\n    }\r\n}\r\n"]}