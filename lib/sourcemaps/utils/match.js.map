{"version":3,"sources":["utils/match.ts"],"names":["matchCompare","ctx","tinfo","match","matchTaskInfo","matchTaskGroup","contains","arr1","arr2","some","arr2Item","indexOf","convertMatchOper","matchOper","to","oper","Operation_1","Operation","test","release","build","e2e","deploy","decor","oper_1","convertOper","decorOper","eq","watch","serve","group","_","isString","isArray","require","exports"],"mappings":"YAiBA,SAAAA,cAA6BC,EAAmBC,EAAuBC,GAEnE,QAAKC,cAAcH,EAAKC,EAAOC,MAI1BE,eAAeH,EAAOC,GAO/B,QAAAG,UAAkBC,EAAgBC,GAC9B,MAAOA,GAAKC,KAAK,SAAAC,GAAY,MAAAH,GAAKI,QAAQD,IAAa,IAK3D,QAAAE,kBAA0BX,EAAmBE,GACzC,GAAIU,GAAYZ,EAAIa,GAAGX,EAAMY,KAc7B,OAbKF,GAAYG,YAAAC,UAAUC,QAAWL,EAAYG,YAAAC,UAAUE,WACxDN,GAAwBG,YAAAC,UAAUG,OAEjCP,EAAYG,YAAAC,UAAUI,OAAUR,EAAYG,YAAAC,UAAUE,WACvDN,GAAwBG,YAAAC,UAAUG,OAElCP,EAAYG,YAAAC,UAAUK,SACtBT,EAAYA,EAAYG,YAAAC,UAAUC,KAAOF,YAAAC,UAAUI,KAEnDR,EAAYG,YAAAC,UAAUE,UACtBN,GAAwBG,YAAAC,UAAUC,MAEtCf,EAAMY,KAAOF,EACNV,EAWX,QAAAC,eAAuBH,EAAmBsB,EAAuBpB,GAK7D,GAHAA,EAAQqB,OAAAC,YAAYtB,EAAOa,YAAAC,UAAUG,OACrCG,EAAQC,OAAAC,YAAYF,GAEhBpB,EAAMA,MACN,MAAOA,GAAMA,MAAMoB,EAChB,IAAIA,EAAMpB,MACb,MAAOoB,GAAMpB,MAAMA,EAEnBA,GAAQS,iBAAiBX,EAAKE,EAGlC,IAAIuB,GAAYzB,EAAIa,GAAGS,EAAMR,MACzBF,EAAYZ,EAAIa,GAAGX,EAAMY,MACzBY,EAAKD,EAAYb,CAErB,IAAIc,GAAM,EACN,OAAO,CAGX,IAAID,EAAYV,YAAAC,UAAUW,MAAO,CAC7B,IAAKf,EAAYG,YAAAC,UAAUW,QAAU,EACjC,OAAO,CAEP,IAAID,GAAMX,YAAAC,UAAUW,MAChB,OAAO,EAKnB,GAAIF,EAAYV,YAAAC,UAAUY,MAAO,CAC7B,KAAMhB,EAAYG,YAAAC,UAAUY,OACxB,OAAO,CAEP,IAAIF,GAAMX,YAAAC,UAAUY,MAChB,OAAO,EAKnB,GAAIH,EAAYV,YAAAC,UAAUC,KAAM,CAC5B,KAAML,EAAYG,YAAAC,UAAUC,MACxB,OAAO,CAEP,IAAIS,GAAMX,YAAAC,UAAUC,KAChB,OAAO,EAKnB,GAAIQ,EAAYV,YAAAC,UAAUI,IAAK,CAC3B,KAAMR,EAAYG,YAAAC,UAAUI,KACxB,OAAO,CAEP,IAAIM,GAAMX,YAAAC,UAAUI,IAChB,OAAO,EAKnB,OAAO,EAGX,QAAAhB,gBAAwBH,EAAkBC,GACtC,GAAID,EAAM4B,OAAS3B,GAASA,EAAM2B,OAC9B,GAAIC,EAAEC,SAAS7B,EAAM2B,OAAQ,CACzB,GAAIC,EAAEC,SAAS9B,EAAM4B,QAAU5B,EAAM4B,QAAU3B,EAAM2B,MACjD,OAAO,CACJ,IAAIC,EAAEE,QAAQ/B,EAAM4B,QAAU5B,EAAM4B,MAAMnB,QAAQR,EAAM2B,OAAS,EACpE,OAAO,MAER,IAAIC,EAAEE,QAAQ9B,EAAM2B,OAAQ,CAC/B,GAAIC,EAAEC,SAAS9B,EAAM4B,QAAU3B,EAAM2B,MAAMnB,QAAQT,EAAM4B,OAAS,EAC9D,OAAO,CACJ,IAAIC,EAAEE,QAAQ/B,EAAM4B,SAAWxB,SAASJ,EAAM4B,MAAO3B,EAAM2B,OAC9D,OAAO,OAGZ,CAAA,GAAI5B,EAAM4B,MACb,OAAO,CACJ,IAAI3B,GAASA,EAAM2B,MACtB,OAAO,EAGX,OAAO,wDAnJX,IAAAC,GAAAG,QAAA,UAGAlB,YAAAkB,QAAA,gBACAV,OAAAU,QAAA,SAaAC,SAAAnC,aAAAA","file":"../../utils/match.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { ITaskContext } from '../ITaskContext';\r\nimport { ITaskInfo } from '../ITask';\r\nimport { Operation } from '../Operation';\r\nimport { convertOper } from './oper';\r\nimport { ITaskDecorator } from '../ITaskDecorator';\r\n\r\n\r\n/**\r\n * match\r\n *\r\n * @export\r\n * @param {ITaskContext} ctx\r\n * @param {ITaskDecorator} tinfo\r\n * @param {ITaskDecorator} match\r\n * @returns\r\n */\r\nexport function matchCompare(ctx: ITaskContext, tinfo: ITaskDecorator, match: ITaskDecorator) {\r\n\r\n    if (!matchTaskInfo(ctx, tinfo, match)) {\r\n        return false;\r\n    }\r\n\r\n    if (!matchTaskGroup(tinfo, match)) {\r\n        return false;\r\n    }\r\n    return true;\r\n\r\n}\r\n\r\nfunction contains(arr1: string[], arr2: string[]) {\r\n    return arr2.some(arr2Item => arr1.indexOf(arr2Item) >= 0);\r\n}\r\n\r\n\r\n\r\nfunction convertMatchOper(ctx: ITaskContext, match: ITaskDecorator) {\r\n    let matchOper = ctx.to(match.oper);\r\n    if ((matchOper & Operation.test) && !(matchOper & Operation.release)) {\r\n        matchOper = matchOper | Operation.build;\r\n    }\r\n    if ((matchOper & Operation.e2e) && !(matchOper & Operation.release)) {\r\n        matchOper = matchOper | Operation.build;\r\n    }\r\n    if (matchOper & Operation.deploy) {\r\n        matchOper = matchOper | Operation.test | Operation.e2e;\r\n    }\r\n    if (matchOper & Operation.release) {\r\n        matchOper = matchOper | Operation.test;\r\n    }\r\n    match.oper = matchOper;\r\n    return match;\r\n}\r\n\r\n/**\r\n * match task via task info.\r\n *\r\n * @param {ITaskContext} ctx\r\n * @param {ITaskDecorator} decor\r\n * @param {ITaskDecorator} match\r\n * @returns\r\n */\r\nfunction matchTaskInfo(ctx: ITaskContext, decor: ITaskDecorator, match: ITaskDecorator) {\r\n\r\n    match = convertOper(match, Operation.build);\r\n    decor = convertOper(decor);\r\n\r\n    if (match.match) {\r\n        return match.match(decor);\r\n    } else if (decor.match) {\r\n        return decor.match(match);\r\n    } else {\r\n        match = convertMatchOper(ctx, match);\r\n    }\r\n\r\n    let decorOper = ctx.to(decor.oper);\r\n    let matchOper = ctx.to(match.oper);\r\n    let eq = decorOper & matchOper;\r\n    // console.log('eq------->:', eq);\r\n    if (eq <= 0) {\r\n        return false;\r\n    }\r\n\r\n    if (decorOper & Operation.watch) {\r\n        if ((matchOper & Operation.watch) <= 0) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.watch) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decorOper & Operation.serve) {\r\n        if (!(matchOper & Operation.serve)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.serve) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decorOper & Operation.test) {\r\n        if (!(matchOper & Operation.test)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.test) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (decorOper & Operation.e2e) {\r\n        if (!(matchOper & Operation.e2e)) {\r\n            return false;\r\n        } else {\r\n            if (eq <= Operation.e2e) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction matchTaskGroup(tinfo: ITaskInfo, match: ITaskInfo): boolean {\r\n    if (tinfo.group && match && match.group) {\r\n        if (_.isString(match.group)) {\r\n            if (_.isString(tinfo.group) && tinfo.group !== match.group) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && tinfo.group.indexOf(match.group) < 0) {\r\n                return false;\r\n            }\r\n        } else if (_.isArray(match.group)) {\r\n            if (_.isString(tinfo.group) && match.group.indexOf(tinfo.group) < 0) {\r\n                return false;\r\n            } else if (_.isArray(tinfo.group) && !contains(tinfo.group, match.group)) {\r\n                return false;\r\n            }\r\n        }\r\n    } else if (tinfo.group) {\r\n        return false;\r\n    } else if (match && match.group) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n"]}