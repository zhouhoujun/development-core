{"version":3,"sources":["tasks/DynamicPipeTask.ts"],"names":["_","require","PipeTask_1","DynamicPipeTask","_super","dt","info","_this","call","this","assert","__extends","prototype","getOption","ctx","name","toStr","option","customPipe","source","dist","gulp","pipe","Promise","resolve","then","stream","cpipe2Promise","pipes","isFunction","concat","output","outputs","PipeTask","exports"],"mappings":"kZAGA,IAAAA,GAAAC,QAAA,UACAC,WAAAD,QAAA,eAoBAE,gBAAA,SAAAC,GACI,QAAAD,GAAoBE,EAAwBC,GAA5C,GAAAC,GACIH,EAAAI,KAAAC,KAAMH,GAAQD,IAAGI,WADDF,GAAAF,GAAAA,EAEhBE,EAAKD,KAAKI,OAASL,IAgC3B,MAnCqCM,WAAAR,EAAAC,GAMvBD,EAAAS,UAAAC,UAAV,SAAoBC,GAEhB,MADAL,MAAKM,KAAON,KAAKM,MAAQD,EAAIE,MAAMP,KAAKJ,GAAGU,MACpCN,KAAKJ,IAAMS,EAAIG,QAGhBd,EAAAS,UAAAM,WAAV,SAAqBC,EAAoBL,EAAmBM,EAAmBC,GAA/E,GAAAd,GAAAE,IACI,OAAIA,MAAKJ,GAAGiB,KACDC,QAAQC,QAAQpB,EAAAQ,UAAMM,WAAUV,KAAAC,KAACU,EAAQL,EAAKM,EAAMC,IACtDI,KAAK,SAAAC,GAAU,MAAAnB,GAAKoB,cAAcD,EAAQnB,EAAKF,GAAIS,EAAKM,EAAMC,KAE5DjB,EAAAQ,UAAMM,WAAUV,KAAAC,KAACU,EAAQL,EAAKM,EAAMC,IAInDlB,EAAAS,UAAAgB,MAAA,SAAMd,EAAmBM,EAAmBC,GACxC,GAAIO,GAAQ5B,EAAE6B,WAAWpB,KAAKJ,GAAGuB,OAASnB,KAAKJ,GAAGuB,MAAMd,EAAKM,EAAMC,GAAQZ,KAAKJ,GAAGuB,KAEnF,OADAA,GAAQA,MACDA,EAAME,OAAO1B,EAAAQ,UAAMgB,MAAKpB,KAAAC,KAACK,EAAKM,EAAMC,KAG/ClB,EAAAS,UAAAmB,OAAA,SAAOjB,EAAmBM,EAAmBC,GACzC,GAAuB,OAAnBZ,KAAKJ,GAAG0B,OACR,OAAQ,SAAAL,GAAU,MAAAA,IAEtB,IAAIM,GAAUhC,EAAE6B,WAAWpB,KAAKJ,GAAG0B,QAAUtB,KAAKJ,GAAG0B,OAAOjB,EAAKM,EAAMC,GAAQZ,KAAKJ,GAAG0B,MAEvF,OADAC,GAAUA,MACHA,EAAQF,OAAO1B,EAAAQ,UAAMmB,OAAMvB,KAAAC,KAACK,EAAKM,EAAMC,KAGtDlB,GAnCqCD,WAAA+B,SAAxBC,SAAA/B,gBAAAA","file":"../../tasks/DynamicPipeTask.js","sourcesContent":["import { Gulp } from 'gulp';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport * as _ from 'lodash';\r\nimport { PipeTask } from '../PipeTask';\r\nimport { IAssertOption } from '../IAssertOption';\r\nimport { RunWay } from '../RunWay';\r\nimport { ExecOptions } from 'child_process';\r\nimport { ITask, ITaskInfo } from '../ITask';\r\nimport { AsyncTaskSource, AsyncSrc } from '../types';\r\nimport { ITaskContext } from '../ITaskContext';\r\nimport { IDynamicTaskOption } from '../IDynamicTaskOption';\r\nimport { IAssertDist } from '../IAssertDist';\r\nimport { ITransform } from '../ITransform';\r\nimport { IPipe } from '../IPipe';\r\nimport { IOutputPipe } from '../IOutputPipe';\r\n\r\n\r\n/**\r\n * pipe task for dynamic task.\r\n *\r\n * @class DynamicPipeTask\r\n * @extends {PipeTask}\r\n */\r\nexport class DynamicPipeTask extends PipeTask {\r\n    constructor(private dt: IDynamicTaskOption, info?: ITaskInfo) {\r\n        super(info || dt);\r\n        this.info.assert = dt;\r\n    }\r\n\r\n    protected getOption(ctx: ITaskContext): IAssertDist {\r\n        this.name = this.name || ctx.toStr(this.dt.name);\r\n        return this.dt || ctx.option;\r\n    }\r\n\r\n    protected customPipe(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        if (this.dt.pipe) {\r\n            return Promise.resolve(super.customPipe(source, ctx, dist, gulp))\r\n                .then(stream => this.cpipe2Promise(stream, this.dt, ctx, dist, gulp));\r\n        } else {\r\n            return super.customPipe(source, ctx, dist, gulp)\r\n        }\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): IPipe[] {\r\n        let pipes = _.isFunction(this.dt.pipes) ? this.dt.pipes(ctx, dist, gulp) : this.dt.pipes;\r\n        pipes = pipes || [];\r\n        return pipes.concat(super.pipes(ctx, dist, gulp));\r\n    }\r\n\r\n    output(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): IOutputPipe[] {\r\n        if (this.dt.output === null) {\r\n            return [stream => stream];\r\n        }\r\n        let outputs = _.isFunction(this.dt.output) ? this.dt.output(ctx, dist, gulp) : this.dt.output;\r\n        outputs = outputs || [];\r\n        return outputs.concat(super.output(ctx, dist, gulp));\r\n    }\r\n\r\n}\r\n"]}