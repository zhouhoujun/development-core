{"version":3,"sources":["tasks/ExecFileTask.ts"],"names":["coregulp","require","chalk","_","RunWay_1","ExecFileTask","info","files","this","prototype","getInfo","execute","ctx","gulp","option","to","Promise","resolve","then","isString","execFile","args","execFileOptions","allowError","isArray","fileRunWay","RunWay","sequence","pip_1","each","file","all","map","reject","setup","_this","tk","taskName","console","log","cyan","task","exports"],"mappings":"mEACA,IAAAA,UAAAC,QAAA,QACAC,MAAAD,QAAA,SACAE,EAAAF,QAAA,UAEAG,SAAAH,QAAA,aAwCAI,aAAA,WACI,QAAAA,GAAsBC,EAA2BC,GAA3BC,KAAAF,KAAAA,EAA2BE,KAAAD,MAAAA,EA0DrD,MAnDWF,GAAAI,UAAAC,QAAP,WACI,MAAOF,MAAKF,MAGhBD,EAAAI,UAAAE,QAAA,SAAQC,EAAmBC,GACvB,GAAIC,GAASF,EAAIE,OACbP,EAAQK,EAAIG,GAAaP,KAAKD,MAClC,OAAOS,SAAQC,QAAQV,GAClBW,KAAK,SAAAX,GACF,GAAIJ,EAAEgB,SAASZ,GACX,MAAOK,GAAIQ,SAASb,EAAOO,EAAOO,KAAMP,EAAOQ,iBAAuC,IAAtBR,EAAOS,WACpE,IAAIpB,EAAEqB,QAAQjB,GAAQ,CACzB,GAAIO,EAAOW,aAAerB,SAAAsB,OAAOC,SAAU,CACvC,GAAIC,GAAMZ,QAAQC,SAIlB,OAHAd,GAAE0B,KAAKtB,EAAO,SAAAuB,GACVF,EAAMA,EAAIV,KAAK,WAAM,MAAAN,GAAIQ,SAASU,EAAMhB,EAAOO,KAAMP,EAAOQ,iBAAuC,IAAtBR,EAAOS,gBAEjFK,EAEP,MAAOZ,SAAQe,IAAI5B,EAAE6B,IAAIzB,EAAO,SAAAuB,GAAQ,MAAAlB,GAAIQ,SAASU,EAAMhB,EAAOO,KAAMP,EAAOQ,iBAAuC,IAAtBR,EAAOS,eAG3G,MAAOP,SAAQiB,OAAO,kCActC5B,EAAAI,UAAAyB,MAAA,SAAMtB,EAAmBC,GAAzB,GAAAsB,GAAA3B,IACIK,GAAOA,GAAQb,QAEf,IAAIoC,GAAKxB,EAAIyB,SAAS7B,KAAKE,UAS3B,OARA4B,SAAQC,IAAI,2BAA4BrC,MAAMsC,KAAKJ,IAEnDvB,EAAK4B,KAAKL,EAAI,WACV,MAAOD,GAAKxB,QAAQC,EAAKC,KAG7BL,KAAKF,KAAK+B,SAAWD,EAEdA,GAGf/B,IA3DaqC,SAAArC,aAAAA","file":"../../tasks/ExecFileTask.js","sourcesContent":["import { Gulp } from 'gulp';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport * as _ from 'lodash';\r\nimport { IAssertOption } from '../IAssertOption';\r\nimport { RunWay } from '../RunWay';\r\nimport { ExecOptions, ExecFileOptions } from 'child_process';\r\nimport { ITask, ITaskInfo } from '../ITask';\r\nimport { AsyncTaskSource, AsyncSrc } from '../types';\r\nimport { ITaskContext } from '../ITaskContext';\r\n\r\n\r\n\r\nexport interface IExecFileOption extends IAssertOption {\r\n    /**\r\n     * the file exec run way. default parallel.\r\n     *\r\n     * @type {RunWay}\r\n     * @memberof IExecFileOption\r\n     */\r\n    fileRunWay?: RunWay;\r\n\r\n    args?: string[];\r\n    /**\r\n     * exec file options.\r\n     *\r\n     * @type {ExecFileOptions}\r\n     * @memberof IExecFileOption\r\n     */\r\n    execFileOptions?: ExecFileOptions;\r\n\r\n    /**\r\n     * all child process has error.\r\n     */\r\n    allowError?: boolean;\r\n\r\n}\r\n\r\n\r\n/**\r\n * exec file Task\r\n *\r\n * @class ExecFileTask\r\n * @implements {ITask}\r\n */\r\nexport class ExecFileTask implements ITask {\r\n    constructor(protected info: ITaskInfo, protected files: AsyncTaskSource) {\r\n\r\n    }\r\n\r\n    /**\r\n     * get task info.\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        return this.info;\r\n    }\r\n\r\n    execute(ctx: ITaskContext, gulp?: Gulp): Promise<any> {\r\n        let option = ctx.option as IExecFileOption;\r\n        let files = ctx.to<AsyncSrc>(this.files);\r\n        return Promise.resolve(files)\r\n            .then(files => {\r\n                if (_.isString(files)) {\r\n                    return ctx.execFile(files, option.args, option.execFileOptions, option.allowError !== false);\r\n                } else if (_.isArray(files)) {\r\n                    if (option.fileRunWay === RunWay.sequence) {\r\n                        let pip = Promise.resolve();\r\n                        _.each(files, file => {\r\n                            pip = pip.then(() => ctx.execFile(file, option.args, option.execFileOptions, option.allowError !== false));\r\n                        });\r\n                        return pip;\r\n                    } else {\r\n                        return Promise.all(_.map(files, file => ctx.execFile(file, option.args, option.execFileOptions, option.allowError !== false)));\r\n                    }\r\n                } else {\r\n                    return Promise.reject('exec file task config error');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * setup shell task.\r\n     *\r\n     * @param {ITaskContext} ctx\r\n     * @param {Gulp} [gulp]\r\n     * @returns\r\n     *\r\n     * @memberOf ShellTask\r\n     */\r\n    setup(ctx: ITaskContext, gulp?: Gulp) {\r\n        gulp = gulp || coregulp;\r\n\r\n        let tk = ctx.taskName(this.getInfo());\r\n        console.log(`register exec file task:`, chalk.cyan(tk));\r\n\r\n        gulp.task(tk, () => {\r\n            return this.execute(ctx, gulp);\r\n        });\r\n\r\n        this.info.taskName = tk;\r\n\r\n        return tk;\r\n    }\r\n\r\n}\r\n"]}