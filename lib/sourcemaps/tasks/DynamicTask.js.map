{"version":3,"sources":["tasks/DynamicTask.ts"],"names":["chalk","require","DynamicTask","info","dt","this","prototype","getInfo","execute","ctx","gulp","rt","task","Promise","resolve","setup","_this","tk","taskName","console","log","cyan","exports"],"mappings":"mEAEA,IAAAA,OAAAC,QAAA,SAgBAC,YAAA,WACI,QAAAA,GAAsBC,EAA2BC,GAA3BC,KAAAF,KAAAA,EAA2BE,KAAAD,GAAAA,EAiCrD,MAxBWF,GAAAI,UAAAC,QAAP,WACI,MAAOF,MAAKF,MAGhBD,EAAAI,UAAAE,QAAA,SAAQC,EAAmBC,GACvB,GAAIC,GAAKN,KAAKD,GAAGQ,KAAKH,EAAKJ,KAAKD,GAAIM,EACpC,OAAIC,IAAMA,EAAS,KACRA,EAEAE,QAAQC,QAAQH,IAI/BT,EAAAI,UAAAS,MAAA,SAAMN,EAAmBC,GAAzB,GAAAM,GAAAX,KACQY,EAAKR,EAAIS,SAASb,KAAKE,UAQ3B,OAPAY,SAAQC,IAAI,gCAAiCpB,MAAMqB,KAAKJ,IACxDP,EAAKE,KAAKK,EAAI,WACV,MAAOD,GAAKR,QAAQC,EAAKC,KAG7BL,KAAKF,KAAKe,SAAWD,EAEdA,GAEff,IAlCaoB,SAAApB,YAAAA","file":"../../tasks/DynamicTask.js","sourcesContent":["import { Gulp } from 'gulp';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport * as _ from 'lodash';\r\nimport { IAssertOption } from '../IAssertOption';\r\nimport { RunWay } from '../RunWay';\r\nimport { ExecOptions } from 'child_process';\r\nimport { ITask, ITaskInfo } from '../ITask';\r\nimport { AsyncTaskSource, AsyncSrc } from '../types';\r\nimport { ITaskContext } from '../ITaskContext';\r\nimport { IDynamicTaskOption } from '../IDynamicTaskOption';\r\n\r\n/**\r\n * custom dynamic task.\r\n *\r\n * @class DynamicTask\r\n * @implements {ITask}\r\n */\r\nexport class DynamicTask implements ITask {\r\n    constructor(protected info: ITaskInfo, protected dt: IDynamicTaskOption) {\r\n    }\r\n\r\n    /**\r\n     * get task info.\r\n     *\r\n     * @type {ITaskInfo}\r\n     * @memberOf PipeTask\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        return this.info;\r\n    }\r\n\r\n    execute(ctx: ITaskContext, gulp?: Gulp): Promise<any> {\r\n        let rt = this.dt.task(ctx, this.dt, gulp);\r\n        if (rt && rt['then']) {\r\n            return rt as Promise<any>;\r\n        } else {\r\n            return Promise.resolve(rt);\r\n        }\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp?: Gulp) {\r\n        let tk = ctx.taskName(this.getInfo());\r\n        console.log('register custom dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            return this.execute(ctx, gulp);\r\n        });\r\n\r\n        this.info.taskName = tk;\r\n\r\n        return tk;\r\n    }\r\n}\r\n"]}