{"version":3,"sources":["tasks/DynamicWatchTask.ts"],"names":["chalk","require","_","taskSequence_1","watch","DynamicWatchTask","info","dt","this","prototype","getInfo","execute","ctx","gulp","Promise","resolve","setup","callback","watchs","isFunction","watchTasks","last","pop","event","watchChanged","map","w","isString","taskName","tk","console","log","cyan","task","src","getSrc","call","runSequence","then","exports"],"mappings":"mEAEA,IAAAA,OAAAC,QAAA,SACAC,EAAAD,QAAA,UACAE,eAAAF,QAAA,mBACAG,MAAAH,QAAA,cAcAI,iBAAA,WACI,QAAAA,GAAsBC,EAA2BC,GAA3BC,KAAAF,KAAAA,EAA2BE,KAAAD,GAAAA,EAoDrD,MA3CWF,GAAAI,UAAAC,QAAP,WACI,MAAOF,MAAKF,MAGhBD,EAAAI,UAAAE,QAAA,SAAQC,EAAmBC,GACvB,MAAOC,SAAQC,WAGnBV,EAAAI,UAAAO,MAAA,SAAMJ,EAAmBC,GACrB,GAEII,GAFAV,EAAKC,KAAKD,GACVW,EAAShB,EAAEiB,WAAWZ,EAAGa,YAAcb,EAAGa,WAAWR,EAAKL,GAAMA,EAAGa,UAOnEH,GALCf,EAAEiB,WAAWjB,EAAEmB,KAAKH,IAKVA,EAAOI,MAJP,SAACC,GACRhB,EAAGiB,cAAgBjB,EAAGiB,aAAaD,EAAOX,IAMlDM,EAAShB,EAAEuB,IAAIP,EAAQ,SAAAQ,GACnB,MAAIxB,GAAEyB,SAASD,GACJd,EAAIgB,SAASF,GAEjBA,GAEX,IAAIpB,GAAOE,KAAKE,UACZmB,EAAKjB,EAAIgB,SAAStB,EActB,OAbAwB,SAAQC,IAAI,gCAAiC/B,MAAMgC,KAAKH,IACxDhB,EAAKoB,KAAKJ,EAAI,WACV,GAAIK,GAAMtB,EAAIuB,OAAO7B,EACrBwB,SAAQC,IAAI,cAAe/B,MAAMgC,KAAKI,KAAKpC,MAAOkC,IAElD9B,MAAM8B,EAAK,KAAM,WACb/B,eAAAkC,YAAYxB,EAAgBK,GACvBoB,KAAK,WACFrB,GAAYA,UAKrBY,GAEfxB,IArDakC,SAAAlC,iBAAAA","file":"../../tasks/DynamicWatchTask.js","sourcesContent":["import { Gulp, WatchEvent } from 'gulp';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\nimport * as _ from 'lodash';\r\nimport { runSequence } from '../taskSequence';\r\nimport * as watch from 'gulp-watch';\r\nimport { IAssertOption } from '../IAssertOption';\r\nimport { RunWay } from '../RunWay';\r\nimport { ExecOptions } from 'child_process';\r\nimport { ITask, ITaskInfo } from '../ITask';\r\nimport { AsyncTaskSource, AsyncSrc } from '../types';\r\nimport { ITaskContext } from '../ITaskContext';\r\nimport { IDynamicTaskOption } from '../IDynamicTaskOption';\r\n/**\r\n * custom dynamic watch task.\r\n *\r\n * @class DynamicWatchTask\r\n * @implements {ITask}\r\n */\r\nexport class DynamicWatchTask implements ITask {\r\n    constructor(protected info: ITaskInfo, protected dt: IDynamicTaskOption) {\r\n    }\r\n\r\n    /**\r\n     * get task info.\r\n     *\r\n     * @type {ITaskInfo}\r\n     * @memberOf PipeTask\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        return this.info;\r\n    }\r\n\r\n    execute(ctx: ITaskContext, gulp?: Gulp): Promise<any> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp?: Gulp) {\r\n        let dt = this.dt;\r\n        let watchs = _.isFunction(dt.watchTasks) ? dt.watchTasks(ctx, dt) : dt.watchTasks;\r\n        let callback;\r\n        if (!_.isFunction(_.last(watchs))) {\r\n            callback = (event: WatchEvent) => {\r\n                dt.watchChanged && dt.watchChanged(event, ctx);\r\n            };\r\n        } else {\r\n            callback = watchs.pop();\r\n        }\r\n\r\n        watchs = _.map(watchs, w => {\r\n            if (_.isString(w)) {\r\n                return ctx.taskName(w);\r\n            }\r\n            return w;\r\n        })\r\n        let info = this.getInfo();\r\n        let tk = ctx.taskName(info);\r\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            let src = ctx.getSrc(info);\r\n            console.log('watch, src:', chalk.cyan.call(chalk, src));\r\n            // watch(src, watchs);\r\n            watch(src, null, () => {\r\n                runSequence(gulp, <string[]>watchs)\r\n                    .then(() => {\r\n                        callback && callback();\r\n                    });\r\n            });\r\n        });\r\n\r\n        return tk;\r\n    }\r\n}\r\n"]}