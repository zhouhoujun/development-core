{"version":3,"sources":["generateTask.js","generateTask.ts"],"names":["generateTask","tasks","match","taskseq","_","each","isArray","dt","watchTasks","oper","TaskConfig_1","Operation","default","watch","utils_1","matchTaskInfo","matchTaskGroup","push","createTask","createWatchTask","defaultWatch","name","ctx","subTaskName","task","isFunction","createCustomTask","createPipesTask","factory","info","gulp","tk","console","log","chalk","cyan","DynamicTask","order","group","assert","watchs","last","event","watchChanged","map","w","isString","src","getSrc","call","DynamicPipeTask","require","coregulp","PipeTask_1","_classCallCheck","this","getInfo","taskName","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","taskStringVal","option","source","dist","_this2","pipe","Promise","resolve","_get","prototype","then","stream","cpipe2Promise","pipes","concat","output","outputs","PipeTask","exports"],"mappings":"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","file":"../generateTask.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst coregulp = require('gulp');\nconst chalk = require('chalk');\nconst TaskConfig_1 = require('./TaskConfig');\nconst utils_1 = require('./utils');\nconst PipeTask_1 = require('./PipeTask');\n/**\n * custom dynamic task.\n *\n * @class DynamicTask\n * @implements {ITask}\n */\nclass DynamicTask {\n    constructor(info, factory) {\n        this.info = info;\n        this.factory = factory;\n    }\n    /**\n     * get task info.\n     *\n     * @type {ITaskInfo}\n     * @memberOf PipeTask\n     */\n    getInfo() {\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let name = this.factory(ctx, this.getInfo(), gulp || coregulp);\n        if (name) {\n            this.info.taskName = name;\n        }\n        return name;\n    }\n}\n/**\n * pipe task for dynamic task.\n *\n * @class DynamicPipeTask\n * @extends {PipeTask}\n */\nclass DynamicPipeTask extends PipeTask_1.PipeTask {\n    constructor(dt, info) {\n        super(info || dt);\n        this.dt = dt;\n        this.info.assert = dt;\n    }\n    getOption(ctx) {\n        this.name = this.name || utils_1.taskStringVal(this.dt.name, ctx);\n        return this.dt || ctx.option;\n    }\n    customPipe(source, ctx, dist, gulp) {\n        if (this.dt.pipe) {\n            return Promise.resolve(super.customPipe(source, ctx, dist, gulp))\n                .then(stream => this.cpipe2Promise(stream, this.dt, ctx, dist, gulp));\n        }\n        else {\n            return super.customPipe(source, ctx, dist, gulp);\n        }\n    }\n    pipes(ctx, dist, gulp) {\n        let pipes = _.isFunction(this.dt.pipes) ? this.dt.pipes(ctx, dist, gulp) : this.dt.pipes;\n        pipes = pipes || [];\n        return pipes.concat(super.pipes(ctx, dist, gulp));\n    }\n    output(ctx, dist, gulp) {\n        if (this.dt.output === null) {\n            return [stream => stream];\n        }\n        let outputs = _.isFunction(this.dt.output) ? this.dt.output(ctx, dist, gulp) : this.dt.output;\n        outputs = outputs || [];\n        return outputs.concat(super.output(ctx, dist, gulp));\n    }\n}\n/**\n * dynamic build tasks.\n *\n * @export\n * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\n * @param {ITaskInfo} [match]\n * @returns {ITask[]}\n */\nfunction generateTask(tasks, match) {\n    let taskseq = [];\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\n        if (dt.watchTasks) {\n            dt.oper = (dt.oper || TaskConfig_1.Operation.default) | TaskConfig_1.Operation.watch;\n        }\n        if (!utils_1.matchTaskInfo(dt, match)) {\n            return;\n        }\n        if (!utils_1.matchTaskGroup(dt, match)) {\n            return;\n        }\n        taskseq.push(createTask(dt));\n        if (dt.watch && match && (match.oper & TaskConfig_1.Operation.watch)) {\n            taskseq.push(createWatchTask({\n                oper: TaskConfig_1.Operation.defaultWatch,\n                name: (ctx) => ctx.subTaskName(dt) + '-twatch',\n                watchTasks: (ctx) => [ctx.subTaskName(dt)]\n            }));\n        }\n    });\n    return taskseq;\n}\nexports.generateTask = generateTask;\n/**\n * create task by dynamic option.\n *\n * @export\n * @param {IDynamicTaskOption} dt\n * @returns {ITask}\n */\nfunction createTask(dt) {\n    let task;\n    if (dt.oper & TaskConfig_1.Operation.watch) {\n        task = createWatchTask(dt);\n    }\n    else if (_.isFunction(dt.task)) {\n        // custom task\n        task = createCustomTask(dt);\n    }\n    else {\n        // pipe stream task.\n        task = createPipesTask(dt);\n    }\n    return task;\n}\nexports.createTask = createTask;\n/**\n * create custom task.\n *\n * @param {IDynamicTaskOption} dt\n * @returns {ITask}\n */\nfunction createCustomTask(dt) {\n    let factory = (ctx, info, gulp) => {\n        let tk = ctx.subTaskName(info);\n        console.log('register custom dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            return dt.task(ctx, dt, gulp);\n        });\n        return tk;\n    };\n    return new DynamicTask({ name: dt.name, order: dt.order, oper: dt.oper, group: dt.group, assert: dt }, factory);\n}\n/**\n * create dynamic watch task.\n *\n * @export\n * @param {IDynamicTaskOption} dt\n * @returns {ITask}\n */\nfunction createWatchTask(dt) {\n    let factory = (ctx, info, gulp) => {\n        let watchs = _.isFunction(dt.watchTasks) ? dt.watchTasks(ctx, dt) : dt.watchTasks;\n        if (!_.isFunction(_.last(watchs))) {\n            watchs.push((event) => {\n                dt.watchChanged && dt.watchChanged(event, ctx);\n            });\n        }\n        watchs = _.map(watchs, w => {\n            if (_.isString(w)) {\n                return ctx.subTaskName(w);\n            }\n            return w;\n        });\n        let tk = ctx.subTaskName(info);\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            let src = ctx.getSrc(info);\n            console.log('watch, src:', chalk.cyan.call(chalk, src));\n            gulp.watch(src, watchs);\n        });\n        return tk;\n    };\n    return new DynamicTask({ name: dt.name, order: dt.order, oper: dt.oper, group: dt.group, assert: dt }, factory);\n}\n/**\n * create pipe task.\n *\n * @export\n * @param {IDynamicTaskOption} dt\n * @returns {ITask}\n */\nfunction createPipesTask(dt) {\n    return new DynamicPipeTask(dt);\n}\n","import * as _ from 'lodash';\r\nimport { Gulp, WatchEvent } from 'gulp';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\n\r\nimport { IAssertDist, IOutputPipe, Operation, ITaskInfo, ITransform, TaskResult, IPipe, IDynamicTaskOption, ITaskContext, ITask } from './TaskConfig';\r\nimport { matchTaskGroup, matchTaskInfo, taskStringVal } from './utils';\r\nimport { PipeTask } from './PipeTask';\r\n\r\ntype factory = (ctx: ITaskContext, info: ITaskInfo, gulp: Gulp) => TaskResult;\r\n/**\r\n * custom dynamic task.\r\n * \r\n * @class DynamicTask\r\n * @implements {ITask}\r\n */\r\nclass DynamicTask implements ITask {\r\n    constructor(protected info: ITaskInfo, private factory: factory) {\r\n    }\r\n\r\n    /**\r\n     * get task info.\r\n     * \r\n     * @type {ITaskInfo}\r\n     * @memberOf PipeTask\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        return this.info;\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp?: Gulp) {\r\n        let name = this.factory(ctx, this.getInfo(), gulp || coregulp);\r\n        if (name) {\r\n            this.info.taskName = name;\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\n/**\r\n * pipe task for dynamic task.\r\n * \r\n * @class DynamicPipeTask\r\n * @extends {PipeTask}\r\n */\r\nclass DynamicPipeTask extends PipeTask {\r\n    constructor(private dt: IDynamicTaskOption, info?: ITaskInfo) {\r\n        super(info || dt);\r\n        this.info.assert = dt;\r\n    }\r\n\r\n    protected getOption(ctx: ITaskContext) {\r\n        this.name = this.name || taskStringVal(this.dt.name, ctx);\r\n        return this.dt || ctx.option;\r\n    }\r\n\r\n    protected customPipe(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        if (this.dt.pipe) {\r\n            return Promise.resolve(super.customPipe(source, ctx, dist, gulp))\r\n                .then(stream => this.cpipe2Promise(stream, this.dt, ctx, dist, gulp));\r\n        } else {\r\n            return super.customPipe(source, ctx, dist, gulp)\r\n        }\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): IPipe[] {\r\n        let pipes = _.isFunction(this.dt.pipes) ? this.dt.pipes(ctx, dist, gulp) : this.dt.pipes;\r\n        pipes = pipes || [];\r\n        return pipes.concat(super.pipes(ctx, dist, gulp));\r\n    }\r\n\r\n    output(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): IOutputPipe[] {\r\n        if (this.dt.output === null) {\r\n            return [stream => stream];\r\n        }\r\n        let outputs = _.isFunction(this.dt.output) ? this.dt.output(ctx, dist, gulp) : this.dt.output;\r\n        outputs = outputs || [];\r\n        return outputs.concat(super.output(ctx, dist, gulp));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * dynamic build tasks.\r\n * \r\n * @export\r\n * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n * @param {ITaskInfo} [match]\r\n * @returns {ITask[]}\r\n */\r\nexport function generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n    let taskseq: ITask[] = [];\r\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\r\n\r\n        if (dt.watchTasks) {\r\n            dt.oper = (dt.oper || Operation.default) | Operation.watch;\r\n        }\r\n        if (!matchTaskInfo(dt, match)) {\r\n            return;\r\n        }\r\n\r\n        if (!matchTaskGroup(dt, match)) {\r\n            return;\r\n        }\r\n\r\n        taskseq.push(createTask(dt));\r\n        if (dt.watch && match && (match.oper & Operation.watch)) {\r\n            taskseq.push(createWatchTask({\r\n                oper: Operation.defaultWatch,\r\n                name: (ctx) => ctx.subTaskName(dt) + '-twatch',\r\n                watchTasks: (ctx) => [ctx.subTaskName(dt)]\r\n            }));\r\n        }\r\n    });\r\n\r\n    return taskseq;\r\n}\r\n\r\n/**\r\n * create task by dynamic option.\r\n * \r\n * @export\r\n * @param {IDynamicTaskOption} dt\r\n * @returns {ITask}\r\n */\r\nexport function createTask(dt: IDynamicTaskOption): ITask {\r\n    let task: ITask;\r\n    if (dt.oper & Operation.watch) {\r\n        task = createWatchTask(dt);\r\n    } else if (_.isFunction(dt.task)) {\r\n        // custom task\r\n        task = createCustomTask(dt);\r\n    } else {\r\n        // pipe stream task.\r\n        task = createPipesTask(dt);\r\n    }\r\n    return task;\r\n}\r\n\r\n\r\n/**\r\n * create custom task.\r\n * \r\n * @param {IDynamicTaskOption} dt\r\n * @returns {ITask}\r\n */\r\nfunction createCustomTask(dt: IDynamicTaskOption): ITask {\r\n    let factory = (ctx: ITaskContext, info: ITaskInfo, gulp: Gulp) => {\r\n        let tk = ctx.subTaskName(info);\r\n        console.log('register custom dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            return dt.task(ctx, dt, gulp);\r\n        });\r\n\r\n        return tk\r\n    };\r\n\r\n    return new DynamicTask({ name: dt.name, order: dt.order, oper: dt.oper, group: dt.group, assert: dt }, factory);\r\n}\r\n\r\n\r\n/**\r\n * create dynamic watch task.\r\n * \r\n * @export\r\n * @param {IDynamicTaskOption} dt\r\n * @returns {ITask}\r\n */\r\nfunction createWatchTask(dt: IDynamicTaskOption): ITask {\r\n    let factory = (ctx: ITaskContext, info: ITaskInfo, gulp: Gulp) => {\r\n        let watchs = _.isFunction(dt.watchTasks) ? dt.watchTasks(ctx, dt) : dt.watchTasks;\r\n        if (!_.isFunction(_.last(watchs))) {\r\n            watchs.push(<WatchCallback>(event: WatchEvent) => {\r\n                dt.watchChanged && dt.watchChanged(event, ctx);\r\n            });\r\n        }\r\n        watchs = _.map(watchs, w => {\r\n            if (_.isString(w)) {\r\n                return ctx.subTaskName(w);\r\n            }\r\n            return w;\r\n        })\r\n        let tk = ctx.subTaskName(info);\r\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            let src = ctx.getSrc(info);\r\n            console.log('watch, src:', chalk.cyan.call(chalk, src));\r\n            gulp.watch(src, watchs)\r\n        });\r\n\r\n        return tk;\r\n    };\r\n\r\n    return new DynamicTask({ name: dt.name, order: dt.order, oper: dt.oper, group: dt.group, assert: dt }, factory);\r\n}\r\n\r\n/**\r\n * create pipe task.\r\n * \r\n * @export\r\n * @param {IDynamicTaskOption} dt\r\n * @returns {ITask}\r\n */\r\nfunction createPipesTask(dt: IDynamicTaskOption): ITask {\r\n    return new DynamicPipeTask(dt);\r\n}\r\n"]}