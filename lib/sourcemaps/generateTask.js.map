{"version":3,"sources":["generateTask.js","generateTask.ts"],"names":["_","require","coregulp","chalk","TaskConfig_1","utils_1","PipeTask_1","DynamicTask","info","factory","config","gulp","name","taskName","DynamicPipeTask","dt","assert","ctx","taskStringVal","oper","env","option","source","dist","pipe","Promise","resolve","then","cpipe2Promise","stream","pipes","isFunction","concat","output","outputs","PipeTask","generateTask","tasks","match","taskseq","each","isArray","watchTasks","Operation","default","watch","matchTaskInfo","matchTaskGroup","push","createWatchTask","task","createTask","createPipesTask","exports","cfg","tk","subTaskName","console","log","cyan","order","group","watchs","last","event","watchChanged","map","isString","w","src","getSrc","call"],"mappings":"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","file":"../generateTask.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst coregulp = require('gulp');\nconst chalk = require('chalk');\nconst TaskConfig_1 = require('./TaskConfig');\nconst utils_1 = require('./utils');\nconst PipeTask_1 = require('./PipeTask');\nclass DynamicTask {\n    constructor(info, factory) {\n        this.info = info;\n        this.factory = factory;\n    }\n    /**\n     * get task info.\n     *\n     * @type {ITaskInfo}\n     * @memberOf PipeTask\n     */\n    getInfo() {\n        return this.info;\n    }\n    setup(config, gulp) {\n        let name = this.factory(config, gulp || coregulp);\n        if (name) {\n            this.info.taskName = name;\n        }\n        return name;\n    }\n}\nclass DynamicPipeTask extends PipeTask_1.PipeTask {\n    constructor(dt, info) {\n        super(info || dt);\n        this.dt = dt;\n        this.info.assert = dt;\n    }\n    getOption(ctx) {\n        this.name = this.name || utils_1.taskStringVal(this.dt.name, ctx.oper, ctx.env);\n        return this.dt || ctx.option;\n    }\n    customPipe(source, ctx, dist, gulp) {\n        if (this.dt.pipe) {\n            return Promise.resolve(super.customPipe(source, ctx, dist, gulp))\n                .then(stream => this.cpipe2Promise(stream, this.dt, ctx, dist, gulp));\n        }\n        else {\n            return super.customPipe(source, ctx, dist, gulp);\n        }\n    }\n    pipes(ctx, dist, gulp) {\n        let pipes = _.isFunction(this.dt.pipes) ? this.dt.pipes(ctx, dist, gulp) : this.dt.pipes;\n        pipes = pipes || [];\n        return pipes.concat(super.pipes(ctx, dist, gulp));\n    }\n    output(ctx, dist, gulp) {\n        if (this.dt.output === null) {\n            return [stream => stream];\n        }\n        let outputs = _.isFunction(this.dt.output) ? this.dt.output(ctx, dist, gulp) : this.dt.output;\n        outputs = outputs || [];\n        return outputs.concat(super.output(ctx, dist, gulp));\n    }\n}\n/**\n * dynamic build tasks.\n *\n * @export\n * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\n * @param {ITaskInfo} [match]\n * @returns {ITask[]}\n */\nfunction generateTask(tasks, match) {\n    let taskseq = [];\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\n        if (dt.watchTasks) {\n            dt.oper = (dt.oper || TaskConfig_1.Operation.default) | TaskConfig_1.Operation.watch;\n        }\n        if (!utils_1.matchTaskInfo(dt, match)) {\n            return;\n        }\n        if (!utils_1.matchTaskGroup(dt, match)) {\n            return;\n        }\n        if ((dt.oper & TaskConfig_1.Operation.watch) > 0) {\n            taskseq.push(createWatchTask(dt));\n        }\n        else if (_.isFunction(dt.task)) {\n            // custom task\n            taskseq.push(createTask(dt));\n        }\n        else {\n            // pipe stream task.\n            taskseq.push(createPipesTask(dt));\n        }\n    });\n    return taskseq;\n}\nexports.generateTask = generateTask;\n/**\n * promise task.\n *\n * @param {DynamicTask} dt\n * @returns\n */\nfunction createTask(dt) {\n    let factory = (cfg, gulp) => {\n        let tk = cfg.subTaskName(dt);\n        console.log('register custom dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            return dt.task(cfg, dt, gulp);\n        });\n        return tk;\n    };\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: dt.watch, group: dt.group, assert: dt }, factory);\n}\n/**\n * create dynamic watch task.\n *\n * @param {DynamicTask} dt\n * @returns\n */\nfunction createWatchTask(dt) {\n    let factory = (cfg, gulp) => {\n        let watchs = _.isFunction(dt.watchTasks) ? dt.watchTasks(cfg) : dt.watchTasks;\n        if (!_.isFunction(_.last(watchs))) {\n            watchs.push((event) => {\n                dt.watchChanged && dt.watchChanged(event, cfg);\n            });\n        }\n        watchs = _.map(watchs, w => {\n            if (_.isString(w)) {\n                return cfg.subTaskName(w);\n            }\n            return w;\n        });\n        let tk = cfg.subTaskName(dt);\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            let src = cfg.getSrc(dt);\n            console.log('watch, src:', chalk.cyan.call(chalk, src));\n            gulp.watch(src, watchs);\n        });\n        return tk;\n    };\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: dt.watch, group: dt.group, assert: dt }, factory);\n}\nfunction createPipesTask(dt) {\n    return new DynamicPipeTask(dt);\n}\n","import * as _ from 'lodash';\r\nimport { Gulp, WatchEvent } from 'gulp';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\n\r\nimport { IAssertDist, IOutputPipe, Operation, ITaskInfo, ITransform, TaskResult, IPipe, IDynamicTaskOption, ITaskContext, ITask } from './TaskConfig';\r\nimport { matchTaskGroup, matchTaskInfo, taskStringVal } from './utils';\r\nimport { PipeTask } from './PipeTask';\r\n\r\ntype factory = (config: ITaskContext, gulp: Gulp) => TaskResult;\r\nclass DynamicTask implements ITask {\r\n    constructor(protected info: ITaskInfo, private factory: factory) {\r\n    }\r\n\r\n    /**\r\n     * get task info.\r\n     * \r\n     * @type {ITaskInfo}\r\n     * @memberOf PipeTask\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        return this.info;\r\n    }\r\n\r\n    setup(config: ITaskContext, gulp?: Gulp) {\r\n        let name = this.factory(config, gulp || coregulp);\r\n        if (name) {\r\n            this.info.taskName = name;\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\nclass DynamicPipeTask extends PipeTask {\r\n    constructor(private dt: IDynamicTaskOption, info?: ITaskInfo) {\r\n        super(info || dt);\r\n        this.info.assert = dt;\r\n    }\r\n\r\n    protected getOption(ctx: ITaskContext) {\r\n        this.name = this.name || taskStringVal(this.dt.name, ctx.oper, ctx.env);\r\n        return this.dt || ctx.option;\r\n    }\r\n\r\n    protected customPipe(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        if (this.dt.pipe) {\r\n            return Promise.resolve(super.customPipe(source, ctx, dist, gulp))\r\n                .then(stream => this.cpipe2Promise(stream, this.dt, ctx, dist, gulp));\r\n        } else {\r\n            return super.customPipe(source, ctx, dist, gulp)\r\n        }\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): IPipe[] {\r\n        let pipes = _.isFunction(this.dt.pipes) ? this.dt.pipes(ctx, dist, gulp) : this.dt.pipes;\r\n        pipes = pipes || [];\r\n        return pipes.concat(super.pipes(ctx, dist, gulp));\r\n    }\r\n\r\n    output(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): IOutputPipe[] {\r\n        if (this.dt.output === null) {\r\n            return [stream => stream];\r\n        }\r\n        let outputs = _.isFunction(this.dt.output) ? this.dt.output(ctx, dist, gulp) : this.dt.output;\r\n        outputs = outputs || [];\r\n        return outputs.concat(super.output(ctx, dist, gulp));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * dynamic build tasks.\r\n * \r\n * @export\r\n * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n * @param {ITaskInfo} [match]\r\n * @returns {ITask[]}\r\n */\r\nexport function generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n    let taskseq: ITask[] = [];\r\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\r\n\r\n        if (dt.watchTasks) {\r\n            dt.oper = (dt.oper || Operation.default) | Operation.watch;\r\n        }\r\n        if (!matchTaskInfo(dt, match)) {\r\n            return;\r\n        }\r\n\r\n        if (!matchTaskGroup(dt, match)) {\r\n            return;\r\n        }\r\n\r\n        if ((dt.oper & Operation.watch) > 0) {\r\n            taskseq.push(createWatchTask(dt))\r\n        } else if (_.isFunction(dt.task)) {\r\n            // custom task\r\n            taskseq.push(createTask(dt));\r\n        } else {\r\n            // pipe stream task.\r\n            taskseq.push(createPipesTask(dt));\r\n        }\r\n    });\r\n\r\n    return taskseq;\r\n}\r\n\r\n\r\n\r\n/**\r\n * promise task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createTask(dt: IDynamicTaskOption) {\r\n    let factory = (cfg: ITaskContext, gulp: Gulp) => {\r\n        let tk = cfg.subTaskName(dt);\r\n        console.log('register custom dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            return dt.task(cfg, dt, gulp);\r\n        });\r\n\r\n        return tk\r\n    };\r\n\r\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: dt.watch, group: dt.group, assert: dt }, factory);\r\n}\r\n/**\r\n * create dynamic watch task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createWatchTask(dt: IDynamicTaskOption) {\r\n    let factory = (cfg: ITaskContext, gulp: Gulp) => {\r\n        let watchs = _.isFunction(dt.watchTasks) ? dt.watchTasks(cfg) : dt.watchTasks;\r\n        if (!_.isFunction(_.last(watchs))) {\r\n            watchs.push(<WatchCallback>(event: WatchEvent) => {\r\n                dt.watchChanged && dt.watchChanged(event, cfg);\r\n            });\r\n        }\r\n        watchs = _.map(watchs, w => {\r\n            if (_.isString(w)) {\r\n                return cfg.subTaskName(w);\r\n            }\r\n            return w;\r\n        })\r\n        let tk = cfg.subTaskName(dt);\r\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            let src = cfg.getSrc(dt);\r\n            console.log('watch, src:', chalk.cyan.call(chalk, src));\r\n            gulp.watch(src, watchs)\r\n        });\r\n\r\n        return tk;\r\n    };\r\n\r\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: dt.watch, group: dt.group, assert: dt }, factory);\r\n}\r\n\r\nfunction createPipesTask(dt: IDynamicTaskOption) {\r\n    return new DynamicPipeTask(dt);\r\n}\r\n"]}