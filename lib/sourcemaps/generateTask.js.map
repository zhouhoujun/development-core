{"version":3,"sources":["generateTask.js","generateTask.ts"],"names":["generateTask","tasks","oper","env","taskseq","_","each","isArray","dt","watch","push","createWatchTask","isFunction","task","createTask","createPipesTask","gulp","cfg","tk","subTaskName","utils_1","taskStringVal","name","console","log","chalk","cyan","isNumber","order","watchs","last","event","watchChanged","map","w","isString","call","option","src","taskSourceVal","Promise","resolve","pipes","p","then","psrc","stram","pipe","stream","output","outputs","all","reject","once","dest","getDist","catch","err","red","require","exports"],"mappings":"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","file":"../generateTask.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst chalk = require('chalk');\nconst utils_1 = require('./utils');\nfunction generateTask(tasks, oper, env) {\n    let taskseq = [];\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\n        if (dt.oper && (dt.oper & oper) <= 0) {\n            return;\n        }\n        if (dt.watch) {\n            if (!env.watch) {\n                return;\n            }\n            taskseq.push(createWatchTask(dt));\n        }\n        else if (_.isFunction(dt.task)) {\n            taskseq.push(createTask(dt));\n        }\n        else {\n            taskseq.push(createPipesTask(dt));\n        }\n    });\n    return taskseq;\n}\nexports.generateTask = generateTask;\nfunction createTask(dt) {\n    return (gulp, cfg) => {\n        let tk = cfg.subTaskName(utils_1.taskStringVal(dt.name, cfg.oper));\n        console.log('register custom dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            return dt.task(cfg, dt, gulp);\n        });\n        if (_.isNumber(dt.order)) {\n            return {\n                name: tk,\n                order: dt.order\n            };\n        }\n        return tk;\n    };\n}\nfunction createWatchTask(dt) {\n    return (gulp, cfg) => {\n        let watchs = _.isFunction(dt.watch) ? dt.watch(cfg) : dt.watch;\n        if (!_.isFunction(_.last(watchs))) {\n            watchs.push((event) => {\n                dt.watchChanged && dt.watchChanged(event, cfg);\n            });\n        }\n        watchs = _.map(watchs, w => {\n            if (_.isString(w)) {\n                return cfg.subTaskName(w);\n            }\n            return w;\n        });\n        let tk = cfg.subTaskName(utils_1.taskStringVal(dt.name, cfg.oper));\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            console.log('watch, src:', chalk.cyan.call(chalk, cfg.option.src));\n            gulp.watch(utils_1.taskSourceVal(cfg.option.src, cfg.oper), watchs);\n        });\n        if (_.isNumber(dt.order)) {\n            return {\n                name: tk,\n                order: dt.order\n            };\n        }\n        return tk;\n    };\n}\nfunction createPipesTask(dt) {\n    return (gulp, cfg) => {\n        let tk = cfg.subTaskName(utils_1.taskStringVal(dt.name, cfg.oper));\n        console.log('register pipes  dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            let src = Promise.resolve(gulp.src(utils_1.taskSourceVal(dt.src, cfg.oper) || utils_1.taskSourceVal(cfg.option.src, cfg.oper)));\n            if (dt.pipes) {\n                let pipes = _.isFunction(dt.pipes) ? dt.pipes(cfg, dt) : dt.pipes;\n                _.each(pipes, (p) => {\n                    src = src.then(psrc => {\n                        return Promise.resolve((_.isFunction(p) ? p(cfg, dt, gulp) : p))\n                            .then(stram => {\n                            return psrc.pipe(stram);\n                        });\n                    });\n                });\n            }\n            else if (dt.pipe) {\n                src = src.then((stream => {\n                    return dt.pipe(stream, cfg, dt);\n                }));\n            }\n            src.then(stream => {\n                if (dt.output) {\n                    let outputs = _.isFunction(dt.output) ? dt.output(cfg, dt) : dt.output;\n                    return Promise.all(_.map(outputs, output => {\n                        return new Promise((resolve, reject) => {\n                            Promise.resolve((_.isFunction(output) ? output(stream, cfg, dt, gulp) : output))\n                                .then(output => {\n                                stream.pipe(output)\n                                    .once('end', resolve)\n                                    .once('error', reject);\n                            });\n                        });\n                    }));\n                }\n                else {\n                    return new Promise((resolve, reject) => {\n                        stream.pipe(gulp.dest(cfg.getDist(dt)))\n                            .once('end', resolve)\n                            .once('error', reject);\n                    });\n                }\n            });\n            return src.catch(err => {\n                console.log(chalk.red(err));\n            });\n        });\n        if (_.isNumber(dt.order)) {\n            return {\n                name: tk,\n                order: dt.order\n            };\n        }\n        return tk;\n    };\n}\n","import * as _ from 'lodash';\r\nimport { Gulp, WatchEvent } from 'gulp';\r\nimport * as chalk from 'chalk';\r\n\r\nimport { ITaskResult, Pipe, IDynamicTask, IEnvOption, Operation, ITaskConfig, Task } from './TaskConfig';\r\nimport { taskSourceVal, taskStringVal } from './utils';\r\n\r\n/**\r\n * dynamic build tasks.\r\n * \r\n * @export\r\n * @param {(DynamicTask | DynamicTask[])} tasks\r\n * @param {Operation} oper\r\n * @returns {Task[]}\r\n */\r\nexport function generateTask(tasks: IDynamicTask | IDynamicTask[], oper: Operation, env: IEnvOption): Task[] {\r\n    let taskseq: Task[] = [];\r\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\r\n        if (dt.oper && (dt.oper & oper) <= 0) {\r\n            return;\r\n        }\r\n        if (dt.watch) {\r\n            if (!env.watch) {\r\n                return;\r\n            }\r\n            taskseq.push(createWatchTask(dt));\r\n        } else if (_.isFunction(dt.task)) {\r\n            // custom task\r\n            taskseq.push(createTask(dt));\r\n        } else {\r\n            // pipe stream task.\r\n            taskseq.push(createPipesTask(dt));\r\n        }\r\n    });\r\n\r\n    return taskseq;\r\n}\r\n\r\n\r\n\r\n/**\r\n * promise task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createTask(dt: IDynamicTask) {\r\n    return (gulp: Gulp, cfg: ITaskConfig) => {\r\n        let tk = cfg.subTaskName(taskStringVal(dt.name, cfg.oper));\r\n        console.log('register custom dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            return dt.task(cfg, dt, gulp);\r\n        });\r\n        if (_.isNumber(dt.order)) {\r\n            return <ITaskResult>{\r\n                name: tk,\r\n                order: dt.order\r\n            };\r\n        }\r\n        return tk\r\n    };\r\n}\r\n/**\r\n * create dynamic watch task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createWatchTask(dt: IDynamicTask) {\r\n    return (gulp: Gulp, cfg: ITaskConfig) => {\r\n        let watchs = _.isFunction(dt.watch) ? dt.watch(cfg) : dt.watch;\r\n        if (!_.isFunction(_.last(watchs))) {\r\n            watchs.push(<WatchCallback>(event: WatchEvent) => {\r\n                dt.watchChanged && dt.watchChanged(event, cfg);\r\n            });\r\n        }\r\n        watchs = _.map(watchs, w => {\r\n            if (_.isString(w)) {\r\n                return cfg.subTaskName(w);\r\n            }\r\n            return w;\r\n        })\r\n        let tk = cfg.subTaskName(taskStringVal(dt.name, cfg.oper));\r\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            console.log('watch, src:', chalk.cyan.call(chalk, cfg.option.src));\r\n            gulp.watch(taskSourceVal(cfg.option.src, cfg.oper), watchs)\r\n        });\r\n\r\n        if (_.isNumber(dt.order)) {\r\n            return <ITaskResult>{\r\n                name: tk,\r\n                order: dt.order\r\n            };\r\n        }\r\n        return tk;\r\n    };\r\n}\r\nfunction createPipesTask(dt: IDynamicTask) {\r\n    return (gulp: Gulp, cfg: ITaskConfig) => {\r\n\r\n        let tk = cfg.subTaskName(taskStringVal(dt.name, cfg.oper));\r\n        console.log('register pipes  dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            let src = Promise.resolve(gulp.src(taskSourceVal(dt.src, cfg.oper) || taskSourceVal(cfg.option.src, cfg.oper)));\r\n            if (dt.pipes) {\r\n                let pipes = _.isFunction(dt.pipes) ? dt.pipes(cfg, dt) : dt.pipes;\r\n                _.each(pipes, (p: Pipe) => {\r\n                    src = src.then(psrc => {\r\n                        return Promise.resolve((_.isFunction(p) ? p(cfg, dt, gulp) : p))\r\n                            .then(stram => {\r\n                                return psrc.pipe(stram)\r\n                            });\r\n                    });\r\n                })\r\n            } else if (dt.pipe) {\r\n                src = src.then((stream => {\r\n                    return dt.pipe(stream, cfg, dt);\r\n                }));\r\n            }\r\n            src.then(stream => {\r\n                if (dt.output) {\r\n                    let outputs = _.isFunction(dt.output) ? dt.output(cfg, dt) : dt.output;\r\n                    return Promise.all(_.map(outputs, output => {\r\n                        return new Promise((resolve, reject) => {\r\n                            Promise.resolve<NodeJS.ReadWriteStream>((_.isFunction(output) ? output(stream, cfg, dt, gulp) : output))\r\n                                .then(output => {\r\n                                    stream.pipe(output)\r\n                                        .once('end', resolve)\r\n                                        .once('error', reject);\r\n                                });\r\n\r\n                        });\r\n                    }));\r\n                } else {\r\n                    return new Promise((resolve, reject) => {\r\n                        stream.pipe(gulp.dest(cfg.getDist(dt)))\r\n                            .once('end', resolve)\r\n                            .once('error', reject);\r\n                    });\r\n                }\r\n            });\r\n            return src.catch(err => {\r\n                console.log(chalk.red(err));\r\n            });\r\n        });\r\n\r\n        if (_.isNumber(dt.order)) {\r\n            return <ITaskResult>{\r\n                name: tk,\r\n                order: dt.order\r\n            };\r\n        }\r\n        return tk;\r\n    }\r\n}\r\n"]}