{"version":3,"sources":["generateTask.js","generateTask.ts"],"names":["generateTask","tasks","oper","env","taskseq","_","each","isArray","dt","watch","push","createWatchTask","isFunction","task","createTask","createPipesTask","factory","cfg","gulp","tk","subTaskName","name","console","log","chalk","cyan","DynamicTask","order","watchs","last","event","watchChanged","map","w","isString","call","option","src","getSrc","taskPromise","Promise","resolve","pipes","then","psrc","all","p","streams","stream","pipe","reject","rt","err","once","output","outputs","dest","getDist","catch","red","process","exit","require","coregulp","decorator","_classCallCheck","this","config","exports"],"mappings":"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","file":"../generateTask.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst coregulp = require('gulp');\nconst chalk = require('chalk');\nclass DynamicTask {\n    constructor(decorator, factory) {\n        this.decorator = decorator;\n        this.factory = factory;\n    }\n    setup(config, gulp) {\n        let name = this.factory(config, gulp || coregulp);\n        if (name) {\n            this.decorator.name = name;\n        }\n        return name;\n    }\n}\nfunction generateTask(tasks, oper, env) {\n    let taskseq = [];\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\n        if (oper && dt.oper && (dt.oper & oper) <= 0) {\n            return;\n        }\n        if (env && dt.watch) {\n            if (!env.watch) {\n                return;\n            }\n            taskseq.push(createWatchTask(dt));\n        }\n        else if (_.isFunction(dt.task)) {\n            taskseq.push(createTask(dt));\n        }\n        else {\n            taskseq.push(createPipesTask(dt));\n        }\n    });\n    return taskseq;\n}\nexports.generateTask = generateTask;\nfunction createTask(dt) {\n    let factory = (cfg, gulp) => {\n        let tk = cfg.subTaskName(dt.name);\n        console.log('register custom dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            return dt.task(cfg, dt, gulp);\n        });\n        return tk;\n    };\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: !!dt.watch }, factory);\n}\nfunction createWatchTask(dt) {\n    let factory = (cfg, gulp) => {\n        let watchs = _.isFunction(dt.watch) ? dt.watch(cfg) : dt.watch;\n        if (!_.isFunction(_.last(watchs))) {\n            watchs.push((event) => {\n                dt.watchChanged && dt.watchChanged(event, cfg);\n            });\n        }\n        watchs = _.map(watchs, w => {\n            if (_.isString(w)) {\n                return cfg.subTaskName(w);\n            }\n            return w;\n        });\n        let tk = cfg.subTaskName(dt);\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            console.log('watch, src:', chalk.cyan.call(chalk, cfg.option.src));\n            gulp.watch(cfg.getSrc(dt), watchs);\n        });\n        return tk;\n    };\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: !!dt.watch }, factory);\n}\nfunction createPipesTask(dt) {\n    let factory = (cfg, gulp) => {\n        let tk = cfg.subTaskName(dt);\n        console.log('register pipes  dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            let taskPromise = Promise.resolve(gulp.src(cfg.getSrc(dt)));\n            if (dt.pipes) {\n                let pipes = _.isFunction(dt.pipes) ? dt.pipes(cfg, dt, gulp) : dt.pipes;\n                taskPromise = taskPromise.then(psrc => {\n                    return Promise.all(_.map(pipes, (p) => {\n                        return _.isFunction(p) ? p(cfg, dt, gulp) : p;\n                    }))\n                        .then(streams => {\n                        _.each(streams, stream => {\n                            psrc = psrc.pipe(stream);\n                        });\n                        return psrc;\n                    });\n                });\n            }\n            else if (dt.pipe) {\n                taskPromise = taskPromise.then((stream => {\n                    return new Promise((resolve, reject) => {\n                        let rt = dt.pipe(stream, cfg, dt, (err) => {\n                            if (err) {\n                                reject(err);\n                            }\n                            else {\n                                resolve(stream);\n                            }\n                        });\n                        if (rt) {\n                            Promise.resolve(rt)\n                                .then(stream => {\n                                stream\n                                    .once('end', () => {\n                                    resolve(stream);\n                                })\n                                    .once('error', reject);\n                            });\n                        }\n                    });\n                }));\n            }\n            if (dt.output !== null) {\n                taskPromise = taskPromise.then(stream => {\n                    if (dt.output) {\n                        let outputs = _.isFunction(dt.output) ? dt.output(cfg, dt) : dt.output;\n                        return Promise.all(_.map(outputs, output => {\n                            return Promise.resolve((_.isFunction(output) ? output(stream, cfg, dt, gulp) : output))\n                                .then(output => {\n                                return new Promise((resolve, reject) => {\n                                    stream.pipe(output)\n                                        .once('end', () => {\n                                        resolve(output);\n                                    })\n                                        .once('error', reject);\n                                });\n                            });\n                        }));\n                    }\n                    else {\n                        return new Promise((resolve, reject) => {\n                            let output = gulp.dest(cfg.getDist(dt));\n                            stream.pipe(output)\n                                .once('end', () => {\n                                resolve(output);\n                            })\n                                .once('error', reject);\n                        });\n                    }\n                });\n            }\n            else {\n                taskPromise = taskPromise.then(stream => {\n                    return new Promise((resolve, reject) => {\n                        stream\n                            .once('end', () => {\n                            resolve(stream);\n                        })\n                            .once('error', reject);\n                    });\n                });\n            }\n            return taskPromise.catch(err => {\n                console.log(chalk.red(err));\n                process.exit(0);\n            });\n        });\n        return tk;\n    };\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: !!dt.watch }, factory);\n}\n","import * as _ from 'lodash';\r\nimport { Gulp, WatchEvent } from 'gulp';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\n\r\nimport { ITaskInfo, TaskResult, Pipe, IDynamicTask, IEnvOption, Operation, ITaskConfig, ITask } from './TaskConfig';\r\n\r\ntype factory = (config: ITaskConfig, gulp: Gulp) => TaskResult;\r\nclass DynamicTask implements ITask {\r\n    constructor(public decorator: ITaskInfo, private factory: factory) {\r\n    }\r\n    setup(config: ITaskConfig, gulp?: Gulp) {\r\n        let name = this.factory(config, gulp || coregulp);\r\n        if (name) {\r\n            this.decorator.name = name;\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\n/**\r\n * dynamic build tasks.\r\n * \r\n * @export\r\n * @param {(DynamicTask | DynamicTask[])} tasks\r\n * @param {Operation} oper\r\n * @returns {ITask[]}\r\n */\r\nexport function generateTask(tasks: IDynamicTask | IDynamicTask[], oper?: Operation, env?: IEnvOption): ITask[] {\r\n    let taskseq: ITask[] = [];\r\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\r\n        if (oper && dt.oper && (dt.oper & oper) <= 0) {\r\n            return;\r\n        }\r\n        if (env && dt.watch) {\r\n            if (!env.watch) {\r\n                return;\r\n            }\r\n            taskseq.push(createWatchTask(dt));\r\n        } else if (_.isFunction(dt.task)) {\r\n            // custom task\r\n            taskseq.push(createTask(dt));\r\n        } else {\r\n            // pipe stream task.\r\n            taskseq.push(createPipesTask(dt));\r\n        }\r\n    });\r\n\r\n    return taskseq;\r\n}\r\n\r\n\r\n\r\n/**\r\n * promise task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createTask(dt: IDynamicTask) {\r\n    let factory = (cfg: ITaskConfig, gulp: Gulp) => {\r\n        let tk = cfg.subTaskName(dt.name);\r\n        console.log('register custom dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            return dt.task(cfg, dt, gulp);\r\n        });\r\n\r\n        return tk\r\n    };\r\n\r\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: !!dt.watch }, factory);\r\n}\r\n/**\r\n * create dynamic watch task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createWatchTask(dt: IDynamicTask) {\r\n    let factory = (cfg: ITaskConfig, gulp: Gulp) => {\r\n        let watchs = _.isFunction(dt.watch) ? dt.watch(cfg) : dt.watch;\r\n        if (!_.isFunction(_.last(watchs))) {\r\n            watchs.push(<WatchCallback>(event: WatchEvent) => {\r\n                dt.watchChanged && dt.watchChanged(event, cfg);\r\n            });\r\n        }\r\n        watchs = _.map(watchs, w => {\r\n            if (_.isString(w)) {\r\n                return cfg.subTaskName(w);\r\n            }\r\n            return w;\r\n        })\r\n        let tk = cfg.subTaskName(dt);\r\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            console.log('watch, src:', chalk.cyan.call(chalk, cfg.option.src));\r\n            gulp.watch(cfg.getSrc(dt), watchs)\r\n        });\r\n\r\n        return tk;\r\n    };\r\n\r\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: !!dt.watch }, factory);\r\n}\r\nfunction createPipesTask(dt: IDynamicTask) {\r\n    let factory = (cfg: ITaskConfig, gulp: Gulp) => {\r\n\r\n        let tk = cfg.subTaskName(dt);\r\n        console.log('register pipes  dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            let taskPromise = Promise.resolve(gulp.src(cfg.getSrc(dt)));\r\n            if (dt.pipes) {\r\n                let pipes = _.isFunction(dt.pipes) ? dt.pipes(cfg, dt, gulp) : dt.pipes;\r\n                taskPromise = taskPromise.then(psrc => {\r\n                    return Promise.all(_.map(pipes, (p: Pipe) => {\r\n                        return _.isFunction(p) ? p(cfg, dt, gulp) : p;\r\n                    }))\r\n                        .then(streams => {\r\n                            _.each(streams, stream => {\r\n                                psrc = psrc.pipe(stream);\r\n                            });\r\n                            return psrc;\r\n                        })\r\n                });\r\n\r\n            } else if (dt.pipe) {\r\n                taskPromise = taskPromise.then((stream => {\r\n                    return new Promise((resolve, reject) => {\r\n                        let rt = dt.pipe(stream, cfg, dt, (err) => {\r\n                            if (err) {\r\n                                reject(err);\r\n                            } else {\r\n                                resolve(stream);\r\n                            }\r\n                        });\r\n                        if (rt) {\r\n                            Promise.resolve(rt)\r\n                                .then(stream => {\r\n                                    stream\r\n                                        .once('end', () => {\r\n                                            resolve(stream);\r\n                                        })\r\n                                        .once('error', reject);\r\n                                });\r\n                        }\r\n                    });\r\n                }));\r\n            }\r\n\r\n            if (dt.output !== null) {\r\n                taskPromise = taskPromise.then(stream => {\r\n                    if (dt.output) {\r\n                        let outputs = _.isFunction(dt.output) ? dt.output(cfg, dt) : dt.output;\r\n                        return Promise.all(_.map(outputs, output => {\r\n                            return Promise.resolve<NodeJS.ReadWriteStream>((_.isFunction(output) ? output(stream, cfg, dt, gulp) : output))\r\n                                .then(output => {\r\n                                    return new Promise((resolve, reject) => {\r\n                                        stream.pipe(output)\r\n                                            .once('end', () => {\r\n                                                resolve(output);\r\n                                            })\r\n                                            .once('error', reject);\r\n                                    });\r\n                                });\r\n                        }));\r\n                    } else {\r\n                        return new Promise((resolve, reject) => {\r\n                            let output = gulp.dest(cfg.getDist(dt));\r\n                            stream.pipe(output)\r\n                                .once('end', () => {\r\n                                    resolve(output)\r\n                                })\r\n                                .once('error', reject);\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                taskPromise = taskPromise.then(stream => {\r\n                    return new Promise((resolve, reject) => {\r\n                        stream\r\n                            .once('end', () => {\r\n                                resolve(stream);\r\n                            })\r\n                            .once('error', reject);\r\n                    });\r\n                });\r\n            }\r\n\r\n            // return taskPromise;\r\n            return taskPromise.catch(err => {\r\n                console.log(chalk.red(err));\r\n                process.exit(0);\r\n            });\r\n        });\r\n\r\n        return tk;\r\n    }\r\n\r\n    return new DynamicTask({ order: dt.order, oper: dt.oper, watch: !!dt.watch }, factory);\r\n}\r\n\r\n\r\n"]}