{"version":3,"sources":["generateTask.js","generateTask.ts"],"names":["_","require","coregulp","chalk","TaskConfig_1","utils_1","PipeTask_1","DynamicTask","info","factory","ctx","gulp","name","getInfo","taskName","DynamicPipeTask","dt","assert","taskStringVal","option","source","dist","pipe","Promise","resolve","then","cpipe2Promise","stream","pipes","isFunction","concat","output","outputs","PipeTask","generateTask","tasks","match","taskseq","each","isArray","watchTasks","oper","Operation","default","watch","matchTaskInfo","matchTaskGroup","push","createTask","createWatchTask","defaultWatch","subTaskName","exports","task","createCustomTask","createPipesTask","tk","console","log","cyan","order","group","watchs","last","event","watchChanged","map","isString","w","src","getSrc","call"],"mappings":"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","file":"../generateTask.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst coregulp = require('gulp');\nconst chalk = require('chalk');\nconst TaskConfig_1 = require('./TaskConfig');\nconst utils_1 = require('./utils');\nconst PipeTask_1 = require('./PipeTask');\n/**\n * custom dynamic task.\n *\n * @class DynamicTask\n * @implements {ITask}\n */\nclass DynamicTask {\n    constructor(info, factory) {\n        this.info = info;\n        this.factory = factory;\n    }\n    /**\n     * get task info.\n     *\n     * @type {ITaskInfo}\n     * @memberOf PipeTask\n     */\n    getInfo() {\n        return this.info;\n    }\n    setup(ctx, gulp) {\n        let name = this.factory(ctx, this.getInfo(), gulp || coregulp);\n        if (name) {\n            this.info.taskName = name;\n        }\n        return name;\n    }\n}\n/**\n * pipe task for dynamic task.\n *\n * @class DynamicPipeTask\n * @extends {PipeTask}\n */\nclass DynamicPipeTask extends PipeTask_1.PipeTask {\n    constructor(dt, info) {\n        super(info || dt);\n        this.dt = dt;\n        this.info.assert = dt;\n    }\n    getOption(ctx) {\n        this.name = this.name || utils_1.taskStringVal(this.dt.name, ctx);\n        return this.dt || ctx.option;\n    }\n    customPipe(source, ctx, dist, gulp) {\n        if (this.dt.pipe) {\n            return Promise.resolve(super.customPipe(source, ctx, dist, gulp))\n                .then(stream => this.cpipe2Promise(stream, this.dt, ctx, dist, gulp));\n        }\n        else {\n            return super.customPipe(source, ctx, dist, gulp);\n        }\n    }\n    pipes(ctx, dist, gulp) {\n        let pipes = _.isFunction(this.dt.pipes) ? this.dt.pipes(ctx, dist, gulp) : this.dt.pipes;\n        pipes = pipes || [];\n        return pipes.concat(super.pipes(ctx, dist, gulp));\n    }\n    output(ctx, dist, gulp) {\n        if (this.dt.output === null) {\n            return [stream => stream];\n        }\n        let outputs = _.isFunction(this.dt.output) ? this.dt.output(ctx, dist, gulp) : this.dt.output;\n        outputs = outputs || [];\n        return outputs.concat(super.output(ctx, dist, gulp));\n    }\n}\n/**\n * dynamic build tasks.\n *\n * @export\n * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\n * @param {ITaskInfo} [match]\n * @returns {ITask[]}\n */\nfunction generateTask(tasks, match) {\n    let taskseq = [];\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\n        if (dt.watchTasks) {\n            dt.oper = (dt.oper || TaskConfig_1.Operation.default) | TaskConfig_1.Operation.watch;\n        }\n        if (!utils_1.matchTaskInfo(dt, match)) {\n            return;\n        }\n        if (!utils_1.matchTaskGroup(dt, match)) {\n            return;\n        }\n        taskseq.push(createTask(dt));\n        if (dt.watch && match && (match.oper & TaskConfig_1.Operation.watch)) {\n            taskseq.push(createWatchTask({\n                oper: TaskConfig_1.Operation.defaultWatch,\n                name: (ctx) => ctx.subTaskName(dt) + '-twatch',\n                watchTasks: (ctx) => [ctx.subTaskName(dt)]\n            }));\n        }\n    });\n    return taskseq;\n}\nexports.generateTask = generateTask;\n/**\n * create task by dynamic option.\n *\n * @export\n * @param {IDynamicTaskOption} dt\n * @returns {ITask}\n */\nfunction createTask(dt) {\n    let task;\n    if (dt.oper & TaskConfig_1.Operation.watch) {\n        task = createWatchTask(dt);\n    }\n    else if (_.isFunction(dt.task)) {\n        // custom task\n        task = createCustomTask(dt);\n    }\n    else {\n        // pipe stream task.\n        task = createPipesTask(dt);\n    }\n    return task;\n}\nexports.createTask = createTask;\n/**\n * create custom task.\n *\n * @param {IDynamicTaskOption} dt\n * @returns {ITask}\n */\nfunction createCustomTask(dt) {\n    let factory = (ctx, info, gulp) => {\n        let tk = ctx.subTaskName(info);\n        console.log('register custom dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            return dt.task(ctx, dt, gulp);\n        });\n        return tk;\n    };\n    return new DynamicTask({ name: dt.name, order: dt.order, oper: dt.oper, group: dt.group, assert: dt }, factory);\n}\n/**\n * create dynamic watch task.\n *\n * @export\n * @param {IDynamicTaskOption} dt\n * @returns {ITask}\n */\nfunction createWatchTask(dt) {\n    let factory = (ctx, info, gulp) => {\n        let watchs = _.isFunction(dt.watchTasks) ? dt.watchTasks(ctx, dt) : dt.watchTasks;\n        if (!_.isFunction(_.last(watchs))) {\n            watchs.push((event) => {\n                dt.watchChanged && dt.watchChanged(event, ctx);\n            });\n        }\n        watchs = _.map(watchs, w => {\n            if (_.isString(w)) {\n                return ctx.subTaskName(w);\n            }\n            return w;\n        });\n        let tk = ctx.subTaskName(info);\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\n        gulp.task(tk, () => {\n            let src = ctx.getSrc(info);\n            console.log('watch, src:', chalk.cyan.call(chalk, src));\n            gulp.watch(src, watchs);\n        });\n        return tk;\n    };\n    return new DynamicTask({ name: dt.name, order: dt.order, oper: dt.oper, group: dt.group, assert: dt }, factory);\n}\n/**\n * create pipe task.\n *\n * @export\n * @param {IDynamicTaskOption} dt\n * @returns {ITask}\n */\nfunction createPipesTask(dt) {\n    return new DynamicPipeTask(dt);\n}\n","import * as _ from 'lodash';\r\nimport { Gulp, WatchEvent } from 'gulp';\r\nimport * as coregulp from 'gulp';\r\nimport * as chalk from 'chalk';\r\n\r\nimport { IAssertDist, IOutputPipe, Operation, ITaskInfo, ITransform, TaskResult, IPipe, IDynamicTaskOption, ITaskContext, ITask } from './TaskConfig';\r\nimport { matchTaskGroup, matchTaskInfo, taskStringVal } from './utils';\r\nimport { PipeTask } from './PipeTask';\r\n\r\ntype factory = (ctx: ITaskContext, info: ITaskInfo, gulp: Gulp) => TaskResult;\r\n/**\r\n * custom dynamic task.\r\n * \r\n * @class DynamicTask\r\n * @implements {ITask}\r\n */\r\nclass DynamicTask implements ITask {\r\n    constructor(protected info: ITaskInfo, private factory: factory) {\r\n    }\r\n\r\n    /**\r\n     * get task info.\r\n     * \r\n     * @type {ITaskInfo}\r\n     * @memberOf PipeTask\r\n     */\r\n    public getInfo(): ITaskInfo {\r\n        return this.info;\r\n    }\r\n\r\n    setup(ctx: ITaskContext, gulp?: Gulp) {\r\n        let name = this.factory(ctx, this.getInfo(), gulp || coregulp);\r\n        if (name) {\r\n            this.info.taskName = name;\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\n/**\r\n * pipe task for dynamic task.\r\n * \r\n * @class DynamicPipeTask\r\n * @extends {PipeTask}\r\n */\r\nclass DynamicPipeTask extends PipeTask {\r\n    constructor(private dt: IDynamicTaskOption, info?: ITaskInfo) {\r\n        super(info || dt);\r\n        this.info.assert = dt;\r\n    }\r\n\r\n    protected getOption(ctx: ITaskContext) {\r\n        this.name = this.name || taskStringVal(this.dt.name, ctx);\r\n        return this.dt || ctx.option;\r\n    }\r\n\r\n    protected customPipe(source: ITransform, ctx: ITaskContext, dist: IAssertDist, gulp: Gulp) {\r\n        if (this.dt.pipe) {\r\n            return Promise.resolve(super.customPipe(source, ctx, dist, gulp))\r\n                .then(stream => this.cpipe2Promise(stream, this.dt, ctx, dist, gulp));\r\n        } else {\r\n            return super.customPipe(source, ctx, dist, gulp)\r\n        }\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): IPipe[] {\r\n        let pipes = _.isFunction(this.dt.pipes) ? this.dt.pipes(ctx, dist, gulp) : this.dt.pipes;\r\n        pipes = pipes || [];\r\n        return pipes.concat(super.pipes(ctx, dist, gulp));\r\n    }\r\n\r\n    output(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): IOutputPipe[] {\r\n        if (this.dt.output === null) {\r\n            return [stream => stream];\r\n        }\r\n        let outputs = _.isFunction(this.dt.output) ? this.dt.output(ctx, dist, gulp) : this.dt.output;\r\n        outputs = outputs || [];\r\n        return outputs.concat(super.output(ctx, dist, gulp));\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * dynamic build tasks.\r\n * \r\n * @export\r\n * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n * @param {ITaskInfo} [match]\r\n * @returns {ITask[]}\r\n */\r\nexport function generateTask(tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n    let taskseq: ITask[] = [];\r\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\r\n\r\n        if (dt.watchTasks) {\r\n            dt.oper = (dt.oper || Operation.default) | Operation.watch;\r\n        }\r\n        if (!matchTaskInfo(dt, match)) {\r\n            return;\r\n        }\r\n\r\n        if (!matchTaskGroup(dt, match)) {\r\n            return;\r\n        }\r\n\r\n        taskseq.push(createTask(dt));\r\n        if (dt.watch && match && (match.oper & Operation.watch)) {\r\n            taskseq.push(createWatchTask({\r\n                oper: Operation.defaultWatch,\r\n                name: (ctx) => ctx.subTaskName(dt) + '-twatch',\r\n                watchTasks: (ctx) => [ctx.subTaskName(dt)]\r\n            }));\r\n        }\r\n    });\r\n\r\n    return taskseq;\r\n}\r\n\r\n/**\r\n * create task by dynamic option.\r\n * \r\n * @export\r\n * @param {IDynamicTaskOption} dt\r\n * @returns {ITask}\r\n */\r\nexport function createTask(dt: IDynamicTaskOption): ITask {\r\n    let task: ITask;\r\n    if (dt.oper & Operation.watch) {\r\n        task = createWatchTask(dt);\r\n    } else if (_.isFunction(dt.task)) {\r\n        // custom task\r\n        task = createCustomTask(dt);\r\n    } else {\r\n        // pipe stream task.\r\n        task = createPipesTask(dt);\r\n    }\r\n    return task;\r\n}\r\n\r\n\r\n/**\r\n * create custom task.\r\n * \r\n * @param {IDynamicTaskOption} dt\r\n * @returns {ITask}\r\n */\r\nfunction createCustomTask(dt: IDynamicTaskOption): ITask {\r\n    let factory = (ctx: ITaskContext, info: ITaskInfo, gulp: Gulp) => {\r\n        let tk = ctx.subTaskName(info);\r\n        console.log('register custom dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            return dt.task(ctx, dt, gulp);\r\n        });\r\n\r\n        return tk\r\n    };\r\n\r\n    return new DynamicTask({ name: dt.name, order: dt.order, oper: dt.oper, group: dt.group, assert: dt }, factory);\r\n}\r\n\r\n\r\n/**\r\n * create dynamic watch task.\r\n * \r\n * @export\r\n * @param {IDynamicTaskOption} dt\r\n * @returns {ITask}\r\n */\r\nfunction createWatchTask(dt: IDynamicTaskOption): ITask {\r\n    let factory = (ctx: ITaskContext, info: ITaskInfo, gulp: Gulp) => {\r\n        let watchs = _.isFunction(dt.watchTasks) ? dt.watchTasks(ctx, dt) : dt.watchTasks;\r\n        if (!_.isFunction(_.last(watchs))) {\r\n            watchs.push(<WatchCallback>(event: WatchEvent) => {\r\n                dt.watchChanged && dt.watchChanged(event, ctx);\r\n            });\r\n        }\r\n        watchs = _.map(watchs, w => {\r\n            if (_.isString(w)) {\r\n                return ctx.subTaskName(w);\r\n            }\r\n            return w;\r\n        })\r\n        let tk = ctx.subTaskName(info);\r\n        console.log('register watch  dynamic task:', chalk.cyan(tk));\r\n        gulp.task(tk, () => {\r\n            let src = ctx.getSrc(info);\r\n            console.log('watch, src:', chalk.cyan.call(chalk, src));\r\n            gulp.watch(src, watchs)\r\n        });\r\n\r\n        return tk;\r\n    };\r\n\r\n    return new DynamicTask({ name: dt.name, order: dt.order, oper: dt.oper, group: dt.group, assert: dt }, factory);\r\n}\r\n\r\n/**\r\n * create pipe task.\r\n * \r\n * @export\r\n * @param {IDynamicTaskOption} dt\r\n * @returns {ITask}\r\n */\r\nfunction createPipesTask(dt: IDynamicTaskOption): ITask {\r\n    return new DynamicPipeTask(dt);\r\n}\r\n"]}