{"version":3,"sources":["generateTask.ts"],"names":["generateTask","ctx","tasks","match","taskseq","_","each","isArray","dtp","oper","to","Operation_1","Operation","default","watchTasks","watch","match_1","matchCompare","autoWatch","push","createTask","task","createWatchTask","shell","ShellTask_1","ShellTask","execFiles","ExecFileTask_1","ExecFileTask","isFunction","createCustomTask","createPipesTask","DynamicTask_1","DynamicTask","name","order","group","assert","DynamicWatchTask_1","DynamicWatchTask","DynamicPipeTask_1","DynamicPipeTask","require","exports"],"mappings":"YAuBA,SAAAA,cAA6BC,EAAmBC,EAAkDC,GAC9F,GAAIC,KAkBJ,OAjBAC,GAAEC,KAAKD,EAAEE,QAAQL,GAASA,GAASA,GAAQ,SAAAM,GACvCA,EAAIC,KAAOD,EAAIC,KAAOR,EAAIS,GAAGF,EAAIC,MAAQE,YAAAC,UAAUC,QAC/CL,EAAIM,aACJN,EAAIC,KAAOD,EAAIC,KAAOE,YAAAC,UAAUG,OAG/BC,QAAAC,aAAahB,EAAKO,EAAKL,MAIxBK,EAAIO,OAAWP,EAAIC,KAAOE,YAAAC,UAAUG,QACpCP,EAAIC,KAAOD,EAAIC,KAAOE,YAAAC,UAAUM,WAEpCd,EAAQe,KAAKC,WAAWnB,EAAKO,OAI1BJ,EAUX,QAAAgB,YAAoBnB,EAAmBO,GACnC,GAAIa,EAcJ,OAZIA,GADApB,EAAIS,GAAGF,EAAIC,MAAQE,YAAAC,UAAUG,MACtBO,gBAAgBd,GAChBA,EAAIe,MACJ,GAAIC,aAAAC,UAAUjB,EAAKA,EAAIe,OACvBf,EAAIkB,UACJ,GAAIC,gBAAAC,aAAapB,EAAKA,EAAIkB,WAC1BrB,EAAEwB,WAAWrB,EAAIa,MAEjBS,iBAAiBtB,GAGjBuB,gBAAgBvB,GAY/B,QAAAsB,kBAA0BtB,GACtB,MAAO,IAAIwB,eAAAC,aAAcC,KAAM1B,EAAI0B,KAAMC,MAAO3B,EAAI2B,MAAO1B,KAAMD,EAAIC,KAAM2B,MAAO5B,EAAI4B,MAAOC,OAAQ7B,GAAOA,GAWhH,QAAAc,iBAAyBd,GACrB,MAAO,IAAI8B,oBAAAC,kBAAmBL,KAAM1B,EAAI0B,KAAMC,MAAO3B,EAAI2B,MAAO1B,KAAMD,EAAIC,KAAM2B,MAAO5B,EAAI4B,MAAOC,OAAQ7B,GAAOA,GAUrH,QAAAuB,iBAAyBvB,GACrB,MAAO,IAAIgC,mBAAAC,gBAAgBjC,yDArG/B,IAAAH,GAAAqC,QAAA,UACA1B,QAAA0B,QAAA,iBACAV,cAAAU,QAAA,uBACAJ,mBAAAI,QAAA,4BACAF,kBAAAE,QAAA,2BACAlB,YAAAkB,QAAA,qBACAf,eAAAe,QAAA,wBAIA/B,YAAA+B,QAAA,cAaAC,SAAA3C,aAAAA","file":"../generateTask.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { matchCompare } from './utils/match';\r\nimport { DynamicTask } from './tasks/DynamicTask';\r\nimport { DynamicWatchTask } from './tasks/DynamicWatchTask';\r\nimport { DynamicPipeTask } from './tasks/DynamicPipeTask';\r\nimport { ShellTask } from './tasks/ShellTask';\r\nimport { ExecFileTask } from './tasks/ExecFileTask';\r\nimport { ITaskContext } from './ITaskContext';\r\nimport { IDynamicTaskOption } from './IDynamicTaskOption';\r\nimport { ITask, ITaskInfo } from './ITask';\r\nimport { Operation } from './Operation';\r\n\r\n\r\n\r\n/**\r\n * dynamic build tasks.\r\n *\r\n * @export\r\n * @param {ITaskContext} ctx\r\n * @param {(IDynamicTaskOption | IDynamicTaskOption[])} tasks\r\n * @param {ITaskInfo} [match]\r\n * @returns {ITask[]}\r\n */\r\nexport function generateTask(ctx: ITaskContext, tasks: IDynamicTaskOption | IDynamicTaskOption[], match?: ITaskInfo): ITask[] {\r\n    let taskseq: ITask[] = [];\r\n    _.each(_.isArray(tasks) ? tasks : [tasks], dtp => {\r\n        dtp.oper = dtp.oper ? ctx.to(dtp.oper) : Operation.default;\r\n        if (dtp.watchTasks) {\r\n            dtp.oper = dtp.oper | Operation.watch;\r\n        }\r\n\r\n        if (!matchCompare(ctx, dtp, match)) {\r\n            return;\r\n        }\r\n\r\n        if (dtp.watch && !(dtp.oper & Operation.watch)) {\r\n            dtp.oper = dtp.oper | Operation.autoWatch;\r\n        }\r\n        taskseq.push(createTask(ctx, dtp));\r\n\r\n    });\r\n\r\n    return taskseq;\r\n}\r\n\r\n/**\r\n * create task by dynamic option.\r\n *\r\n * @param {ITaskContext} ctx\r\n * @param {IDynamicTaskOption} dtp\r\n * @returns {ITask}\r\n */\r\nfunction createTask(ctx: ITaskContext, dtp: IDynamicTaskOption): ITask {\r\n    let task: ITask;\r\n    if (ctx.to(dtp.oper) & Operation.watch) {\r\n        task = createWatchTask(dtp);\r\n    } else if (dtp.shell) {\r\n        task = new ShellTask(dtp, dtp.shell);\r\n    } else if (dtp.execFiles) {\r\n        task = new ExecFileTask(dtp, dtp.execFiles);\r\n    } else if (_.isFunction(dtp.task)) {\r\n        // custom task\r\n        task = createCustomTask(dtp);\r\n    } else {\r\n        // pipe stream task.\r\n        task = createPipesTask(dtp);\r\n    }\r\n    return task;\r\n}\r\n\r\n\r\n/**\r\n * create custom task.\r\n *\r\n * @param {IDynamicTaskOption} dtp\r\n * @returns {ITask}\r\n */\r\nfunction createCustomTask(dtp: IDynamicTaskOption): ITask {\r\n    return new DynamicTask({ name: dtp.name, order: dtp.order, oper: dtp.oper, group: dtp.group, assert: dtp }, dtp);\r\n}\r\n\r\n\r\n/**\r\n * create dynamic watch task.\r\n *\r\n * @export\r\n * @param {IDynamicTaskOption} dtp\r\n * @returns {ITask}\r\n */\r\nfunction createWatchTask(dtp: IDynamicTaskOption): ITask {\r\n    return new DynamicWatchTask({ name: dtp.name, order: dtp.order, oper: dtp.oper, group: dtp.group, assert: dtp }, dtp);\r\n}\r\n\r\n/**\r\n * create pipe task.\r\n *\r\n * @export\r\n * @param {IDynamicTaskOption} dtp\r\n * @returns {ITask}\r\n */\r\nfunction createPipesTask(dtp: IDynamicTaskOption): ITask {\r\n    return new DynamicPipeTask(dtp);\r\n}\r\n"]}