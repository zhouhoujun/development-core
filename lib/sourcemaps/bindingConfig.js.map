{"version":3,"sources":["bindingConfig.js","bindingConfig.ts"],"names":["bindingConfig","cfg","oper","currentOperation","env","fileFilter","utils_1","files","runSequence","taskSequence_1","addToSequence","generateTask","tasks","match","generateTask_1","_","extend","watch","findTasks","mdl","decorator_1","findTasksInModule","findTasksInDir","dirs","findTaskDefine","findTaskDefineInModule","bind","findTaskDefineInDir","subTaskName","dt","deft","arguments","length","undefined","name","isString","taskStringVal","parentName","option","getSrc","assert","src","taskSourceVal","getDist","ds","dist","getCurrentDist","deploy","TaskConfig_1","Operation","release","e2e","test","build","require","exports"],"mappings":"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","file":"../bindingConfig.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst generateTask_1 = require('./generateTask');\nconst taskSequence_1 = require('./taskSequence');\nconst utils_1 = require('./utils');\nconst decorator_1 = require('./decorator');\nfunction bindingConfig(cfg) {\n    if (!cfg.oper) {\n        cfg.oper = currentOperation(cfg.env);\n    }\n    cfg.fileFilter = cfg.fileFilter || utils_1.files;\n    cfg.runSequence = cfg.runSequence || taskSequence_1.runSequence;\n    cfg.addToSequence = cfg.addToSequence || taskSequence_1.addToSequence;\n    cfg.generateTask = cfg.generateTask || ((tasks, match) => {\n        return generateTask_1.generateTask(tasks, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\n    });\n    cfg.findTasks = cfg.findTasks || ((mdl, match) => {\n        return decorator_1.findTasksInModule(mdl, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\n    });\n    cfg.findTasksInDir = cfg.findTasksInDir || ((dirs, match) => {\n        return decorator_1.findTasksInDir(dirs, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\n    });\n    cfg.findTaskDefine = cfg.findTaskDefine || decorator_1.findTaskDefineInModule.bind(cfg);\n    cfg.findTaskDefineInDir = cfg.findTaskDefineInDir || decorator_1.findTaskDefineInDir.bind(cfg);\n    cfg.subTaskName = cfg.subTaskName || ((dt, deft = '') => {\n        let name = '';\n        if (_.isString(dt)) {\n            name = dt;\n        }\n        else if (dt) {\n            name = utils_1.taskStringVal(dt.name, cfg.oper);\n        }\n        let parentName = utils_1.taskStringVal(cfg.option.name, cfg.oper);\n        return parentName ? `${parentName}-${name || deft}` : name;\n    });\n    cfg.getSrc = cfg.getSrc || ((assert) => {\n        let src;\n        if (assert) {\n            src = utils_1.taskSourceVal(assert.src, cfg.oper);\n        }\n        if (!src) {\n            src = utils_1.taskSourceVal(cfg.option.src, cfg.oper);\n        }\n        return src;\n    });\n    cfg.getDist = cfg.getDist || ((ds) => {\n        if (ds) {\n            let dist = getCurrentDist(ds, cfg.oper);\n            if (dist) {\n                return dist;\n            }\n        }\n        return getCurrentDist(cfg.option, cfg.oper);\n    });\n    return cfg;\n}\nexports.bindingConfig = bindingConfig;\nfunction currentOperation(env) {\n    let oper;\n    if (env.deploy) {\n        oper = TaskConfig_1.Operation.deploy;\n    }\n    else if (env.release) {\n        oper = TaskConfig_1.Operation.release;\n    }\n    else if (env.e2e) {\n        oper = TaskConfig_1.Operation.e2e;\n    }\n    else if (env.test) {\n        oper = TaskConfig_1.Operation.test;\n    }\n    else {\n        oper = TaskConfig_1.Operation.build;\n    }\n    return oper;\n}\nexports.currentOperation = currentOperation;\nfunction getCurrentDist(ds, oper) {\n    let dist;\n    switch (oper) {\n        case TaskConfig_1.Operation.build:\n            dist = ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.test:\n            dist = ds.test || ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.e2e:\n            dist = ds.e2e || ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.release:\n            dist = ds.release || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.deploy:\n            dist = ds.deploy || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        default:\n            dist = '';\n            break;\n    }\n    return dist;\n}\n","import * as _ from 'lodash';\r\nimport { IOutputDist, IEnvOption, Operation, ITaskConfig, IAsserts, Src } from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { runSequence, addToSequence } from './taskSequence';\r\nimport { files, taskStringVal, taskSourceVal } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './decorator';\r\n\r\n\r\n\r\n\r\n/**\r\n * binding Config to implement default func.\r\n * \r\n * @export\r\n * @param {TaskConfig} cfg\r\n * @returns {TaskConfig}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig): ITaskConfig {\r\n    if (!cfg.oper) {\r\n        cfg.oper = currentOperation(cfg.env);\r\n    }\r\n    cfg.fileFilter = cfg.fileFilter || files;\r\n    cfg.runSequence = cfg.runSequence || runSequence;\r\n    cfg.addToSequence = cfg.addToSequence || addToSequence;\r\n    cfg.generateTask = cfg.generateTask || ((tasks, match?) => {\r\n        return generateTask(tasks, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\r\n    });\r\n\r\n    cfg.findTasks = cfg.findTasks || ((mdl, match?) => {\r\n        return findTasksInModule(mdl, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\r\n    });\r\n    cfg.findTasksInDir = cfg.findTasksInDir || ((dirs, match?) => {\r\n        return findTasksInDir(dirs, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\r\n    });\r\n\r\n    cfg.findTaskDefine = cfg.findTaskDefine || findTaskDefineInModule.bind(cfg);\r\n    cfg.findTaskDefineInDir = cfg.findTaskDefineInDir || findTaskDefineInDir.bind(cfg);\r\n\r\n    cfg.subTaskName = cfg.subTaskName || ((dt, deft = '') => {\r\n        let name = '';\r\n        if (_.isString(dt)) {\r\n            name = dt;\r\n        } else if (dt) {\r\n            name = taskStringVal(dt.name, cfg.oper)\r\n        }\r\n        let parentName = taskStringVal(cfg.option.name, cfg.oper);\r\n\r\n        return parentName ? `${parentName}-${name || deft}` : name;\r\n    });\r\n\r\n    cfg.getSrc = cfg.getSrc || ((assert?: IAsserts): Src => {\r\n        let src: Src;\r\n        if (assert) {\r\n            src = taskSourceVal(assert.src, cfg.oper)\r\n        }\r\n        if (!src) {\r\n            src = taskSourceVal(cfg.option.src, cfg.oper)\r\n        }\r\n        return src\r\n    });\r\n\r\n    cfg.getDist = cfg.getDist || ((ds?: IOutputDist) => {\r\n        if (ds) {\r\n            let dist = getCurrentDist(ds, cfg.oper);\r\n            if (dist) {\r\n                return dist;\r\n            }\r\n        }\r\n        return getCurrentDist(cfg.option, cfg.oper);\r\n    });\r\n\r\n    return cfg;\r\n}\r\n\r\n\r\n\r\n/**\r\n * get current env Operation.\r\n * \r\n * @export\r\n * @param {EnvOption} env\r\n * @returns\r\n */\r\nexport function currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else if (env.e2e) {\r\n        oper = Operation.e2e;\r\n    } else if (env.test) {\r\n        oper = Operation.test;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n\r\n/**\r\n * get dist.\r\n * \r\n * @param {OutputDist} ds\r\n * @param {Operation} oper\r\n * @returns\r\n */\r\nfunction getCurrentDist(ds: IOutputDist, oper: Operation) {\r\n    let dist: string;\r\n    switch (oper) {\r\n        case Operation.build:\r\n            dist = ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.test:\r\n            dist = ds.test || ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.e2e:\r\n            dist = ds.e2e || ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.release:\r\n            dist = ds.release || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.deploy:\r\n            dist = ds.deploy || taskStringVal(ds.dist, oper);\r\n            break;\r\n        default:\r\n            dist = '';\r\n            break;\r\n    }\r\n    return dist;\r\n}\r\n\r\n\r\n"]}