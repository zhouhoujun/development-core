{"version":3,"sources":["bindingConfig.js","bindingConfig.ts"],"names":["bindingConfig","cfg","oper","currentOperation","env","fileFilter","utils_1","files","runSequence","taskSequence_1","addToSequence","generateTask","tasks","generateTask_1","subTaskName","dt","deft","arguments","length","undefined","name","_","isString","taskStringVal","parentName","option","getSrc","assert","src","taskSourceVal","getDist","ds","dist","getCurrentDist","deploy","TaskConfig_1","Operation","release","e2e","test","build","require","exports"],"mappings":"AAAA,YCaA,SAAAA,eAA8BC,GA4C1B,MA3CKA,GAAIC,OACLD,EAAIC,KAAOC,iBAAiBF,EAAIG,MAEpCH,EAAII,WAAaJ,EAAII,YAAcC,QAAAC,MACnCN,EAAIO,YAAcP,EAAIO,aAAeC,eAAAD,YACrCP,EAAIS,cAAgBT,EAAIS,eAAiBD,eAAAC,cACzCT,EAAIU,aAAeV,EAAIU,cAAiB,SAACC,GACrC,MAAOC,gBAAAF,aAAaC,EAAOX,EAAIC,KAAMD,EAAIG,MAG7CH,EAAIa,YAAcb,EAAIa,aAAgB,SAACC,GAAa,GAATC,GAASC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAF,GAC1CG,EAAO,EACPC,GAAEC,SAASP,GACXK,EAAOL,EACAA,IACPK,EAAOd,QAAAiB,cAAcR,EAAGK,KAAMnB,EAAIC,MAEtC,IAAIsB,GAAalB,QAAAiB,cAActB,EAAIwB,OAAOL,KAAMnB,EAAIC,KAEpD,OAAOsB,GAAgBA,EAAhB,KAA8BJ,GAAQJ,GAASI,GAG1DnB,EAAIyB,OAASzB,EAAIyB,QAAW,SAACC,GACzB,GAAIC,GAAAA,MAOJ,OANID,KACAC,EAAMtB,QAAAuB,cAAcF,EAAOC,IAAK3B,EAAIC,OAEnC0B,IACDA,EAAMtB,QAAAuB,cAAc5B,EAAIwB,OAAOG,IAAK3B,EAAIC,OAErC0B,GAGX3B,EAAI6B,QAAU7B,EAAI6B,SAAY,SAACC,GAC3B,GAAIA,EAAI,CACJ,GAAIC,GAAOC,eAAeF,EAAI9B,EAAIC,KAClC,IAAI8B,EACA,MAAOA,GAGf,MAAOC,gBAAehC,EAAIwB,OAAQxB,EAAIC,OAGnCD,EAUX,QAAAE,kBAAiCC,GAC7B,GAAIF,GAAAA,MAaJ,OAXIA,GADAE,EAAI8B,OACGC,aAAAC,UAAUF,OACV9B,EAAIiC,QACJF,aAAAC,UAAUC,QACVjC,EAAIkC,IACJH,aAAAC,UAAUE,IACVlC,EAAImC,KACJJ,aAAAC,UAAUG,KAEVJ,aAAAC,UAAUI,MAczB,QAAAP,gBAAwBF,EAAiB7B,GACrC,GAAI8B,GAAAA,MACJ,QAAQ9B,GACJ,IAAKiC,cAAAC,UAAUI,MACXR,EAAOD,EAAGS,OAASlC,QAAAiB,cAAcQ,EAAGC,KAAM9B,EAC1C,MACJ,KAAKiC,cAAAC,UAAUG,KACXP,EAAOD,EAAGQ,MAAQR,EAAGS,OAASlC,QAAAiB,cAAcQ,EAAGC,KAAM9B,EACrD,MACJ,KAAKiC,cAAAC,UAAUE,IACXN,EAAOD,EAAGO,KAAOP,EAAGS,OAASlC,QAAAiB,cAAcQ,EAAGC,KAAM9B,EACpD,MACJ,KAAKiC,cAAAC,UAAUC,QACXL,EAAOD,EAAGM,SAAW/B,QAAAiB,cAAcQ,EAAGC,KAAM9B,EAC5C,MACJ,KAAKiC,cAAAC,UAAUF,OACXF,EAAOD,EAAGG,QAAU5B,QAAAiB,cAAcQ,EAAGC,KAAM9B,EAC3C,MACJ,SACI8B,EAAO,GAGf,MAAOA,GAlHX,GAAYX,GAACoB,QAAM,UACnBN,aAAAM,QAA6F,gBAC7F5B,eAAA4B,QAA6B,kBAC7BhC,eAAAgC,QAA2C,kBAC3CnC,QAAAmC,QAAoD,UASpCC,SAAA1C,cAAaA,cAsDb0C,QAAAvC,iBAAgBA","file":"../bindingConfig.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst generateTask_1 = require('./generateTask');\nconst taskSequence_1 = require('./taskSequence');\nconst utils_1 = require('./utils');\nfunction bindingConfig(cfg) {\n    if (!cfg.oper) {\n        cfg.oper = currentOperation(cfg.env);\n    }\n    cfg.fileFilter = cfg.fileFilter || utils_1.files;\n    cfg.runSequence = cfg.runSequence || taskSequence_1.runSequence;\n    cfg.addToSequence = cfg.addToSequence || taskSequence_1.addToSequence;\n    cfg.generateTask = cfg.generateTask || ((tasks) => {\n        return generateTask_1.generateTask(tasks, cfg.oper, cfg.env);\n    });\n    cfg.subTaskName = cfg.subTaskName || ((dt, deft = '') => {\n        let name = '';\n        if (_.isString(dt)) {\n            name = dt;\n        }\n        else if (dt) {\n            name = utils_1.taskStringVal(dt.name, cfg.oper);\n        }\n        let parentName = utils_1.taskStringVal(cfg.option.name, cfg.oper);\n        return parentName ? `${parentName}-${name || deft}` : name;\n    });\n    cfg.getSrc = cfg.getSrc || ((assert) => {\n        let src;\n        if (assert) {\n            src = utils_1.taskSourceVal(assert.src, cfg.oper);\n        }\n        if (!src) {\n            src = utils_1.taskSourceVal(cfg.option.src, cfg.oper);\n        }\n        return src;\n    });\n    cfg.getDist = cfg.getDist || ((ds) => {\n        if (ds) {\n            let dist = getCurrentDist(ds, cfg.oper);\n            if (dist) {\n                return dist;\n            }\n        }\n        return getCurrentDist(cfg.option, cfg.oper);\n    });\n    return cfg;\n}\nexports.bindingConfig = bindingConfig;\nfunction currentOperation(env) {\n    let oper;\n    if (env.deploy) {\n        oper = TaskConfig_1.Operation.deploy;\n    }\n    else if (env.release) {\n        oper = TaskConfig_1.Operation.release;\n    }\n    else if (env.e2e) {\n        oper = TaskConfig_1.Operation.e2e;\n    }\n    else if (env.test) {\n        oper = TaskConfig_1.Operation.test;\n    }\n    else {\n        oper = TaskConfig_1.Operation.build;\n    }\n    return oper;\n}\nexports.currentOperation = currentOperation;\nfunction getCurrentDist(ds, oper) {\n    let dist;\n    switch (oper) {\n        case TaskConfig_1.Operation.build:\n            dist = ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.test:\n            dist = ds.test || ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.e2e:\n            dist = ds.e2e || ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.release:\n            dist = ds.release || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.deploy:\n            dist = ds.deploy || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        default:\n            dist = '';\n            break;\n    }\n    return dist;\n}\n","import * as _ from 'lodash';\r\nimport { IDynamicTask, IOutputDist, IEnvOption, Operation, ITaskConfig, IAsserts, Src } from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { runSequence, addToSequence } from './taskSequence';\r\nimport { files, taskStringVal, taskSourceVal } from './utils';\r\n\r\n/**\r\n * binding Config to implement default func.\r\n * \r\n * @export\r\n * @param {TaskConfig} cfg\r\n * @returns {TaskConfig}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig): ITaskConfig {\r\n    if (!cfg.oper) {\r\n        cfg.oper = currentOperation(cfg.env);\r\n    }\r\n    cfg.fileFilter = cfg.fileFilter || files;\r\n    cfg.runSequence = cfg.runSequence || runSequence;\r\n    cfg.addToSequence = cfg.addToSequence || addToSequence;\r\n    cfg.generateTask = cfg.generateTask || ((tasks: IDynamicTask | IDynamicTask[]) => {\r\n        return generateTask(tasks, cfg.oper, cfg.env);\r\n    });\r\n\r\n    cfg.subTaskName = cfg.subTaskName || ((dt, deft = '') => {\r\n        let name = '';\r\n        if (_.isString(dt)) {\r\n            name = dt;\r\n        } else if (dt) {\r\n            name = taskStringVal(dt.name, cfg.oper)\r\n        }\r\n        let parentName = taskStringVal(cfg.option.name, cfg.oper);\r\n\r\n        return parentName ? `${parentName}-${name || deft}` : name;\r\n    });\r\n\r\n    cfg.getSrc = cfg.getSrc || ((assert?: IAsserts): Src => {\r\n        let src: Src;\r\n        if (assert) {\r\n            src = taskSourceVal(assert.src, cfg.oper)\r\n        }\r\n        if (!src) {\r\n            src = taskSourceVal(cfg.option.src, cfg.oper)\r\n        }\r\n        return src\r\n    });\r\n\r\n    cfg.getDist = cfg.getDist || ((ds?: IOutputDist) => {\r\n        if (ds) {\r\n            let dist = getCurrentDist(ds, cfg.oper);\r\n            if (dist) {\r\n                return dist;\r\n            }\r\n        }\r\n        return getCurrentDist(cfg.option, cfg.oper);\r\n    });\r\n\r\n    return cfg;\r\n}\r\n\r\n/**\r\n * get current env Operation.\r\n * \r\n * @export\r\n * @param {EnvOption} env\r\n * @returns\r\n */\r\nexport function currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else if (env.e2e) {\r\n        oper = Operation.e2e;\r\n    } else if (env.test) {\r\n        oper = Operation.test;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n\r\n/**\r\n * get dist.\r\n * \r\n * @param {OutputDist} ds\r\n * @param {Operation} oper\r\n * @returns\r\n */\r\nfunction getCurrentDist(ds: IOutputDist, oper: Operation) {\r\n    let dist: string;\r\n    switch (oper) {\r\n        case Operation.build:\r\n            dist = ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.test:\r\n            dist = ds.test || ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.e2e:\r\n            dist = ds.e2e || ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.release:\r\n            dist = ds.release || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.deploy:\r\n            dist = ds.deploy || taskStringVal(ds.dist, oper);\r\n            break;\r\n        default:\r\n            dist = '';\r\n            break;\r\n    }\r\n    return dist;\r\n}\r\n\r\n\r\n"]}