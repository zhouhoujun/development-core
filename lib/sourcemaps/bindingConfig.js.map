{"version":3,"sources":["bindingConfig.js","bindingConfig.ts"],"names":["bindingConfig","cfg","oper","currentOperation","env","context","globals","option","runTasks","fileFilter","utils_1","files","runSequence","taskSequence_1","addToSequence","generateTask","tasks","match","generateTask_1","_","extend","createDefaultMatch","findTasks","mdl","decorator_1","findTasksInModule","findTasksInDir","dirs","findTaskDefine","findTaskDefineInModule","bind","this","findTaskDefineInDir","subTaskName","dt","deft","arguments","length","undefined","name","isString","taskStringVal","parentName","getSrc","task","relative","src","assert","taskSourceVal","getAssertSrc","absoluteSrc","root","getDist","dist","getCurrentDist","absolutePath","toRootSrc","toRootPath","pathstr","deploy","TaskConfig_1","Operation","release","build","watch","test","serve","e2e","testSrc","e2eSrc","watchSrc","clean","cleanSrc","ds","buildDist","releaseDist","deployDist","testDist","e2eDist","require","exports","ctx","anothor"],"mappings":"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","file":"../bindingConfig.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst generateTask_1 = require('./generateTask');\nconst taskSequence_1 = require('./taskSequence');\nconst utils_1 = require('./utils');\nconst decorator_1 = require('./decorator');\n/**\n * binding Config to implement default func.\n *\n * @export\n * @param {ITaskConfig} cfg\n * @returns {ITaskContext}\n */\nfunction bindingConfig(cfg) {\n    // if (!cfg.oper) {\n    //     cfg.oper = currentOperation(cfg.env);\n    // }\n    let oper = (cfg.oper || 0) | currentOperation(cfg.env);\n    let context = {\n        oper: oper,\n        env: cfg.env,\n        globals: cfg.globals || {},\n        option: cfg.option,\n        runTasks: cfg.runTasks,\n        fileFilter: utils_1.files,\n        runSequence: taskSequence_1.runSequence,\n        addToSequence: cfg.addToSequence || taskSequence_1.addToSequence,\n        generateTask(tasks, match) {\n            return generateTask_1.generateTask(tasks, _.extend(createDefaultMatch(context), match || {}));\n        },\n        findTasks(mdl, match) {\n            return decorator_1.findTasksInModule(mdl, _.extend(createDefaultMatch(context), match || {}));\n        },\n        findTasksInDir(dirs, match) {\n            return decorator_1.findTasksInDir(dirs, _.extend(createDefaultMatch(context), match || {}));\n        },\n        findTaskDefine: decorator_1.findTaskDefineInModule.bind(this),\n        findTaskDefineInDir: decorator_1.findTaskDefineInDir.bind(this),\n        subTaskName(dt, deft = '') {\n            let name = '';\n            if (_.isString(dt)) {\n                name = dt;\n            }\n            else if (dt && cfg.option !== dt) {\n                name = utils_1.taskStringVal(dt.name, context.oper);\n            }\n            else {\n                name = deft;\n            }\n            let parentName = utils_1.taskStringVal(cfg.option.name, context.oper);\n            return parentName ? `${parentName}-${name}` : name;\n        },\n        getSrc(task, relative = false) {\n            let src;\n            if (task && task.assert) {\n                src = utils_1.taskSourceVal(getAssertSrc(task.assert, task.oper || context.oper), context.oper);\n            }\n            if (!src) {\n                src = utils_1.taskSourceVal(getAssertSrc(cfg.option, task.oper || context.oper), context.oper);\n            }\n            return (relative === false) ? src : utils_1.absoluteSrc(cfg.env.root, src);\n        },\n        getDist(task, relative = false) {\n            let dist;\n            if (task && task.assert) {\n                dist = getCurrentDist(task.assert, context.oper);\n            }\n            dist = dist || getCurrentDist(context.option, context.oper);\n            return (relative === false) ? dist : utils_1.absolutePath(cfg.env.root, dist);\n        },\n        toRootSrc(src) {\n            return utils_1.absoluteSrc(cfg.env.root, src);\n        },\n        toRootPath(pathstr) {\n            return utils_1.absolutePath(cfg.env.root, pathstr);\n        }\n    };\n    return context;\n}\nexports.bindingConfig = bindingConfig;\nlet createDefaultMatch = (ctx) => {\n    let match = { oper: ctx.oper };\n    if (ctx.match) {\n        match.match = (anothor) => {\n            return ctx.match(match, anothor);\n        };\n    }\n    return match;\n};\n/**\n * get current env Operation.\n *\n * @export\n * @param {EnvOption} env\n * @returns\n */\nfunction currentOperation(env) {\n    let oper;\n    if (env.deploy) {\n        oper = TaskConfig_1.Operation.deploy;\n    }\n    else if (env.release) {\n        oper = TaskConfig_1.Operation.release;\n    }\n    else {\n        oper = TaskConfig_1.Operation.build;\n    }\n    if (env.watch) {\n        oper = oper | TaskConfig_1.Operation.watch;\n    }\n    if (env.test) {\n        oper = oper | TaskConfig_1.Operation.test;\n    }\n    if (env.serve) {\n        oper = oper | TaskConfig_1.Operation.serve;\n    }\n    if (env.e2e) {\n        oper = oper | TaskConfig_1.Operation.e2e;\n    }\n    return oper;\n}\nexports.currentOperation = currentOperation;\nfunction getAssertSrc(assert, oper) {\n    let src = null;\n    if ((oper & TaskConfig_1.Operation.test) > 0) {\n        src = assert.testSrc;\n    }\n    else if ((oper & TaskConfig_1.Operation.e2e) > 0) {\n        src = assert.e2eSrc;\n    }\n    else if ((oper & TaskConfig_1.Operation.watch) > 0) {\n        src = assert.watchSrc;\n    }\n    else if ((oper & TaskConfig_1.Operation.clean) > 0) {\n        src = assert.cleanSrc || assert.dist;\n    }\n    return src || assert.src;\n}\n/**\n * get dist.\n *\n * @param {OutputDist} ds\n * @param {Operation} oper\n * @returns\n */\nfunction getCurrentDist(ds, oper) {\n    let dist;\n    if ((oper & TaskConfig_1.Operation.build) > 0) {\n        dist = ds.buildDist || utils_1.taskStringVal(ds.dist, oper);\n    }\n    else if ((oper & TaskConfig_1.Operation.release) > 0) {\n        dist = ds.releaseDist || utils_1.taskStringVal(ds.dist, oper);\n    }\n    else if ((oper & TaskConfig_1.Operation.deploy) > 0) {\n        dist = ds.deployDist || utils_1.taskStringVal(ds.dist, oper);\n    }\n    else if ((oper & TaskConfig_1.Operation.test) > 0) {\n        dist = ds.testDist || ds.buildDist || utils_1.taskStringVal(ds.dist, oper);\n    }\n    else if ((oper & TaskConfig_1.Operation.e2e) > 0) {\n        dist = ds.e2eDist || ds.buildDist || utils_1.taskStringVal(ds.dist, oper);\n    }\n    return dist;\n}\n","import * as _ from 'lodash';\r\nimport { IAssertDist, IEnvOption, Operation, ITaskContext, ITaskConfig, ITaskInfo, Src } from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { runSequence, addToSequence } from './taskSequence';\r\nimport { files, taskStringVal, taskSourceVal, absoluteSrc, absolutePath } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './decorator';\r\n\r\n\r\n\r\n\r\n/**\r\n * binding Config to implement default func.\r\n * \r\n * @export\r\n * @param {ITaskConfig} cfg\r\n * @returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig): ITaskContext {\r\n    // if (!cfg.oper) {\r\n    //     cfg.oper = currentOperation(cfg.env);\r\n    // }\r\n    let oper = (cfg.oper || 0) | currentOperation(cfg.env);\r\n\r\n    let context: ITaskContext = <ITaskContext>{\r\n        oper: oper,\r\n\r\n        env: cfg.env,\r\n        globals: cfg.globals || {},\r\n        option: cfg.option,\r\n        runTasks: cfg.runTasks,\r\n\r\n        fileFilter: files,\r\n        runSequence: runSequence,\r\n        addToSequence: cfg.addToSequence || addToSequence,\r\n        generateTask(tasks, match?) {\r\n            return generateTask(tasks, _.extend(createDefaultMatch(context), match || {}));\r\n        },\r\n        findTasks(mdl, match?) {\r\n            return findTasksInModule(mdl, _.extend(createDefaultMatch(context), match || {}));\r\n        },\r\n        findTasksInDir(dirs, match?) {\r\n            return findTasksInDir(dirs, _.extend(createDefaultMatch(context), match || {}));\r\n        },\r\n\r\n        findTaskDefine: findTaskDefineInModule.bind(this),\r\n\r\n        findTaskDefineInDir: findTaskDefineInDir.bind(this),\r\n\r\n        subTaskName(dt, deft = '') {\r\n            let name = '';\r\n            if (_.isString(dt)) {\r\n                name = dt;\r\n            } else if (dt && cfg.option !== dt) {\r\n                name = taskStringVal(dt.name, context.oper)\r\n            } else {\r\n                name = deft;\r\n            }\r\n            let parentName = taskStringVal(cfg.option.name, context.oper);\r\n\r\n            return parentName ? `${parentName}-${name}` : name;\r\n        },\r\n\r\n        getSrc(task?: ITaskInfo, relative = false): Src {\r\n            let src: Src;\r\n            if (task && task.assert) {\r\n                src = taskSourceVal(getAssertSrc(task.assert, task.oper || context.oper), context.oper)\r\n            }\r\n            if (!src) {\r\n                src = taskSourceVal(getAssertSrc(cfg.option, task.oper || context.oper), context.oper)\r\n            }\r\n            return (relative === false) ? src : absoluteSrc(cfg.env.root, src);\r\n        },\r\n\r\n        getDist(task?: ITaskInfo, relative = false) {\r\n            let dist;\r\n            if (task && task.assert) {\r\n                dist = getCurrentDist(task.assert, context.oper);\r\n            }\r\n            dist = dist || getCurrentDist(context.option, context.oper);\r\n\r\n            return (relative === false) ? dist : absolutePath(cfg.env.root, dist);\r\n        },\r\n\r\n        toRootSrc(src: Src): Src {\r\n            return absoluteSrc(cfg.env.root, src);\r\n        },\r\n        toRootPath(pathstr: string): string {\r\n            return absolutePath(cfg.env.root, pathstr);\r\n        }\r\n    };\r\n\r\n    return context;\r\n}\r\n\r\nlet createDefaultMatch = (ctx: ITaskContext) => {\r\n    let match: ITaskInfo = { oper: ctx.oper };\r\n    if (ctx.match) {\r\n        match.match = (anothor: ITaskInfo) => {\r\n            return ctx.match(match, anothor);\r\n        }\r\n    }\r\n    return match;\r\n}\r\n\r\n\r\n/**\r\n * get current env Operation.\r\n * \r\n * @export\r\n * @param {EnvOption} env\r\n * @returns\r\n */\r\nexport function currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n * get dist.\r\n * \r\n * @param {OutputDist} ds\r\n * @param {Operation} oper\r\n * @returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, oper: Operation) {\r\n    let dist: string;\r\n    if ((oper & Operation.build) > 0) {\r\n        dist = ds.buildDist || taskStringVal(ds.dist, oper);\r\n    } else if ((oper & Operation.release) > 0) {\r\n        dist = ds.releaseDist || taskStringVal(ds.dist, oper);\r\n    } else if ((oper & Operation.deploy) > 0) {\r\n        dist = ds.deployDist || taskStringVal(ds.dist, oper);\r\n    } else if ((oper & Operation.test) > 0) {\r\n        dist = ds.testDist || ds.buildDist || taskStringVal(ds.dist, oper);\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        dist = ds.e2eDist || ds.buildDist || taskStringVal(ds.dist, oper);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n"]}