{"version":3,"sources":["bindingConfig.js","bindingConfig.ts"],"names":["bindingConfig","cfg","parent","createContext","TaskContext","currentOperation","env","oper","deploy","TaskConfig_1","Operation","release","build","watch","test","serve","e2e","getAssertSrc","assert","src","testSrc","e2eSrc","watchSrc","clean","cleanSrc","dist","getCurrentDist","ds","ctx","deployDist","taskStringVal","releaseDist","e2eDist","buildDist","testDist","files","express","filter","mapping","Promise","resolve","globby","then","_","map","taskSourceVal","isFunction","name","require","generateTask_1","taskSequence_1","utils_1","decorator_1","exports","globals","_classCallCheck","this","option","task","match","matchCompare","relative","arguments","length","undefined","absoluteSrc","root","absolutePath","ext","isString","optName","indexOf","lang","printHelp","module","findTasksInModule","extend","dirs","findTasksInDir","findTaskDefineInModule","findTaskDefineInDir","gulp","tasks","runSequence","generateTask","sequence","addToSequence","pathstr","getDist","source"],"mappings":"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","file":"../bindingConfig.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst generateTask_1 = require('./generateTask');\nconst taskSequence_1 = require('./taskSequence');\nconst utils_1 = require('./utils');\nconst decorator_1 = require('./decorator');\nconst globby = require('globby');\n/**\n * binding Config, create task context.\n *\n * @export\n * @param {ITaskConfig} cfg\n * @param {ITaskContext} [parent]\n * @returns {ITaskContext}\n */\nfunction bindingConfig(cfg, parent) {\n    if (cfg.createContext) {\n        return cfg.createContext(cfg, parent);\n    }\n    return new TaskContext(cfg, parent);\n}\nexports.bindingConfig = bindingConfig;\n/**\n * global data.\n */\nlet globals = {};\n/**\n * TaskContext\n *\n * @export\n * @class TaskContext\n * @implements {ITaskContext}\n */\nclass TaskContext {\n    constructor(cfg, parent) {\n        this.cfg = cfg;\n        this.parent = parent;\n        this.env = cfg.env;\n        this.oper = currentOperation(cfg.env);\n        this.option = cfg.option;\n        this.globals = cfg.globals || globals;\n    }\n    matchCompare(task, match) {\n        if (this.option.match) {\n            return this.option.match(task, match);\n        }\n        return utils_1.matchCompare(task, match);\n    }\n    getSrc(task, relative = false) {\n        let src;\n        let ctx = this;\n        let oper = task ? (task.oper || ctx.oper) : ctx.oper;\n        if (task && task.assert) {\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx);\n        }\n        if (!src) {\n            src = taskSourceVal(getAssertSrc(ctx.option, oper), ctx);\n        }\n        return (relative !== false) ? src : utils_1.absoluteSrc(ctx.env.root, src);\n    }\n    getDist(task, relative = false) {\n        let dist;\n        let ctx = this;\n        // let oper = task ? (task.oper || context.oper) : context.oper;\n        if (task && task.assert) {\n            dist = getCurrentDist(task.assert, ctx);\n        }\n        dist = dist || getCurrentDist(ctx.option, ctx);\n        return (relative !== false) ? dist : utils_1.absolutePath(ctx.env.root, dist);\n    }\n    subTaskName(task, ext = '') {\n        let ctx = this;\n        let name = '';\n        // let oper = context.oper;\n        if (_.isString(task)) {\n            name = task;\n        }\n        else if (task && task !== ctx.option) {\n            // oper = task.oper || context.oper;\n            if (task.name) {\n                name = taskStringVal(task.name, ctx);\n            }\n            if (!name && task.assert && task.assert.name) {\n                name = taskStringVal(task.assert.name, ctx);\n            }\n        }\n        let optName = taskStringVal(ctx.option.name, ctx);\n        if (optName) {\n            if (name.indexOf(optName + '-') === 0) {\n                return name;\n            }\n            // avoid soma name.\n            if (name && optName !== name) {\n                return `${optName}-${name}` + ext;\n            }\n            return optName + ext;\n        }\n        else {\n            return name + ext;\n        }\n    }\n    printHelp(lang) {\n        if (this.cfg.printHelp) {\n            this.cfg.printHelp(lang);\n        }\n    }\n    findTasks(module, match) {\n        let ctx = this;\n        return decorator_1.findTasksInModule(module, _.extend({ oper: ctx.oper }, match || {}), this);\n    }\n    findTasksInDir(dirs, match) {\n        let ctx = this;\n        return decorator_1.findTasksInDir(dirs, _.extend({ oper: ctx.oper }, match || {}), this);\n    }\n    findTaskDefine(module) {\n        return decorator_1.findTaskDefineInModule(module);\n    }\n    findTaskDefineInDir(dirs) {\n        return decorator_1.findTaskDefineInDir(dirs);\n    }\n    fileFilter(express, filter, mapping) {\n        return files(express, filter, mapping);\n    }\n    runSequence(gulp, tasks) {\n        return taskSequence_1.runSequence(gulp, tasks);\n    }\n    generateTask(tasks, match) {\n        let ctx = this;\n        return generateTask_1.generateTask(tasks, _.extend({ oper: ctx.oper }, match || {}), this);\n    }\n    addToSequence(sequence, task) {\n        if (this.cfg.addToSequence) {\n            return this.cfg.addToSequence(sequence, task);\n        }\n        return taskSequence_1.addToSequence(sequence, task, this);\n    }\n    toRootSrc(src) {\n        return utils_1.absoluteSrc(this.cfg.env.root, src);\n    }\n    toRootPath(pathstr) {\n        return utils_1.absolutePath(this.cfg.env.root, pathstr);\n    }\n    toDistPath(pathstr) {\n        return utils_1.absolutePath(this.getDist(), pathstr);\n    }\n    toSrc(source) {\n        return taskSourceVal(source, this);\n    }\n    toStr(name) {\n        return taskStringVal(name, this);\n    }\n}\nexports.TaskContext = TaskContext;\n// let createDefaultMatch = (ctx: ITaskContext) => {\n//     let match: ITaskInfo = { oper: ctx.oper };\n//     if (ctx.match) {\n//         match.match = (anothor: ITaskInfo) => {\n//             return ctx.match(match, anothor);\n//         }\n//     }\n//     return match;\n// }\n/**\n * get current env Operation.\n *\n * @export\n * @param {EnvOption} env\n * @returns\n */\nfunction currentOperation(env) {\n    let oper;\n    if (env.deploy) {\n        oper = TaskConfig_1.Operation.deploy;\n    }\n    else if (env.release) {\n        oper = TaskConfig_1.Operation.release;\n    }\n    else {\n        oper = TaskConfig_1.Operation.build;\n    }\n    if (env.watch) {\n        oper = oper | TaskConfig_1.Operation.watch;\n    }\n    if (env.test) {\n        oper = oper | TaskConfig_1.Operation.test;\n    }\n    if (env.serve) {\n        oper = oper | TaskConfig_1.Operation.serve;\n    }\n    if (env.e2e) {\n        oper = oper | TaskConfig_1.Operation.e2e;\n    }\n    return oper;\n}\nexports.currentOperation = currentOperation;\n/**\n * get assert source.\n *\n * @param {IAssertDist} assert\n * @param {Operation} oper\n * @returns\n */\nfunction getAssertSrc(assert, oper) {\n    let src = null;\n    if ((oper & TaskConfig_1.Operation.test) > 0) {\n        src = assert.testSrc;\n    }\n    else if ((oper & TaskConfig_1.Operation.e2e) > 0) {\n        src = assert.e2eSrc;\n    }\n    else if ((oper & TaskConfig_1.Operation.watch) > 0) {\n        src = assert.watchSrc;\n    }\n    else if ((oper & TaskConfig_1.Operation.clean) > 0) {\n        src = assert.cleanSrc || assert.dist;\n    }\n    return src || assert.src;\n}\n/**\n * get dist.\n *\n * @param {IAssertDist} ds\n * @param {ITaskContext} ctx\n * @returns\n */\nfunction getCurrentDist(ds, ctx) {\n    let dist;\n    let env = ctx.env;\n    let oper = ctx.oper;\n    if (env.deploy || (oper & TaskConfig_1.Operation.deploy) > 0) {\n        dist = ds.deployDist || taskStringVal(ds.dist, ctx);\n    }\n    else if (env.release || (oper & TaskConfig_1.Operation.release) > 0) {\n        dist = ds.releaseDist || taskStringVal(ds.dist, ctx);\n    }\n    else if (env.e2e || (oper & TaskConfig_1.Operation.e2e) > 0) {\n        dist = ds.e2eDist || ds.buildDist || taskStringVal(ds.dist, ctx);\n    }\n    else if (env.test || (oper & TaskConfig_1.Operation.test) > 0) {\n        dist = ds.testDist || ds.buildDist || taskStringVal(ds.dist, ctx);\n    }\n    else if ((oper & TaskConfig_1.Operation.build) > 0) {\n        dist = ds.buildDist || taskStringVal(ds.dist, ctx);\n    }\n    return dist;\n}\n/**\n * filter fileName in directory.\n *\n * @export\n * @param {string} directory\n * @param {((fileName: string) => boolean)} [express]\n * @returns {string[]}\n */\nfunction files(express, filter, mapping) {\n    return Promise.resolve(globby(express))\n        .then((files) => {\n        if (filter) {\n            files = _.filter(files, filter);\n        }\n        if (mapping) {\n            files = _.map(files, mapping);\n        }\n        return files;\n    });\n}\nexports.files = files;\n/**\n * task src, string or array string.\n *\n * @export\n * @param {TaskSource} src\n * @param {Operation} oper runtime Operation\n * @param {IEnvOption} [env]\n * @returns\n */\nfunction taskSourceVal(src, ctx) {\n    return _.isFunction(src) ? src(ctx) : (src || '');\n}\nexports.taskSourceVal = taskSourceVal;\n/**\n * task string.\n *\n * @export\n * @param {TaskString} name\n * @param {ITaskContext} ctx\n * @returns\n */\nfunction taskStringVal(name, ctx) {\n    return _.isFunction(name) ? name(ctx) : (name || '');\n}\nexports.taskStringVal = taskStringVal;\n","import * as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport { ITask, ITaskDefine, IAssertDist, IEnvOption, Operation, ITaskContext, ITaskConfig, ITaskInfo, Src, TaskSource, IAsserts, TaskString } from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { runSequence, addToSequence } from './taskSequence';\r\nimport { matchCompare, absoluteSrc, absolutePath } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './decorator';\r\n\r\nconst globby = require('globby');\r\n\r\n/**\r\n * binding Config, create task context.\r\n * \r\n * @export\r\n * @param {ITaskConfig} cfg\r\n * @param {ITaskContext} [parent]\r\n * @returns {ITaskContext}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig, parent?: ITaskContext): ITaskContext {\r\n    if (cfg.createContext) {\r\n        return cfg.createContext(cfg, parent);\r\n    }\r\n    return new TaskContext(cfg, parent);\r\n}\r\n\r\n/**\r\n * global data.\r\n */\r\nlet globals = {};\r\n\r\n/**\r\n * TaskContext\r\n * \r\n * @export\r\n * @class TaskContext\r\n * @implements {ITaskContext}\r\n */\r\nexport class TaskContext implements ITaskContext {\r\n    public oper: Operation;\r\n    public option: IAsserts;\r\n    public env: IEnvOption;\r\n    public globals: any;\r\n    constructor(private cfg: ITaskConfig, public parent?: ITaskContext) {\r\n        this.env = cfg.env;\r\n        this.oper = currentOperation(cfg.env);\r\n        this.option = cfg.option;\r\n        this.globals = cfg.globals || globals;\r\n    }\r\n\r\n    matchCompare(task: ITaskInfo, match: ITaskInfo): boolean {\r\n        if (this.option.match) {\r\n            return this.option.match(task, match);\r\n        }\r\n        return matchCompare(task, match);\r\n    }\r\n\r\n    getSrc(task?: ITaskInfo, relative = false): Src {\r\n        let src: Src;\r\n        let ctx = this;\r\n        let oper = task ? (task.oper || ctx.oper) : ctx.oper;\r\n        if (task && task.assert) {\r\n            src = taskSourceVal(getAssertSrc(task.assert, oper), ctx)\r\n        }\r\n        if (!src) {\r\n            src = taskSourceVal(getAssertSrc(ctx.option, oper), ctx)\r\n        }\r\n        return (relative !== false) ? src : absoluteSrc(ctx.env.root, src);\r\n    }\r\n\r\n    getDist(task?: ITaskInfo, relative = false) {\r\n        let dist;\r\n        let ctx = this;\r\n        // let oper = task ? (task.oper || context.oper) : context.oper;\r\n        if (task && task.assert) {\r\n            dist = getCurrentDist(task.assert, ctx);\r\n        }\r\n        dist = dist || getCurrentDist(ctx.option, ctx);\r\n\r\n        return (relative !== false) ? dist : absolutePath(ctx.env.root, dist);\r\n    }\r\n\r\n    subTaskName(task, ext = '') {\r\n        let ctx = this;\r\n        let name = '';\r\n        // let oper = context.oper;\r\n        if (_.isString(task)) {\r\n            name = task;\r\n        } else if (task && task !== ctx.option) {\r\n            // oper = task.oper || context.oper;\r\n            if (task.name) {\r\n                name = taskStringVal(task.name, ctx)\r\n            }\r\n            if (!name && task.assert && task.assert.name) {\r\n                name = taskStringVal(task.assert.name, ctx)\r\n            }\r\n        }\r\n\r\n        let optName = taskStringVal(ctx.option.name, ctx);\r\n        if (optName) {\r\n            if (name.indexOf(optName + '-') === 0) {\r\n                return name;\r\n            }\r\n            // avoid soma name.\r\n            if (name && optName !== name) {\r\n                return `${optName}-${name}` + ext;\r\n            }\r\n            return optName + ext;\r\n        } else {\r\n            return name + ext;\r\n        }\r\n    }\r\n\r\n    printHelp(lang: string): void {\r\n        if (this.cfg.printHelp) {\r\n            this.cfg.printHelp(lang);\r\n        }\r\n    }\r\n\r\n    findTasks(module: string | Object, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInModule(module, _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTasksInDir(dirs: Src, match?: ITaskInfo): Promise<ITask[]> {\r\n        let ctx = this;\r\n        return findTasksInDir(dirs, _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    findTaskDefine(module: string | Object): Promise<ITaskDefine> {\r\n        return findTaskDefineInModule(module);\r\n    }\r\n\r\n    findTaskDefineInDir(dirs: Src): Promise<ITaskDefine> {\r\n        return findTaskDefineInDir(dirs);\r\n    }\r\n\r\n\r\n    fileFilter(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n        return files(express, filter, mapping);\r\n    }\r\n\r\n    runSequence(gulp: Gulp, tasks: Src[]): Promise<any> {\r\n        return runSequence(gulp, tasks);\r\n    }\r\n\r\n    generateTask(tasks, match?) {\r\n        let ctx = this;\r\n        return generateTask(tasks, _.extend({ oper: ctx.oper }, match || {}), this);\r\n    }\r\n\r\n    addToSequence(sequence: Src[], task: ITaskInfo): Src[] {\r\n        if (this.cfg.addToSequence) {\r\n            return this.cfg.addToSequence(sequence, task);\r\n        }\r\n        return addToSequence(sequence, task, this);\r\n    }\r\n\r\n    toRootSrc(src: Src): Src {\r\n        return absoluteSrc(this.cfg.env.root, src);\r\n    }\r\n\r\n    toRootPath(pathstr: string): string {\r\n        return absolutePath(this.cfg.env.root, pathstr);\r\n    }\r\n\r\n    toDistPath(pathstr: string): string {\r\n        return absolutePath(this.getDist(), pathstr);\r\n    }\r\n\r\n    toSrc(source: TaskSource): Src {\r\n        return taskSourceVal(source, this);\r\n    }\r\n\r\n    toStr(name: TaskString): string {\r\n        return taskStringVal(name, this);\r\n    }\r\n}\r\n\r\n\r\n// let createDefaultMatch = (ctx: ITaskContext) => {\r\n//     let match: ITaskInfo = { oper: ctx.oper };\r\n//     if (ctx.match) {\r\n//         match.match = (anothor: ITaskInfo) => {\r\n//             return ctx.match(match, anothor);\r\n//         }\r\n//     }\r\n//     return match;\r\n// }\r\n\r\n\r\n/**\r\n * get current env Operation.\r\n * \r\n * @export\r\n * @param {EnvOption} env\r\n * @returns\r\n */\r\nexport function currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    if (env.watch) {\r\n        oper = oper | Operation.watch;\r\n    }\r\n    if (env.test) {\r\n        oper = oper | Operation.test;\r\n    }\r\n    if (env.serve) {\r\n        oper = oper | Operation.serve;\r\n    }\r\n    if (env.e2e) {\r\n        oper = oper | Operation.e2e;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n/**\r\n * get assert source.\r\n * \r\n * @param {IAssertDist} assert\r\n * @param {Operation} oper\r\n * @returns\r\n */\r\nfunction getAssertSrc(assert: IAssertDist, oper: Operation) {\r\n    let src = null;\r\n\r\n    if ((oper & Operation.test) > 0) {\r\n        src = assert.testSrc;\r\n    } else if ((oper & Operation.e2e) > 0) {\r\n        src = assert.e2eSrc;\r\n    } else if ((oper & Operation.watch) > 0) {\r\n        src = assert.watchSrc;\r\n    } else if ((oper & Operation.clean) > 0) {\r\n        src = assert.cleanSrc || assert.dist;\r\n    }\r\n\r\n\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n * get dist.\r\n * \r\n * @param {IAssertDist} ds\r\n * @param {ITaskContext} ctx\r\n * @returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, ctx: ITaskContext) {\r\n    let dist: string;\r\n    let env = ctx.env;\r\n    let oper = ctx.oper;\r\n    if (env.deploy || (oper & Operation.deploy) > 0) {\r\n        dist = ds.deployDist || taskStringVal(ds.dist, ctx);\r\n    } else if (env.release || (oper & Operation.release) > 0) {\r\n        dist = ds.releaseDist || taskStringVal(ds.dist, ctx);\r\n    } else if (env.e2e || (oper & Operation.e2e) > 0) {\r\n        dist = ds.e2eDist || ds.buildDist || taskStringVal(ds.dist, ctx);\r\n    } else if (env.test || (oper & Operation.test) > 0) {\r\n        dist = ds.testDist || ds.buildDist || taskStringVal(ds.dist, ctx);\r\n    } else if ((oper & Operation.build) > 0) {\r\n        dist = ds.buildDist || taskStringVal(ds.dist, ctx);\r\n    }\r\n\r\n    return dist;\r\n}\r\n\r\n\r\n/**\r\n * filter fileName in directory.\r\n * \r\n * @export\r\n * @param {string} directory\r\n * @param {((fileName: string) => boolean)} [express]\r\n * @returns {string[]}\r\n */\r\nexport function files(express: Src, filter?: (fileName: string) => boolean, mapping?: (filename: string) => string): Promise<string[]> {\r\n    return Promise.resolve(globby(express))\r\n        .then((files: string[]) => {\r\n            if (filter) {\r\n                files = _.filter(files, filter)\r\n            }\r\n            if (mapping) {\r\n                files = _.map(files, mapping);\r\n            }\r\n            return files;\r\n        })\r\n}\r\n\r\n/**\r\n * task src, string or array string.\r\n * \r\n * @export\r\n * @param {TaskSource} src\r\n * @param {Operation} oper runtime Operation\r\n * @param {IEnvOption} [env]\r\n * @returns\r\n */\r\nexport function taskSourceVal(src: TaskSource, ctx: ITaskContext) {\r\n    return _.isFunction(src) ? src(ctx) : (src || '');\r\n}\r\n\r\n/**\r\n * task string.\r\n * \r\n * @export\r\n * @param {TaskString} name\r\n * @param {ITaskContext} ctx\r\n * @returns\r\n */\r\nexport function taskStringVal(name: TaskString, ctx: ITaskContext) {\r\n    return _.isFunction(name) ? name(ctx) : (name || '');\r\n}\r\n"]}