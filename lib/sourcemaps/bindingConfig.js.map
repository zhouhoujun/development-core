{"version":3,"sources":["bindingConfig.js","bindingConfig.ts"],"names":["bindingConfig","cfg","oper","currentOperation","env","fileFilter","utils_1","files","runSequence","runSequence_1","addTask","generateTask","tasks","generateTask_1","subTaskName","name","deft","arguments","length","undefined","option","getDist","ds","dist","getCurrentDist","deploy","TaskConfig_1","Operation","release","e2e","test","build","taskStringVal","taskSequence","rst","_","isString","isArray","push","isNumber","order","splice","require","exports"],"mappings":"AAAA,YCaA,SAAAA,eAA8BC,GAuB1B,MAtBKA,GAAIC,OACLD,EAAIC,KAAOC,iBAAiBF,EAAIG,MAEpCH,EAAII,WAAaJ,EAAII,YAAcC,QAAAC,MACnCN,EAAIO,YAAcP,EAAIO,aAAeC,cAAAD,YACrCP,EAAIS,QAAUT,EAAIS,SAAWA,QAC7BT,EAAIU,aAAeV,EAAIU,cAAiB,SAACC,GACrC,MAAOC,gBAAAF,aAAaC,EAAOX,EAAIC,KAAMD,EAAIG,MAE7CH,EAAIa,YAAcb,EAAIa,aAAgB,SAACC,GAAe,GAATC,GAASC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAAF,EAChD,OAAOhB,GAAImB,OAAOL,KAAUd,EAAImB,OAAOL,KAAhC,KAAwCA,GAAQC,GAASD,GAEpEd,EAAIoB,QAAUpB,EAAIoB,SAAY,SAACC,GAC3B,GAAIA,EAAI,CACJ,GAAIC,GAAOC,eAAeF,EAAIrB,EAAIC,KAClC,IAAIqB,EACA,MAAOA,GAGf,MAAOC,gBAAevB,EAAImB,OAAQnB,EAAIC,OAGnCD,EAUX,QAAAE,kBAAiCC,GAC7B,GAAIF,GAAAA,MAaJ,OAXIA,GADAE,EAAIqB,OACGC,aAAAC,UAAUF,OACVrB,EAAIwB,QACJF,aAAAC,UAAUC,QACVxB,EAAIyB,IACJH,aAAAC,UAAUE,IACVzB,EAAI0B,KACJJ,aAAAC,UAAUG,KAEVJ,aAAAC,UAAUI,MAczB,QAAAP,gBAAwBF,EAAiBpB,GACrC,GAAIqB,GAAAA,MACJ,QAAQrB,GACJ,IAAKwB,cAAAC,UAAUI,MACXR,EAAOD,EAAGS,OAASzB,QAAA0B,cAAcV,EAAGC,KAAMrB,EAC1C,MACJ,KAAKwB,cAAAC,UAAUG,KACXP,EAAOD,EAAGQ,MAAQR,EAAGS,OAASzB,QAAA0B,cAAcV,EAAGC,KAAMrB,EACrD,MACJ,KAAKwB,cAAAC,UAAUE,IACXN,EAAOD,EAAGO,KAAOP,EAAGS,OAASzB,QAAA0B,cAAcV,EAAGC,KAAMrB,EACpD,MACJ,KAAKwB,cAAAC,UAAUC,QACXL,EAAOD,EAAGM,SAAWtB,QAAA0B,cAAcV,EAAGC,KAAMrB,EAC5C,MACJ,KAAKwB,cAAAC,UAAUF,OACXF,EAAOD,EAAGG,QAAUnB,QAAA0B,cAAcV,EAAGC,KAAMrB,EAC3C,MACJ,SACIqB,EAAO,GAGf,MAAOA,GAKX,QAAAb,SAAiBuB,EAAqBC,GAClC,IAAKA,EACD,MAAOD,EAEX,IAAIE,EAAEC,SAASF,IAAQC,EAAEE,QAAQH,GAC7BD,EAAaK,KAAKJ,OACf,IAAIA,EAAInB,KAAM,CACjB,GAAIoB,EAAEI,SAASL,EAAIM,QAAUN,EAAIM,OAAS,GAAKN,EAAIM,MAAQP,EAAaf,OAEpE,MADAe,GAAaQ,OAAOP,EAAIM,MAAO,EAAGN,EAAInB,MAC/BkB,CAEXA,GAAaK,KAAKJ,EAAInB,MAE1B,MAAOkB,GA/GX,GAAYE,GAACO,QAAM,UACnBhB,aAAAgB,QAA+F,gBAC/F7B,eAAA6B,QAA6B,kBAC7BjC,cAAAiC,QAA4B,iBAC5BpC,QAAAoC,QAAqC,UASrBC,SAAA3C,cAAaA,cAiCb2C,QAAAxC,iBAAgBA","file":"../bindingConfig.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst generateTask_1 = require('./generateTask');\nconst runSequence_1 = require('./runSequence');\nconst utils_1 = require('./utils');\nfunction bindingConfig(cfg) {\n    if (!cfg.oper) {\n        cfg.oper = currentOperation(cfg.env);\n    }\n    cfg.fileFilter = cfg.fileFilter || utils_1.files;\n    cfg.runSequence = cfg.runSequence || runSequence_1.runSequence;\n    cfg.addTask = cfg.addTask || addTask;\n    cfg.generateTask = cfg.generateTask || ((tasks) => {\n        return generateTask_1.generateTask(tasks, cfg.oper, cfg.env);\n    });\n    cfg.subTaskName = cfg.subTaskName || ((name, deft = '') => {\n        return cfg.option.name ? `${cfg.option.name}-${name || deft}` : name;\n    });\n    cfg.getDist = cfg.getDist || ((ds) => {\n        if (ds) {\n            let dist = getCurrentDist(ds, cfg.oper);\n            if (dist) {\n                return dist;\n            }\n        }\n        return getCurrentDist(cfg.option, cfg.oper);\n    });\n    return cfg;\n}\nexports.bindingConfig = bindingConfig;\nfunction currentOperation(env) {\n    let oper;\n    if (env.deploy) {\n        oper = TaskConfig_1.Operation.deploy;\n    }\n    else if (env.release) {\n        oper = TaskConfig_1.Operation.release;\n    }\n    else if (env.e2e) {\n        oper = TaskConfig_1.Operation.e2e;\n    }\n    else if (env.test) {\n        oper = TaskConfig_1.Operation.test;\n    }\n    else {\n        oper = TaskConfig_1.Operation.build;\n    }\n    return oper;\n}\nexports.currentOperation = currentOperation;\nfunction getCurrentDist(ds, oper) {\n    let dist;\n    switch (oper) {\n        case TaskConfig_1.Operation.build:\n            dist = ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.test:\n            dist = ds.test || ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.e2e:\n            dist = ds.e2e || ds.build || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.release:\n            dist = ds.release || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.deploy:\n            dist = ds.deploy || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        default:\n            dist = '';\n            break;\n    }\n    return dist;\n}\nfunction addTask(taskSequence, rst) {\n    if (!rst) {\n        return taskSequence;\n    }\n    if (_.isString(rst) || _.isArray(rst)) {\n        taskSequence.push(rst);\n    }\n    else if (rst.name) {\n        if (_.isNumber(rst.order) && rst.order >= 0 && rst.order < taskSequence.length) {\n            taskSequence.splice(rst.order, 0, rst.name);\n            return taskSequence;\n        }\n        taskSequence.push(rst.name);\n    }\n    return taskSequence;\n}\n","import * as _ from 'lodash';\r\nimport { IDynamicTask, IOutputDist, IEnvOption, Operation, ITaskConfig, TaskResult, Src } from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { runSequence } from './runSequence';\r\nimport { files, taskStringVal } from './utils';\r\n\r\n/**\r\n * binding Config to implement default func.\r\n * \r\n * @export\r\n * @param {TaskConfig} cfg\r\n * @returns {TaskConfig}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig): ITaskConfig {\r\n    if (!cfg.oper) {\r\n        cfg.oper = currentOperation(cfg.env);\r\n    }\r\n    cfg.fileFilter = cfg.fileFilter || files;\r\n    cfg.runSequence = cfg.runSequence || runSequence;\r\n    cfg.addTask = cfg.addTask || addTask;\r\n    cfg.generateTask = cfg.generateTask || ((tasks: IDynamicTask | IDynamicTask[]) => {\r\n        return generateTask(tasks, cfg.oper, cfg.env);\r\n    });\r\n    cfg.subTaskName = cfg.subTaskName || ((name, deft = '') => {\r\n        return cfg.option.name ? `${cfg.option.name}-${name || deft}` : name;\r\n    });\r\n    cfg.getDist = cfg.getDist || ((ds?: IOutputDist) => {\r\n        if (ds) {\r\n            let dist = getCurrentDist(ds, cfg.oper);\r\n            if (dist) {\r\n                return dist;\r\n            }\r\n        }\r\n        return getCurrentDist(cfg.option, cfg.oper);\r\n    });\r\n\r\n    return cfg;\r\n}\r\n\r\n/**\r\n * get current env Operation.\r\n * \r\n * @export\r\n * @param {EnvOption} env\r\n * @returns\r\n */\r\nexport function currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else if (env.e2e) {\r\n        oper = Operation.e2e;\r\n    } else if (env.test) {\r\n        oper = Operation.test;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n\r\n/**\r\n * get dist.\r\n * \r\n * @param {OutputDist} ds\r\n * @param {Operation} oper\r\n * @returns\r\n */\r\nfunction getCurrentDist(ds: IOutputDist, oper: Operation) {\r\n    let dist: string;\r\n    switch (oper) {\r\n        case Operation.build:\r\n            dist = ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.test:\r\n            dist = ds.test || ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.e2e:\r\n            dist = ds.e2e || ds.build || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.release:\r\n            dist = ds.release || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.deploy:\r\n            dist = ds.deploy || taskStringVal(ds.dist, oper);\r\n            break;\r\n        default:\r\n            dist = '';\r\n            break;\r\n    }\r\n    return dist;\r\n}\r\n\r\n\r\n\r\nfunction addTask(taskSequence: Src[], rst: TaskResult) {\r\n    if (!rst) {\r\n        return taskSequence;\r\n    }\r\n    if (_.isString(rst) || _.isArray(rst)) {\r\n        taskSequence.push(rst);\r\n    } else if (rst.name) {\r\n        if (_.isNumber(rst.order) && rst.order >= 0 && rst.order < taskSequence.length) {\r\n            taskSequence.splice(rst.order, 0, rst.name);\r\n            return taskSequence;\r\n        }\r\n        taskSequence.push(rst.name);\r\n    }\r\n    return taskSequence;\r\n}\r\n"]}