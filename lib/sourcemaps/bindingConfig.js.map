{"version":3,"sources":["bindingConfig.js","bindingConfig.ts"],"names":["bindingConfig","cfg","oper","currentOperation","env","fileFilter","utils_1","files","runSequence","taskSequence_1","addToSequence","generateTask","tasks","match","generateTask_1","_","extend","watch","findTasks","mdl","decorator_1","findTasksInModule","findTasksInDir","dirs","findTaskDefine","findTaskDefineInModule","bind","findTaskDefineInDir","subTaskName","dt","deft","arguments","length","undefined","name","isString","option","taskStringVal","parentName","getSrc","assert","taskinfo","src","taskSourceVal","getAssertSrc","getDist","ds","dist","getCurrentDist","deploy","TaskConfig_1","Operation","release","e2e","test","build","testSrc","e2eSrc","watchSrc","buildDist","testDist","e2eDist","releaseDist","deployDist","require","exports"],"mappings":"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","file":"../bindingConfig.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst TaskConfig_1 = require('./TaskConfig');\nconst generateTask_1 = require('./generateTask');\nconst taskSequence_1 = require('./taskSequence');\nconst utils_1 = require('./utils');\nconst decorator_1 = require('./decorator');\n/**\n * binding Config to implement default func.\n *\n * @export\n * @param {TaskConfig} cfg\n * @returns {TaskConfig}\n */\nfunction bindingConfig(cfg) {\n    if (!cfg.oper) {\n        cfg.oper = currentOperation(cfg.env);\n    }\n    cfg.fileFilter = cfg.fileFilter || utils_1.files;\n    cfg.runSequence = cfg.runSequence || taskSequence_1.runSequence;\n    cfg.addToSequence = cfg.addToSequence || taskSequence_1.addToSequence;\n    cfg.generateTask = cfg.generateTask || ((tasks, match) => {\n        return generateTask_1.generateTask(tasks, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\n    });\n    cfg.findTasks = cfg.findTasks || ((mdl, match) => {\n        return decorator_1.findTasksInModule(mdl, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\n    });\n    cfg.findTasksInDir = cfg.findTasksInDir || ((dirs, match) => {\n        return decorator_1.findTasksInDir(dirs, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\n    });\n    cfg.findTaskDefine = cfg.findTaskDefine || decorator_1.findTaskDefineInModule.bind(cfg);\n    cfg.findTaskDefineInDir = cfg.findTaskDefineInDir || decorator_1.findTaskDefineInDir.bind(cfg);\n    cfg.subTaskName = cfg.subTaskName || ((dt, deft = '') => {\n        let name = '';\n        if (_.isString(dt)) {\n            name = dt;\n        }\n        else if (dt && cfg.option !== dt) {\n            name = utils_1.taskStringVal(dt.name, cfg.oper);\n        }\n        else {\n            name = deft;\n        }\n        let parentName = utils_1.taskStringVal(cfg.option.name, cfg.oper);\n        return parentName ? `${parentName}-${name}` : name;\n    });\n    cfg.getSrc = cfg.getSrc || ((assert, taskinfo) => {\n        let src;\n        if (assert) {\n            src = utils_1.taskSourceVal(getAssertSrc(assert, taskinfo), cfg.oper);\n        }\n        if (!src) {\n            src = utils_1.taskSourceVal(getAssertSrc(cfg.option, taskinfo), cfg.oper);\n        }\n        return src;\n    });\n    cfg.getDist = cfg.getDist || ((ds) => {\n        if (ds) {\n            let dist = getCurrentDist(ds, cfg.oper);\n            if (dist) {\n                return dist;\n            }\n        }\n        return getCurrentDist(cfg.option, cfg.oper);\n    });\n    return cfg;\n}\nexports.bindingConfig = bindingConfig;\n/**\n * get current env Operation.\n *\n * @export\n * @param {EnvOption} env\n * @returns\n */\nfunction currentOperation(env) {\n    let oper;\n    if (env.deploy) {\n        oper = TaskConfig_1.Operation.deploy;\n    }\n    else if (env.release) {\n        oper = TaskConfig_1.Operation.release;\n    }\n    else if (env.e2e) {\n        oper = TaskConfig_1.Operation.e2e;\n    }\n    else if (env.test) {\n        oper = TaskConfig_1.Operation.test;\n    }\n    else {\n        oper = TaskConfig_1.Operation.build;\n    }\n    return oper;\n}\nexports.currentOperation = currentOperation;\nfunction getAssertSrc(assert, taskinfo) {\n    let src = null;\n    if (taskinfo) {\n        if (taskinfo.test) {\n            src = assert.testSrc;\n        }\n        else if (taskinfo.e2e) {\n            src = assert.e2eSrc;\n        }\n        else if (taskinfo.watch) {\n            src = assert.watchSrc;\n        }\n    }\n    return src || assert.src;\n}\n/**\n * get dist.\n *\n * @param {OutputDist} ds\n * @param {Operation} oper\n * @returns\n */\nfunction getCurrentDist(ds, oper) {\n    let dist;\n    switch (oper) {\n        case TaskConfig_1.Operation.build:\n            dist = ds.buildDist || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.test:\n            dist = ds.testDist || ds.buildDist || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.e2e:\n            dist = ds.e2eDist || ds.buildDist || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.release:\n            dist = ds.releaseDist || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        case TaskConfig_1.Operation.deploy:\n            dist = ds.deployDist || utils_1.taskStringVal(ds.dist, oper);\n            break;\n        default:\n            dist = '';\n            break;\n    }\n    return dist;\n}\n","import * as _ from 'lodash';\r\nimport { IAssertDist, IEnvOption, Operation, ITaskConfig, ITaskInfo, Src } from './TaskConfig';\r\nimport { generateTask } from './generateTask';\r\nimport { runSequence, addToSequence } from './taskSequence';\r\nimport { files, taskStringVal, taskSourceVal } from './utils';\r\nimport { findTasksInModule, findTaskDefineInModule, findTasksInDir, findTaskDefineInDir } from './decorator';\r\n\r\n\r\n\r\n\r\n/**\r\n * binding Config to implement default func.\r\n * \r\n * @export\r\n * @param {TaskConfig} cfg\r\n * @returns {TaskConfig}\r\n */\r\nexport function bindingConfig(cfg: ITaskConfig): ITaskConfig {\r\n    if (!cfg.oper) {\r\n        cfg.oper = currentOperation(cfg.env);\r\n    }\r\n    cfg.fileFilter = cfg.fileFilter || files;\r\n    cfg.runSequence = cfg.runSequence || runSequence;\r\n    cfg.addToSequence = cfg.addToSequence || addToSequence;\r\n    cfg.generateTask = cfg.generateTask || ((tasks, match?) => {\r\n        return generateTask(tasks, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\r\n    });\r\n\r\n    cfg.findTasks = cfg.findTasks || ((mdl, match?) => {\r\n        return findTasksInModule(mdl, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\r\n    });\r\n    cfg.findTasksInDir = cfg.findTasksInDir || ((dirs, match?) => {\r\n        return findTasksInDir(dirs, _.extend({ oper: cfg.oper, watch: cfg.env.watch }, match || {}));\r\n    });\r\n\r\n    cfg.findTaskDefine = cfg.findTaskDefine || findTaskDefineInModule.bind(cfg);\r\n    cfg.findTaskDefineInDir = cfg.findTaskDefineInDir || findTaskDefineInDir.bind(cfg);\r\n\r\n    cfg.subTaskName = cfg.subTaskName || ((dt, deft = '') => {\r\n        let name = '';\r\n        if (_.isString(dt)) {\r\n            name = dt;\r\n        } else if (dt && cfg.option !== dt) {\r\n            name = taskStringVal(dt.name, cfg.oper)\r\n        } else {\r\n            name = deft;\r\n        }\r\n        let parentName = taskStringVal(cfg.option.name, cfg.oper);\r\n\r\n        return parentName ? `${parentName}-${name}` : name;\r\n    });\r\n\r\n    cfg.getSrc = cfg.getSrc || ((assert?: IAssertDist, taskinfo?: ITaskInfo): Src => {\r\n        let src: Src;\r\n        if (assert) {\r\n            src = taskSourceVal(getAssertSrc(assert, taskinfo), cfg.oper)\r\n        }\r\n        if (!src) {\r\n            src = taskSourceVal(getAssertSrc(cfg.option, taskinfo), cfg.oper)\r\n        }\r\n        return src\r\n    });\r\n\r\n    cfg.getDist = cfg.getDist || ((ds?: IAssertDist) => {\r\n        if (ds) {\r\n            let dist = getCurrentDist(ds, cfg.oper);\r\n            if (dist) {\r\n                return dist;\r\n            }\r\n        }\r\n        return getCurrentDist(cfg.option, cfg.oper);\r\n    });\r\n\r\n    return cfg;\r\n}\r\n\r\n\r\n\r\n/**\r\n * get current env Operation.\r\n * \r\n * @export\r\n * @param {EnvOption} env\r\n * @returns\r\n */\r\nexport function currentOperation(env: IEnvOption) {\r\n    let oper: Operation;\r\n    if (env.deploy) {\r\n        oper = Operation.deploy;\r\n    } else if (env.release) {\r\n        oper = Operation.release;\r\n    } else if (env.e2e) {\r\n        oper = Operation.e2e;\r\n    } else if (env.test) {\r\n        oper = Operation.test;\r\n    } else {\r\n        oper = Operation.build;\r\n    }\r\n\r\n    return oper;\r\n}\r\n\r\n\r\nfunction getAssertSrc(assert: IAssertDist, taskinfo?: ITaskInfo) {\r\n    let src = null;\r\n    if (taskinfo) {\r\n        if (taskinfo.test) {\r\n            src = assert.testSrc;\r\n        } else if (taskinfo.e2e) {\r\n            src = assert.e2eSrc;\r\n        } else if (taskinfo.watch) {\r\n            src = assert.watchSrc;\r\n        }\r\n    }\r\n    return src || assert.src;\r\n}\r\n\r\n/**\r\n * get dist.\r\n * \r\n * @param {OutputDist} ds\r\n * @param {Operation} oper\r\n * @returns\r\n */\r\nfunction getCurrentDist(ds: IAssertDist, oper: Operation) {\r\n    let dist: string;\r\n    switch (oper) {\r\n        case Operation.build:\r\n            dist = ds.buildDist || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.test:\r\n            dist = ds.testDist || ds.buildDist || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.e2e:\r\n            dist = ds.e2eDist || ds.buildDist || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.release:\r\n            dist = ds.releaseDist || taskStringVal(ds.dist, oper);\r\n            break;\r\n        case Operation.deploy:\r\n            dist = ds.deployDist || taskStringVal(ds.dist, oper);\r\n            break;\r\n        default:\r\n            dist = '';\r\n            break;\r\n    }\r\n    return dist;\r\n}\r\n\r\n\r\n"]}